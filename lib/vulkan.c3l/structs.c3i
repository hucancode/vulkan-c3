//
// Vulkan wrapper generated from "https://raw.githubusercontent.com/KhronosGroup/Vulkan-Headers/master/include/vulkan/vulkan_core.h"
//
module vk;

import std::core::cinterop;
import std::os::win32;
typedef Win32_HINSTANCE            @if(!env::WIN32) = void*;
typedef Win32_HANDLE               @if(!env::WIN32) = void*;
typedef Win32_HWND                 @if(!env::WIN32) = Win32_HANDLE;
typedef Win32_HMONITOR             @if(!env::WIN32) = Win32_HANDLE;
typedef Win32_LPCWSTR              @if(!env::WIN32) = short;
typedef Win32_SECURITY_ATTRIBUTES  @if(!env::WIN32) = void*;
typedef Win32_DWORD                @if(!env::WIN32) = uint;
typedef Win32_LONG                 @if(!env::WIN32) = int;
typedef Win32_LUID                 @if(!env::WIN32) = void*;

/* @if(xlib.IS_SUPPORTED) {
alias XlibDisplay  = xlib.Display;
alias XlibWindow   = xlib.Window;
alias XlibVisualID = xlib.VisualID;
}
*/
typedef XlibDisplay  = void*; // Opaque struct defined by Xlib
typedef XlibWindow   = CULong;
typedef XlibVisualID = CULong;

typedef XCBVisualID  = uint;
typedef XCBWindow    = uint;
typedef CAMetalLayer = void*;

typedef MTLBuffer_id       = void*;
typedef MTLTexture_id      = void*;
typedef MTLSharedEvent_id  = void*;
typedef MTLDevice_id       = void*;
typedef MTLCommandQueue_id = void*;

/********************************/

struct Extent2D {
	uint width ;
	uint height;
}

struct Extent3D {
	uint width ;
	uint height;
	uint depth ;
}

struct Offset2D {
	int x;
	int y;
}

struct Offset3D {
	int x;
	int y;
	int z;
}

struct Rect2D {
	Offset2D offset;
	Extent2D extent;
}

struct BaseInStructure {
	StructureType    s_type;
	BaseInStructure* p_next;
}

struct BaseOutStructure {
	StructureType     s_type;
	BaseOutStructure* p_next;
}

struct BufferMemoryBarrier {
	StructureType s_type                ;
	void*         p_next                ;
	AccessFlags   src_access_mask       ;
	AccessFlags   dst_access_mask       ;
	uint          src_queue_family_index;
	uint          dst_queue_family_index;
	Buffer        buffer                ;
	DeviceSize    offset                ;
	DeviceSize    size                  ;
}

struct DispatchIndirectCommand {
	uint x;
	uint y;
	uint z;
}

struct DrawIndexedIndirectCommand {
	uint index_count   ;
	uint instance_count;
	uint first_index   ;
	int  vertex_offset ;
	uint first_instance;
}

struct DrawIndirectCommand {
	uint vertex_count  ;
	uint instance_count;
	uint first_vertex  ;
	uint first_instance;
}

struct ImageSubresourceRange {
	ImageAspectFlags aspect_mask     ;
	uint             base_mip_level  ;
	uint             level_count     ;
	uint             base_array_layer;
	uint             layer_count     ;
}

struct ImageMemoryBarrier {
	StructureType         s_type                ;
	void*                 p_next                ;
	AccessFlags           src_access_mask       ;
	AccessFlags           dst_access_mask       ;
	ImageLayout           old_layout            ;
	ImageLayout           new_layout            ;
	uint                  src_queue_family_index;
	uint                  dst_queue_family_index;
	Image                 image                 ;
	ImageSubresourceRange subresource_range     ;
}

struct MemoryBarrier {
	StructureType s_type         ;
	void*         p_next         ;
	AccessFlags   src_access_mask;
	AccessFlags   dst_access_mask;
}

struct PipelineCacheHeaderVersionOne {
	uint                       header_size        ;
	PipelineCacheHeaderVersion header_version     ;
	uint                       vendor_id          ;
	uint                       device_id          ;
	char[UUID_SIZE]            pipeline_cache_uuid;
}

struct AllocationCallbacks {
	void*                              p_user_data            ;
	ProcAllocationFunction             pfn_allocation         ;
	ProcReallocationFunction           pfn_reallocation       ;
	ProcFreeFunction                   pfn_free               ;
	ProcInternalAllocationNotification pfn_internal_allocation;
	ProcInternalFreeNotification       pfn_internal_free      ;
}

struct ApplicationInfo {
	StructureType s_type             ;
	void*         p_next             ;
	ZString       p_application_name ;
	uint          application_version;
	ZString       p_engine_name      ;
	uint          engine_version     ;
	uint          api_version        ;
}

struct FormatProperties {
	FormatFeatureFlags linear_tiling_features ;
	FormatFeatureFlags optimal_tiling_features;
	FormatFeatureFlags buffer_features        ;
}

struct ImageFormatProperties {
	Extent3D         max_extent       ;
	uint             max_mip_levels   ;
	uint             max_array_layers ;
	SampleCountFlags sample_counts    ;
	DeviceSize       max_resource_size;
}

struct InstanceCreateInfo {
	StructureType       s_type                    ;
	void*               p_next                    ;
	InstanceCreateFlags flags                     ;
	ApplicationInfo*    p_application_info        ;
	uint                enabled_layer_count       ;
	ZString*            pp_enabled_layer_names    ;
	uint                enabled_extension_count   ;
	ZString*            pp_enabled_extension_names;
}

struct MemoryHeap {
	DeviceSize      size ;
	MemoryHeapFlags flags;
}

struct MemoryType {
	MemoryPropertyFlags property_flags;
	uint                heap_index    ;
}

struct PhysicalDeviceFeatures {
	uint robust_buffer_access                        ;
	uint full_draw_index_uint32                      ;
	uint image_cube_array                            ;
	uint independent_blend                           ;
	uint geometry_shader                             ;
	uint tessellation_shader                         ;
	uint sample_rate_shading                         ;
	uint dual_src_blend                              ;
	uint logic_op                                    ;
	uint multi_draw_indirect                         ;
	uint draw_indirect_first_instance                ;
	uint depth_clamp                                 ;
	uint depth_bias_clamp                            ;
	uint fill_mode_non_solid                         ;
	uint depth_bounds                                ;
	uint wide_lines                                  ;
	uint large_points                                ;
	uint alpha_to_one                                ;
	uint multi_viewport                              ;
	uint sampler_anisotropy                          ;
	uint texture_compression_etc2                    ;
	uint texture_compression_astc_ldr                ;
	uint texture_compression_bc                      ;
	uint occlusion_query_precise                     ;
	uint pipeline_statistics_query                   ;
	uint vertex_pipeline_stores_and_atomics          ;
	uint fragment_stores_and_atomics                 ;
	uint shader_tessellation_and_geometry_point_size ;
	uint shader_image_gather_extended                ;
	uint shader_storage_image_extended_formats       ;
	uint shader_storage_image_multisample            ;
	uint shader_storage_image_read_without_format    ;
	uint shader_storage_image_write_without_format   ;
	uint shader_uniform_buffer_array_dynamic_indexing;
	uint shader_sampled_image_array_dynamic_indexing ;
	uint shader_storage_buffer_array_dynamic_indexing;
	uint shader_storage_image_array_dynamic_indexing ;
	uint shader_clip_distance                        ;
	uint shader_cull_distance                        ;
	uint shader_float64                              ;
	uint shader_int64                                ;
	uint shader_int16                                ;
	uint shader_resource_residency                   ;
	uint shader_resource_min_lod                     ;
	uint sparse_binding                              ;
	uint sparse_residency_buffer                     ;
	uint sparse_residency_image2d                   ;
	uint sparse_residency_image3d                   ;
	uint sparse_residency2_samples                   ;
	uint sparse_residency4_samples                   ;
	uint sparse_residency8_samples                   ;
	uint sparse_residency16_samples                  ;
	uint sparse_residency_aliased                    ;
	uint variable_multisample_rate                   ;
	uint inherited_queries                           ;
}

struct PhysicalDeviceLimits {
	uint             max_image_dimension1d                               ;
	uint             max_image_dimension2d                               ;
	uint             max_image_dimension3d                               ;
	uint             max_image_dimension_cube                             ;
	uint             max_image_array_layers                               ;
	uint             max_texel_buffer_elements                            ;
	uint             max_uniform_buffer_range                             ;
	uint             max_storage_buffer_range                             ;
	uint             max_push_constants_size                              ;
	uint             max_memory_allocation_count                          ;
	uint             max_sampler_allocation_count                         ;
	DeviceSize       buffer_image_granularity                             ;
	DeviceSize       sparse_address_space_size                            ;
	uint             max_bound_descriptor_sets                            ;
	uint             max_per_stage_descriptor_samplers                    ;
	uint             max_per_stage_descriptor_uniform_buffers             ;
	uint             max_per_stage_descriptor_storage_buffers             ;
	uint             max_per_stage_descriptor_sampled_images              ;
	uint             max_per_stage_descriptor_storage_images              ;
	uint             max_per_stage_descriptor_input_attachments           ;
	uint             max_per_stage_resources                              ;
	uint             max_descriptor_set_samplers                          ;
	uint             max_descriptor_set_uniform_buffers                   ;
	uint             max_descriptor_set_uniform_buffers_dynamic           ;
	uint             max_descriptor_set_storage_buffers                   ;
	uint             max_descriptor_set_storage_buffers_dynamic           ;
	uint             max_descriptor_set_sampled_images                    ;
	uint             max_descriptor_set_storage_images                    ;
	uint             max_descriptor_set_input_attachments                 ;
	uint             max_vertex_input_attributes                          ;
	uint             max_vertex_input_bindings                            ;
	uint             max_vertex_input_attribute_offset                    ;
	uint             max_vertex_input_binding_stride                      ;
	uint             max_vertex_output_components                         ;
	uint             max_tessellation_generation_level                    ;
	uint             max_tessellation_patch_size                          ;
	uint             max_tessellation_control_per_vertex_input_components ;
	uint             max_tessellation_control_per_vertex_output_components;
	uint             max_tessellation_control_per_patch_output_components ;
	uint             max_tessellation_control_total_output_components     ;
	uint             max_tessellation_evaluation_input_components         ;
	uint             max_tessellation_evaluation_output_components        ;
	uint             max_geometry_shader_invocations                      ;
	uint             max_geometry_input_components                        ;
	uint             max_geometry_output_components                       ;
	uint             max_geometry_output_vertices                         ;
	uint             max_geometry_total_output_components                 ;
	uint             max_fragment_input_components                        ;
	uint             max_fragment_output_attachments                      ;
	uint             max_fragment_dual_src_attachments                    ;
	uint             max_fragment_combined_output_resources               ;
	uint             max_compute_shared_memory_size                       ;
	uint[3]          max_compute_work_group_count                         ;
	uint             max_compute_work_group_invocations                   ;
	uint[3]          max_compute_work_group_size                          ;
	uint             sub_pixel_precision_bits                             ;
	uint             sub_texel_precision_bits                             ;
	uint             mipmap_precision_bits                                ;
	uint             max_draw_indexed_index_value                         ;
	uint             max_draw_indirect_count                              ;
	float            max_sampler_lod_bias                                 ;
	float            max_sampler_anisotropy                               ;
	uint             max_viewports                                        ;
	uint[2]          max_viewport_dimensions                              ;
	float[2]         viewport_bounds_range                                ;
	uint             viewport_sub_pixel_bits                              ;
	usz              min_memory_map_alignment                             ;
	DeviceSize       min_texel_buffer_offset_alignment                    ;
	DeviceSize       min_uniform_buffer_offset_alignment                  ;
	DeviceSize       min_storage_buffer_offset_alignment                  ;
	int              min_texel_offset                                     ;
	uint             max_texel_offset                                     ;
	int              min_texel_gather_offset                              ;
	uint             max_texel_gather_offset                              ;
	float            min_interpolation_offset                             ;
	float            max_interpolation_offset                             ;
	uint             sub_pixel_interpolation_offset_bits                  ;
	uint             max_framebuffer_width                                ;
	uint             max_framebuffer_height                               ;
	uint             max_framebuffer_layers                               ;
	SampleCountFlags framebuffer_color_sample_counts                      ;
	SampleCountFlags framebuffer_depth_sample_counts                      ;
	SampleCountFlags framebuffer_stencil_sample_counts                    ;
	SampleCountFlags framebuffer_no_attachments_sample_counts             ;
	uint             max_color_attachments                                ;
	SampleCountFlags sampled_image_color_sample_counts                    ;
	SampleCountFlags sampled_image_integer_sample_counts                  ;
	SampleCountFlags sampled_image_depth_sample_counts                    ;
	SampleCountFlags sampled_image_stencil_sample_counts                  ;
	SampleCountFlags storage_image_sample_counts                          ;
	uint             max_sample_mask_words                                ;
	uint             timestamp_compute_and_graphics                       ;
	float            timestamp_period                                     ;
	uint             max_clip_distances                                   ;
	uint             max_cull_distances                                   ;
	uint             max_combined_clip_and_cull_distances                 ;
	uint             discrete_queue_priorities                            ;
	float[2]         point_size_range                                     ;
	float[2]         line_width_range                                     ;
	float            point_size_granularity                               ;
	float            line_width_granularity                               ;
	uint             strict_lines                                         ;
	uint             standard_sample_locations                            ;
	DeviceSize       optimal_buffer_copy_offset_alignment                 ;
	DeviceSize       optimal_buffer_copy_row_pitch_alignment              ;
	DeviceSize       non_coherent_atom_size                               ;
}

struct PhysicalDeviceMemoryProperties {
	uint                         memory_type_count;
	MemoryType[MAX_MEMORY_TYPES] memory_types     ;
	uint                         memory_heap_count;
	MemoryHeap[MAX_MEMORY_HEAPS] memory_heaps     ;
}

struct PhysicalDeviceSparseProperties {
	uint residency_standard2d_block_shape            ;
	uint residency_standard2d_multisample_block_shape;
	uint residency_standard3d_block_shape            ;
	uint residency_aligned_mip_size                   ;
	uint residency_non_resident_strict                ;
}

struct PhysicalDeviceProperties {
	uint                                 api_version        ;
	uint                                 driver_version     ;
	uint                                 vendor_id          ;
	uint                                 device_id          ;
	PhysicalDeviceType                   device_type        ;
	ichar[MAX_PHYSICAL_DEVICE_NAME_SIZE] device_name        ;
	char[UUID_SIZE]                      pipeline_cache_uuid;
	PhysicalDeviceLimits                 limits             ;
	PhysicalDeviceSparseProperties       sparse_properties  ;
}

struct QueueFamilyProperties {
	QueueFlags queue_flags                   ;
	uint       queue_count                   ;
	uint       timestamp_valid_bits          ;
	Extent3D   min_image_transfer_granularity;
}

struct DeviceQueueCreateInfo {
	StructureType          s_type            ;
	void*                  p_next            ;
	DeviceQueueCreateFlags flags             ;
	uint                   queue_family_index;
	uint                   queue_count       ;
	float*                 p_queue_priorities;
}

struct DeviceCreateInfo {
	StructureType           s_type                    ;
	void*                   p_next                    ;
	DeviceCreateFlags       flags                     ;
	uint                    queue_create_info_count   ;
	DeviceQueueCreateInfo*  p_queue_create_infos      ;
	uint                    enabled_layer_count       ;
	ZString*                pp_enabled_layer_names    ;
	uint                    enabled_extension_count   ;
	ZString*                pp_enabled_extension_names;
	PhysicalDeviceFeatures* p_enabled_features        ;
}

struct ExtensionProperties {
	ichar[MAX_EXTENSION_NAME_SIZE] extension_name;
	uint                           spec_version  ;
}

struct LayerProperties {
	ichar[MAX_EXTENSION_NAME_SIZE] layer_name            ;
	uint                           spec_version          ;
	uint                           implementation_version;
	ichar[MAX_DESCRIPTION_SIZE]    description           ;
}

struct SubmitInfo {
	StructureType       s_type                ;
	void*               p_next                ;
	uint                wait_semaphore_count  ;
	Semaphore*          p_wait_semaphores     ;
	PipelineStageFlags* p_wait_dst_stage_mask ;
	uint                command_buffer_count  ;
	CommandBuffer*      p_command_buffers     ;
	uint                signal_semaphore_count;
	Semaphore*          p_signal_semaphores   ;
}

struct MappedMemoryRange {
	StructureType s_type;
	void*         p_next;
	DeviceMemory  memory;
	DeviceSize    offset;
	DeviceSize    size  ;
}

struct MemoryAllocateInfo {
	StructureType s_type           ;
	void*         p_next           ;
	DeviceSize    allocation_size  ;
	uint          memory_type_index;
}

struct MemoryRequirements {
	DeviceSize size            ;
	DeviceSize alignment       ;
	uint       memory_type_bits;
}

struct SparseMemoryBind {
	DeviceSize            resource_offset;
	DeviceSize            size           ;
	DeviceMemory          memory         ;
	DeviceSize            memory_offset  ;
	SparseMemoryBindFlags flags          ;
}

struct SparseBufferMemoryBindInfo {
	Buffer            buffer    ;
	uint              bind_count;
	SparseMemoryBind* p_binds   ;
}

struct SparseImageOpaqueMemoryBindInfo {
	Image             image     ;
	uint              bind_count;
	SparseMemoryBind* p_binds   ;
}

struct ImageSubresource {
	ImageAspectFlags aspect_mask;
	uint             mip_level  ;
	uint             array_layer;
}

struct SparseImageMemoryBind {
	ImageSubresource      subresource  ;
	Offset3D              offset       ;
	Extent3D              extent       ;
	DeviceMemory          memory       ;
	DeviceSize            memory_offset;
	SparseMemoryBindFlags flags        ;
}

struct SparseImageMemoryBindInfo {
	Image                  image     ;
	uint                   bind_count;
	SparseImageMemoryBind* p_binds   ;
}

struct BindSparseInfo {
	StructureType                    s_type                 ;
	void*                            p_next                 ;
	uint                             wait_semaphore_count   ;
	Semaphore*                       p_wait_semaphores      ;
	uint                             buffer_bind_count      ;
	SparseBufferMemoryBindInfo*      p_buffer_binds         ;
	uint                             image_opaque_bind_count;
	SparseImageOpaqueMemoryBindInfo* p_image_opaque_binds   ;
	uint                             image_bind_count       ;
	SparseImageMemoryBindInfo*       p_image_binds          ;
	uint                             signal_semaphore_count ;
	Semaphore*                       p_signal_semaphores    ;
}

struct SparseImageFormatProperties {
	ImageAspectFlags       aspect_mask      ;
	Extent3D               image_granularity;
	SparseImageFormatFlags flags            ;
}

struct SparseImageMemoryRequirements {
	SparseImageFormatProperties format_properties       ;
	uint                        image_mip_tail_first_lod;
	DeviceSize                  image_mip_tail_size     ;
	DeviceSize                  image_mip_tail_offset   ;
	DeviceSize                  image_mip_tail_stride   ;
}

struct FenceCreateInfo {
	StructureType    s_type;
	void*            p_next;
	FenceCreateFlags flags ;
}

struct SemaphoreCreateInfo {
	StructureType        s_type;
	void*                p_next;
	SemaphoreCreateFlags flags ;
}

struct EventCreateInfo {
	StructureType    s_type;
	void*            p_next;
	EventCreateFlags flags ;
}

struct QueryPoolCreateInfo {
	StructureType               s_type             ;
	void*                       p_next             ;
	QueryPoolCreateFlags        flags              ;
	QueryType                   query_type         ;
	uint                        query_count        ;
	QueryPipelineStatisticFlags pipeline_statistics;
}

struct BufferCreateInfo {
	StructureType     s_type                  ;
	void*             p_next                  ;
	BufferCreateFlags flags                   ;
	DeviceSize        size                    ;
	BufferUsageFlags  usage                   ;
	SharingMode       sharing_mode            ;
	uint              queue_family_index_count;
	uint*             p_queue_family_indices  ;
}

struct BufferViewCreateInfo {
	StructureType         s_type;
	void*                 p_next;
	BufferViewCreateFlags flags ;
	Buffer                buffer;
	Format                format;
	DeviceSize            offset;
	DeviceSize            range ;
}

struct ImageCreateInfo {
	StructureType    s_type                  ;
	void*            p_next                  ;
	ImageCreateFlags flags                   ;
	ImageType        image_type              ;
	Format           format                  ;
	Extent3D         extent                  ;
	uint             mip_levels              ;
	uint             array_layers            ;
	SampleCountFlags samples                 ;
	ImageTiling      tiling                  ;
	ImageUsageFlags  usage                   ;
	SharingMode      sharing_mode            ;
	uint             queue_family_index_count;
	uint*            p_queue_family_indices  ;
	ImageLayout      initial_layout          ;
}

struct SubresourceLayout {
	DeviceSize offset     ;
	DeviceSize size       ;
	DeviceSize row_pitch  ;
	DeviceSize array_pitch;
	DeviceSize depth_pitch;
}

struct ComponentMapping {
	ComponentSwizzle r;
	ComponentSwizzle g;
	ComponentSwizzle b;
	ComponentSwizzle a;
}

struct ImageViewCreateInfo {
	StructureType         s_type           ;
	void*                 p_next           ;
	ImageViewCreateFlags  flags            ;
	Image                 image            ;
	ImageViewType         view_type        ;
	Format                format           ;
	ComponentMapping      components       ;
	ImageSubresourceRange subresource_range;
}

struct ShaderModuleCreateInfo {
	StructureType           s_type   ;
	void*                   p_next   ;
	ShaderModuleCreateFlags flags    ;
	usz                     code_size;
	uint*                   p_code   ;
}

struct PipelineCacheCreateInfo {
	StructureType            s_type           ;
	void*                    p_next           ;
	PipelineCacheCreateFlags flags            ;
	usz                      initial_data_size;
	void*                    p_initial_data   ;
}

struct SpecializationMapEntry {
	uint constant_id;
	uint offset     ;
	usz  size       ;
}

struct SpecializationInfo {
	uint                    map_entry_count;
	SpecializationMapEntry* p_map_entries  ;
	usz                     data_size      ;
	void*                   p_data         ;
}

struct PipelineShaderStageCreateInfo {
	StructureType                  s_type               ;
	void*                          p_next               ;
	PipelineShaderStageCreateFlags flags                ;
	ShaderStageFlags               stage                ;
	ShaderModule                   module_              ;
	ZString                        p_name               ;
	SpecializationInfo*            p_specialization_info;
}

struct ComputePipelineCreateInfo {
	StructureType                 s_type              ;
	void*                         p_next              ;
	PipelineCreateFlags           flags               ;
	PipelineShaderStageCreateInfo stage               ;
	PipelineLayout                layout              ;
	Pipeline                      base_pipeline_handle;
	int                           base_pipeline_index ;
}

struct VertexInputBindingDescription {
	uint            binding   ;
	uint            stride    ;
	VertexInputRate input_rate;
}

struct VertexInputAttributeDescription {
	uint   location;
	uint   binding ;
	Format format  ;
	uint   offset  ;
}

struct PipelineVertexInputStateCreateInfo {
	StructureType                       s_type                            ;
	void*                               p_next                            ;
	PipelineVertexInputStateCreateFlags flags                             ;
	uint                                vertex_binding_description_count  ;
	VertexInputBindingDescription*      p_vertex_binding_descriptions     ;
	uint                                vertex_attribute_description_count;
	VertexInputAttributeDescription*    p_vertex_attribute_descriptions   ;
}

struct PipelineInputAssemblyStateCreateInfo {
	StructureType                         s_type                  ;
	void*                                 p_next                  ;
	PipelineInputAssemblyStateCreateFlags flags                   ;
	PrimitiveTopology                     topology                ;
	uint                                  primitive_restart_enable;
}

struct PipelineTessellationStateCreateInfo {
	StructureType                        s_type              ;
	void*                                p_next              ;
	PipelineTessellationStateCreateFlags flags               ;
	uint                                 patch_control_points;
}

struct Viewport {
	float x        ;
	float y        ;
	float width    ;
	float height   ;
	float min_depth;
	float max_depth;
}

struct PipelineViewportStateCreateInfo {
	StructureType                    s_type        ;
	void*                            p_next        ;
	PipelineViewportStateCreateFlags flags         ;
	uint                             viewport_count;
	Viewport*                        p_viewports   ;
	uint                             scissor_count ;
	Rect2D*                          p_scissors    ;
}

struct PipelineRasterizationStateCreateInfo {
	StructureType                         s_type                    ;
	void*                                 p_next                    ;
	PipelineRasterizationStateCreateFlags flags                     ;
	uint                                  depth_clamp_enable        ;
	uint                                  rasterizer_discard_enable ;
	PolygonMode                           polygon_mode              ;
	CullModeFlags                         cull_mode                 ;
	FrontFace                             front_face                ;
	uint                                  depth_bias_enable         ;
	float                                 depth_bias_constant_factor;
	float                                 depth_bias_clamp          ;
	float                                 depth_bias_slope_factor   ;
	float                                 line_width                ;
}

struct PipelineMultisampleStateCreateInfo {
	StructureType                       s_type                  ;
	void*                               p_next                  ;
	PipelineMultisampleStateCreateFlags flags                   ;
	SampleCountFlags                    rasterization_samples   ;
	uint                                sample_shading_enable   ;
	float                               min_sample_shading      ;
	SampleMask*                         p_sample_mask           ;
	uint                                alpha_to_coverage_enable;
	uint                                alpha_to_one_enable     ;
}

struct StencilOpState {
	StencilOp fail_op      ;
	StencilOp pass_op      ;
	StencilOp depth_fail_op;
	CompareOp compare_op   ;
	uint      compare_mask ;
	uint      write_mask   ;
	uint      reference    ;
}

struct PipelineDepthStencilStateCreateInfo {
	StructureType                        s_type                  ;
	void*                                p_next                  ;
	PipelineDepthStencilStateCreateFlags flags                   ;
	uint                                 depth_test_enable       ;
	uint                                 depth_write_enable      ;
	CompareOp                            depth_compare_op        ;
	uint                                 depth_bounds_test_enable;
	uint                                 stencil_test_enable     ;
	StencilOpState                       front                   ;
	StencilOpState                       back                    ;
	float                                min_depth_bounds        ;
	float                                max_depth_bounds        ;
}

struct PipelineColorBlendAttachmentState {
	uint                blend_enable          ;
	BlendFactor         src_color_blend_factor;
	BlendFactor         dst_color_blend_factor;
	BlendOp             color_blend_op        ;
	BlendFactor         src_alpha_blend_factor;
	BlendFactor         dst_alpha_blend_factor;
	BlendOp             alpha_blend_op        ;
	ColorComponentFlags color_write_mask      ;
}

struct PipelineColorBlendStateCreateInfo {
	StructureType                      s_type          ;
	void*                              p_next          ;
	PipelineColorBlendStateCreateFlags flags           ;
	uint                               logic_op_enable ;
	LogicOp                            logic_op        ;
	uint                               attachment_count;
	PipelineColorBlendAttachmentState* p_attachments   ;
	float[4]                           blend_constants ;
}

struct PipelineDynamicStateCreateInfo {
	StructureType                   s_type             ;
	void*                           p_next             ;
	PipelineDynamicStateCreateFlags flags              ;
	uint                            dynamic_state_count;
	DynamicState*                   p_dynamic_states   ;
}

struct GraphicsPipelineCreateInfo {
	StructureType                         s_type                ;
	void*                                 p_next                ;
	PipelineCreateFlags                   flags                 ;
	uint                                  stage_count           ;
	PipelineShaderStageCreateInfo*        p_stages              ;
	PipelineVertexInputStateCreateInfo*   p_vertex_input_state  ;
	PipelineInputAssemblyStateCreateInfo* p_input_assembly_state;
	PipelineTessellationStateCreateInfo*  p_tessellation_state  ;
	PipelineViewportStateCreateInfo*      p_viewport_state      ;
	PipelineRasterizationStateCreateInfo* p_rasterization_state ;
	PipelineMultisampleStateCreateInfo*   p_multisample_state   ;
	PipelineDepthStencilStateCreateInfo*  p_depth_stencil_state ;
	PipelineColorBlendStateCreateInfo*    p_color_blend_state   ;
	PipelineDynamicStateCreateInfo*       p_dynamic_state       ;
	PipelineLayout                        layout                ;
	RenderPass                            render_pass           ;
	uint                                  subpass               ;
	Pipeline                              base_pipeline_handle  ;
	int                                   base_pipeline_index   ;
}

struct PushConstantRange {
	ShaderStageFlags stage_flags;
	uint             offset     ;
	uint             size       ;
}

struct PipelineLayoutCreateInfo {
	StructureType             s_type                   ;
	void*                     p_next                   ;
	PipelineLayoutCreateFlags flags                    ;
	uint                      set_layout_count         ;
	DescriptorSetLayout*      p_set_layouts            ;
	uint                      push_constant_range_count;
	PushConstantRange*        p_push_constant_ranges   ;
}

struct SamplerCreateInfo {
	StructureType      s_type                  ;
	void*              p_next                  ;
	SamplerCreateFlags flags                   ;
	Filter             mag_filter              ;
	Filter             min_filter              ;
	SamplerMipmapMode  mipmap_mode             ;
	SamplerAddressMode address_mode_u          ;
	SamplerAddressMode address_mode_v          ;
	SamplerAddressMode address_mode_w          ;
	float              mip_lod_bias            ;
	uint               anisotropy_enable       ;
	float              max_anisotropy          ;
	uint               compare_enable          ;
	CompareOp          compare_op              ;
	float              min_lod                 ;
	float              max_lod                 ;
	BorderColor        border_color            ;
	uint               unnormalized_coordinates;
}

struct CopyDescriptorSet {
	StructureType s_type           ;
	void*         p_next           ;
	DescriptorSet src_set          ;
	uint          src_binding      ;
	uint          src_array_element;
	DescriptorSet dst_set          ;
	uint          dst_binding      ;
	uint          dst_array_element;
	uint          descriptor_count ;
}

struct DescriptorBufferInfo {
	Buffer     buffer;
	DeviceSize offset;
	DeviceSize range ;
}

struct DescriptorImageInfo {
	Sampler     sampler     ;
	ImageView   image_view  ;
	ImageLayout image_layout;
}

struct DescriptorPoolSize {
	DescriptorType type            ;
	uint           descriptor_count;
}

struct DescriptorPoolCreateInfo {
	StructureType             s_type         ;
	void*                     p_next         ;
	DescriptorPoolCreateFlags flags          ;
	uint                      max_sets       ;
	uint                      pool_size_count;
	DescriptorPoolSize*       p_pool_sizes   ;
}

struct DescriptorSetAllocateInfo {
	StructureType        s_type              ;
	void*                p_next              ;
	DescriptorPool       descriptor_pool     ;
	uint                 descriptor_set_count;
	DescriptorSetLayout* p_set_layouts       ;
}

struct DescriptorSetLayoutBinding {
	uint             binding             ;
	DescriptorType   descriptor_type     ;
	uint             descriptor_count    ;
	ShaderStageFlags stage_flags         ;
	Sampler*         p_immutable_samplers;
}

struct DescriptorSetLayoutCreateInfo {
	StructureType                  s_type       ;
	void*                          p_next       ;
	DescriptorSetLayoutCreateFlags flags        ;
	uint                           binding_count;
	DescriptorSetLayoutBinding*    p_bindings   ;
}

struct WriteDescriptorSet {
	StructureType         s_type             ;
	void*                 p_next             ;
	DescriptorSet         dst_set            ;
	uint                  dst_binding        ;
	uint                  dst_array_element  ;
	uint                  descriptor_count   ;
	DescriptorType        descriptor_type    ;
	DescriptorImageInfo*  p_image_info       ;
	DescriptorBufferInfo* p_buffer_info      ;
	BufferView*           p_texel_buffer_view;
}

struct AttachmentDescription {
	AttachmentDescriptionFlags flags           ;
	Format                     format          ;
	SampleCountFlags           samples         ;
	AttachmentLoadOp           load_op         ;
	AttachmentStoreOp          store_op        ;
	AttachmentLoadOp           stencil_load_op ;
	AttachmentStoreOp          stencil_store_op;
	ImageLayout                initial_layout  ;
	ImageLayout                final_layout    ;
}

struct AttachmentReference {
	uint        attachment;
	ImageLayout layout    ;
}

struct FramebufferCreateInfo {
	StructureType          s_type          ;
	void*                  p_next          ;
	FramebufferCreateFlags flags           ;
	RenderPass             render_pass     ;
	uint                   attachment_count;
	ImageView*             p_attachments   ;
	uint                   width           ;
	uint                   height          ;
	uint                   layers          ;
}

struct SubpassDescription {
	SubpassDescriptionFlags flags                     ;
	PipelineBindPoint       pipeline_bind_point       ;
	uint                    input_attachment_count    ;
	AttachmentReference*    p_input_attachments       ;
	uint                    color_attachment_count    ;
	AttachmentReference*    p_color_attachments       ;
	AttachmentReference*    p_resolve_attachments     ;
	AttachmentReference*    p_depth_stencil_attachment;
	uint                    preserve_attachment_count ;
	uint*                   p_preserve_attachments    ;
}

struct SubpassDependency {
	uint               src_subpass     ;
	uint               dst_subpass     ;
	PipelineStageFlags src_stage_mask  ;
	PipelineStageFlags dst_stage_mask  ;
	AccessFlags        src_access_mask ;
	AccessFlags        dst_access_mask ;
	DependencyFlags    dependency_flags;
}

struct RenderPassCreateInfo {
	StructureType          s_type          ;
	void*                  p_next          ;
	RenderPassCreateFlags  flags           ;
	uint                   attachment_count;
	AttachmentDescription* p_attachments   ;
	uint                   subpass_count   ;
	SubpassDescription*    p_subpasses     ;
	uint                   dependency_count;
	SubpassDependency*     p_dependencies  ;
}

struct CommandPoolCreateInfo {
	StructureType          s_type            ;
	void*                  p_next            ;
	CommandPoolCreateFlags flags             ;
	uint                   queue_family_index;
}

struct CommandBufferAllocateInfo {
	StructureType      s_type              ;
	void*              p_next              ;
	CommandPool        command_pool        ;
	CommandBufferLevel level               ;
	uint               command_buffer_count;
}

struct CommandBufferInheritanceInfo {
	StructureType               s_type                ;
	void*                       p_next                ;
	RenderPass                  render_pass           ;
	uint                        subpass               ;
	Framebuffer                 framebuffer           ;
	uint                        occlusion_query_enable;
	QueryControlFlags           query_flags           ;
	QueryPipelineStatisticFlags pipeline_statistics   ;
}

struct CommandBufferBeginInfo {
	StructureType                 s_type            ;
	void*                         p_next            ;
	CommandBufferUsageFlags       flags             ;
	CommandBufferInheritanceInfo* p_inheritance_info;
}

struct BufferCopy {
	DeviceSize src_offset;
	DeviceSize dst_offset;
	DeviceSize size      ;
}

struct ImageSubresourceLayers {
	ImageAspectFlags aspect_mask     ;
	uint             mip_level       ;
	uint             base_array_layer;
	uint             layer_count     ;
}

struct BufferImageCopy {
	DeviceSize             buffer_offset      ;
	uint                   buffer_row_length  ;
	uint                   buffer_image_height;
	ImageSubresourceLayers image_subresource  ;
	Offset3D               image_offset       ;
	Extent3D               image_extent       ;
}

union ClearColorValue {
	float[4] float32;
	int[4]   int32  ;
	uint[4]  uint32 ;
}

struct ClearDepthStencilValue {
	float depth  ;
	uint  stencil;
}

union ClearValue {
	ClearColorValue        color        ;
	ClearDepthStencilValue depth_stencil;
}

struct ClearAttachment {
	ImageAspectFlags aspect_mask     ;
	uint             color_attachment;
	ClearValue       clear_value     ;
}

struct ClearRect {
	Rect2D rect            ;
	uint   base_array_layer;
	uint   layer_count     ;
}

struct ImageBlit {
	ImageSubresourceLayers src_subresource;
	Offset3D[2]            src_offsets    ;
	ImageSubresourceLayers dst_subresource;
	Offset3D[2]            dst_offsets    ;
}

struct ImageCopy {
	ImageSubresourceLayers src_subresource;
	Offset3D               src_offset     ;
	ImageSubresourceLayers dst_subresource;
	Offset3D               dst_offset     ;
	Extent3D               extent         ;
}

struct ImageResolve {
	ImageSubresourceLayers src_subresource;
	Offset3D               src_offset     ;
	ImageSubresourceLayers dst_subresource;
	Offset3D               dst_offset     ;
	Extent3D               extent         ;
}

struct RenderPassBeginInfo {
	StructureType s_type           ;
	void*         p_next           ;
	RenderPass    render_pass      ;
	Framebuffer   framebuffer      ;
	Rect2D        render_area      ;
	uint          clear_value_count;
	ClearValue*   p_clear_values   ;
}

struct PhysicalDeviceSubgroupProperties {
	StructureType        s_type                       ;
	void*                p_next                       ;
	uint                 subgroup_size                ;
	ShaderStageFlags     supported_stages             ;
	SubgroupFeatureFlags supported_operations         ;
	uint                 quad_operations_in_all_stages;
}

struct BindBufferMemoryInfo {
	StructureType s_type       ;
	void*         p_next       ;
	Buffer        buffer       ;
	DeviceMemory  memory       ;
	DeviceSize    memory_offset;
}

struct BindImageMemoryInfo {
	StructureType s_type       ;
	void*         p_next       ;
	Image         image        ;
	DeviceMemory  memory       ;
	DeviceSize    memory_offset;
}

struct PhysicalDevice16BitStorageFeatures {
	StructureType s_type                                 ;
	void*         p_next                                 ;
	uint          storage_buffer16_bit_access            ;
	uint          uniform_and_storage_buffer16_bit_access;
	uint          storage_push_constant16                ;
	uint          storage_input_output16                 ;
}

struct MemoryDedicatedRequirements {
	StructureType s_type                       ;
	void*         p_next                       ;
	uint          prefers_dedicated_allocation ;
	uint          requires_dedicated_allocation;
}

struct MemoryDedicatedAllocateInfo {
	StructureType s_type;
	void*         p_next;
	Image         image ;
	Buffer        buffer;
}

struct MemoryAllocateFlagsInfo {
	StructureType       s_type     ;
	void*               p_next     ;
	MemoryAllocateFlags flags      ;
	uint                device_mask;
}

struct DeviceGroupRenderPassBeginInfo {
	StructureType s_type                  ;
	void*         p_next                  ;
	uint          device_mask             ;
	uint          device_render_area_count;
	Rect2D*       p_device_render_areas   ;
}

struct DeviceGroupCommandBufferBeginInfo {
	StructureType s_type     ;
	void*         p_next     ;
	uint          device_mask;
}

struct DeviceGroupSubmitInfo {
	StructureType s_type                           ;
	void*         p_next                           ;
	uint          wait_semaphore_count             ;
	uint*         p_wait_semaphore_device_indices  ;
	uint          command_buffer_count             ;
	uint*         p_command_buffer_device_masks    ;
	uint          signal_semaphore_count           ;
	uint*         p_signal_semaphore_device_indices;
}

struct DeviceGroupBindSparseInfo {
	StructureType s_type               ;
	void*         p_next               ;
	uint          resource_device_index;
	uint          memory_device_index  ;
}

struct BindBufferMemoryDeviceGroupInfo {
	StructureType s_type            ;
	void*         p_next            ;
	uint          device_index_count;
	uint*         p_device_indices  ;
}

struct BindImageMemoryDeviceGroupInfo {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          device_index_count              ;
	uint*         p_device_indices                ;
	uint          split_instance_bind_region_count;
	Rect2D*       p_split_instance_bind_regions   ;
}

struct PhysicalDeviceGroupProperties {
	StructureType                         s_type               ;
	void*                                 p_next               ;
	uint                                  physical_device_count;
	PhysicalDevice[MAX_DEVICE_GROUP_SIZE] physical_devices     ;
	uint                                  subset_allocation    ;
}

struct DeviceGroupDeviceCreateInfo {
	StructureType   s_type               ;
	void*           p_next               ;
	uint            physical_device_count;
	PhysicalDevice* p_physical_devices   ;
}

struct BufferMemoryRequirementsInfo2 {
	StructureType s_type;
	void*         p_next;
	Buffer        buffer;
}

struct ImageMemoryRequirementsInfo2 {
	StructureType s_type;
	void*         p_next;
	Image         image ;
}

struct ImageSparseMemoryRequirementsInfo2 {
	StructureType s_type;
	void*         p_next;
	Image         image ;
}

struct MemoryRequirements2 {
	StructureType      s_type             ;
	void*              p_next             ;
	MemoryRequirements memory_requirements;
}

struct SparseImageMemoryRequirements2 {
	StructureType                 s_type             ;
	void*                         p_next             ;
	SparseImageMemoryRequirements memory_requirements;
}

struct PhysicalDeviceFeatures2 {
	StructureType          s_type  ;
	void*                  p_next  ;
	PhysicalDeviceFeatures features;
}

struct PhysicalDeviceProperties2 {
	StructureType            s_type    ;
	void*                    p_next    ;
	PhysicalDeviceProperties properties;
}

struct FormatProperties2 {
	StructureType    s_type           ;
	void*            p_next           ;
	FormatProperties format_properties;
}

struct ImageFormatProperties2 {
	StructureType         s_type                 ;
	void*                 p_next                 ;
	ImageFormatProperties image_format_properties;
}

struct PhysicalDeviceImageFormatInfo2 {
	StructureType    s_type;
	void*            p_next;
	Format           format;
	ImageType        type  ;
	ImageTiling      tiling;
	ImageUsageFlags  usage ;
	ImageCreateFlags flags ;
}

struct QueueFamilyProperties2 {
	StructureType         s_type                 ;
	void*                 p_next                 ;
	QueueFamilyProperties queue_family_properties;
}

struct PhysicalDeviceMemoryProperties2 {
	StructureType                  s_type           ;
	void*                          p_next           ;
	PhysicalDeviceMemoryProperties memory_properties;
}

struct SparseImageFormatProperties2 {
	StructureType               s_type    ;
	void*                       p_next    ;
	SparseImageFormatProperties properties;
}

struct PhysicalDeviceSparseImageFormatInfo2 {
	StructureType    s_type ;
	void*            p_next ;
	Format           format ;
	ImageType        type   ;
	SampleCountFlags samples;
	ImageUsageFlags  usage  ;
	ImageTiling      tiling ;
}

struct PhysicalDevicePointClippingProperties {
	StructureType         s_type                 ;
	void*                 p_next                 ;
	PointClippingBehavior point_clipping_behavior;
}

struct InputAttachmentAspectReference {
	uint             subpass               ;
	uint             input_attachment_index;
	ImageAspectFlags aspect_mask           ;
}

struct RenderPassInputAttachmentAspectCreateInfo {
	StructureType                   s_type                ;
	void*                           p_next                ;
	uint                            aspect_reference_count;
	InputAttachmentAspectReference* p_aspect_references   ;
}

struct ImageViewUsageCreateInfo {
	StructureType   s_type;
	void*           p_next;
	ImageUsageFlags usage ;
}

struct PipelineTessellationDomainOriginStateCreateInfo {
	StructureType            s_type       ;
	void*                    p_next       ;
	TessellationDomainOrigin domain_origin;
}

struct RenderPassMultiviewCreateInfo {
	StructureType s_type                ;
	void*         p_next                ;
	uint          subpass_count         ;
	uint*         p_view_masks          ;
	uint          dependency_count      ;
	int*          p_view_offsets        ;
	uint          correlation_mask_count;
	uint*         p_correlation_masks   ;
}

struct PhysicalDeviceMultiviewFeatures {
	StructureType s_type                       ;
	void*         p_next                       ;
	uint          multiview                    ;
	uint          multiview_geometry_shader    ;
	uint          multiview_tessellation_shader;
}

struct PhysicalDeviceMultiviewProperties {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          max_multiview_view_count    ;
	uint          max_multiview_instance_index;
}

struct PhysicalDeviceVariablePointersFeatures {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          variable_pointers_storage_buffer;
	uint          variable_pointers               ;
}

struct PhysicalDeviceProtectedMemoryFeatures {
	StructureType s_type          ;
	void*         p_next          ;
	uint          protected_memory;
}

struct PhysicalDeviceProtectedMemoryProperties {
	StructureType s_type            ;
	void*         p_next            ;
	uint          protected_no_fault;
}

struct DeviceQueueInfo2 {
	StructureType          s_type            ;
	void*                  p_next            ;
	DeviceQueueCreateFlags flags             ;
	uint                   queue_family_index;
	uint                   queue_index       ;
}

struct ProtectedSubmitInfo {
	StructureType s_type          ;
	void*         p_next          ;
	uint          protected_submit;
}

struct SamplerYcbcrConversionCreateInfo {
	StructureType               s_type                       ;
	void*                       p_next                       ;
	Format                      format                       ;
	SamplerYcbcrModelConversion ycbcr_model                  ;
	SamplerYcbcrRange           ycbcr_range                  ;
	ComponentMapping            components                   ;
	ChromaLocation              x_chroma_offset              ;
	ChromaLocation              y_chroma_offset              ;
	Filter                      chroma_filter                ;
	uint                        force_explicit_reconstruction;
}

struct SamplerYcbcrConversionInfo {
	StructureType          s_type    ;
	void*                  p_next    ;
	SamplerYcbcrConversion conversion;
}

struct BindImagePlaneMemoryInfo {
	StructureType    s_type      ;
	void*            p_next      ;
	ImageAspectFlags plane_aspect;
}

struct ImagePlaneMemoryRequirementsInfo {
	StructureType    s_type      ;
	void*            p_next      ;
	ImageAspectFlags plane_aspect;
}

struct PhysicalDeviceSamplerYcbcrConversionFeatures {
	StructureType s_type                  ;
	void*         p_next                  ;
	uint          sampler_ycbcr_conversion;
}

struct SamplerYcbcrConversionImageFormatProperties {
	StructureType s_type                                 ;
	void*         p_next                                 ;
	uint          combined_image_sampler_descriptor_count;
}

struct DescriptorUpdateTemplateEntry {
	uint           dst_binding      ;
	uint           dst_array_element;
	uint           descriptor_count ;
	DescriptorType descriptor_type  ;
	usz            offset           ;
	usz            stride           ;
}

struct DescriptorUpdateTemplateCreateInfo {
	StructureType                       s_type                       ;
	void*                               p_next                       ;
	DescriptorUpdateTemplateCreateFlags flags                        ;
	uint                                descriptor_update_entry_count;
	DescriptorUpdateTemplateEntry*      p_descriptor_update_entries  ;
	DescriptorUpdateTemplateType        template_type                ;
	DescriptorSetLayout                 descriptor_set_layout        ;
	PipelineBindPoint                   pipeline_bind_point          ;
	PipelineLayout                      pipeline_layout              ;
	uint                                set                          ;
}

struct ExternalMemoryProperties {
	ExternalMemoryFeatureFlags    external_memory_features         ;
	ExternalMemoryHandleTypeFlags export_from_imported_handle_types;
	ExternalMemoryHandleTypeFlags compatible_handle_types          ;
}

struct PhysicalDeviceExternalImageFormatInfo {
	StructureType                 s_type     ;
	void*                         p_next     ;
	ExternalMemoryHandleTypeFlags handle_type;
}

struct ExternalImageFormatProperties {
	StructureType            s_type                    ;
	void*                    p_next                    ;
	ExternalMemoryProperties external_memory_properties;
}

struct PhysicalDeviceExternalBufferInfo {
	StructureType                 s_type     ;
	void*                         p_next     ;
	BufferCreateFlags             flags      ;
	BufferUsageFlags              usage      ;
	ExternalMemoryHandleTypeFlags handle_type;
}

struct ExternalBufferProperties {
	StructureType            s_type                    ;
	void*                    p_next                    ;
	ExternalMemoryProperties external_memory_properties;
}

struct PhysicalDeviceIDProperties {
	StructureType   s_type           ;
	void*           p_next           ;
	char[UUID_SIZE] device_uuid      ;
	char[UUID_SIZE] driver_uuid      ;
	char[LUID_SIZE] device_luid      ;
	uint            device_node_mask ;
	uint            device_luid_valid;
}

struct ExternalMemoryImageCreateInfo {
	StructureType                 s_type      ;
	void*                         p_next      ;
	ExternalMemoryHandleTypeFlags handle_types;
}

struct ExternalMemoryBufferCreateInfo {
	StructureType                 s_type      ;
	void*                         p_next      ;
	ExternalMemoryHandleTypeFlags handle_types;
}

struct ExportMemoryAllocateInfo {
	StructureType                 s_type      ;
	void*                         p_next      ;
	ExternalMemoryHandleTypeFlags handle_types;
}

struct PhysicalDeviceExternalFenceInfo {
	StructureType                s_type     ;
	void*                        p_next     ;
	ExternalFenceHandleTypeFlags handle_type;
}

struct ExternalFenceProperties {
	StructureType                s_type                           ;
	void*                        p_next                           ;
	ExternalFenceHandleTypeFlags export_from_imported_handle_types;
	ExternalFenceHandleTypeFlags compatible_handle_types          ;
	ExternalFenceFeatureFlags    external_fence_features          ;
}

struct ExportFenceCreateInfo {
	StructureType                s_type      ;
	void*                        p_next      ;
	ExternalFenceHandleTypeFlags handle_types;
}

struct ExportSemaphoreCreateInfo {
	StructureType                    s_type      ;
	void*                            p_next      ;
	ExternalSemaphoreHandleTypeFlags handle_types;
}

struct PhysicalDeviceExternalSemaphoreInfo {
	StructureType                    s_type     ;
	void*                            p_next     ;
	ExternalSemaphoreHandleTypeFlags handle_type;
}

struct ExternalSemaphoreProperties {
	StructureType                    s_type                           ;
	void*                            p_next                           ;
	ExternalSemaphoreHandleTypeFlags export_from_imported_handle_types;
	ExternalSemaphoreHandleTypeFlags compatible_handle_types          ;
	ExternalSemaphoreFeatureFlags    external_semaphore_features      ;
}

struct PhysicalDeviceMaintenance3Properties {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          max_per_set_descriptors   ;
	DeviceSize    max_memory_allocation_size;
}

struct DescriptorSetLayoutSupport {
	StructureType s_type   ;
	void*         p_next   ;
	uint          supported;
}

struct PhysicalDeviceShaderDrawParametersFeatures {
	StructureType s_type                ;
	void*         p_next                ;
	uint          shader_draw_parameters;
}

struct PhysicalDeviceVulkan11Features {
	StructureType s_type                                 ;
	void*         p_next                                 ;
	uint          storage_buffer16_bit_access            ;
	uint          uniform_and_storage_buffer16_bit_access;
	uint          storage_push_constant16                ;
	uint          storage_input_output16                 ;
	uint          multiview                              ;
	uint          multiview_geometry_shader              ;
	uint          multiview_tessellation_shader          ;
	uint          variable_pointers_storage_buffer       ;
	uint          variable_pointers                      ;
	uint          protected_memory                       ;
	uint          sampler_ycbcr_conversion               ;
	uint          shader_draw_parameters                 ;
}

struct PhysicalDeviceVulkan11Properties {
	StructureType         s_type                                ;
	void*                 p_next                                ;
	char[UUID_SIZE]       device_uuid                           ;
	char[UUID_SIZE]       driver_uuid                           ;
	char[LUID_SIZE]       device_luid                           ;
	uint                  device_node_mask                      ;
	uint                  device_luid_valid                     ;
	uint                  subgroup_size                         ;
	ShaderStageFlags      subgroup_supported_stages             ;
	SubgroupFeatureFlags  subgroup_supported_operations         ;
	uint                  subgroup_quad_operations_in_all_stages;
	PointClippingBehavior point_clipping_behavior               ;
	uint                  max_multiview_view_count              ;
	uint                  max_multiview_instance_index          ;
	uint                  protected_no_fault                    ;
	uint                  max_per_set_descriptors               ;
	DeviceSize            max_memory_allocation_size            ;
}

struct PhysicalDeviceVulkan12Features {
	StructureType s_type                                                   ;
	void*         p_next                                                   ;
	uint          sampler_mirror_clamp_to_edge                             ;
	uint          draw_indirect_count                                      ;
	uint          storage_buffer8_bit_access                               ;
	uint          uniform_and_storage_buffer8_bit_access                   ;
	uint          storage_push_constant8                                   ;
	uint          shader_buffer_int64_atomics                              ;
	uint          shader_shared_int64_atomics                              ;
	uint          shader_float16                                           ;
	uint          shader_int8                                              ;
	uint          descriptor_indexing                                      ;
	uint          shader_input_attachment_array_dynamic_indexing           ;
	uint          shader_uniform_texel_buffer_array_dynamic_indexing       ;
	uint          shader_storage_texel_buffer_array_dynamic_indexing       ;
	uint          shader_uniform_buffer_array_non_uniform_indexing         ;
	uint          shader_sampled_image_array_non_uniform_indexing          ;
	uint          shader_storage_buffer_array_non_uniform_indexing         ;
	uint          shader_storage_image_array_non_uniform_indexing          ;
	uint          shader_input_attachment_array_non_uniform_indexing       ;
	uint          shader_uniform_texel_buffer_array_non_uniform_indexing   ;
	uint          shader_storage_texel_buffer_array_non_uniform_indexing   ;
	uint          descriptor_binding_uniform_buffer_update_after_bind      ;
	uint          descriptor_binding_sampled_image_update_after_bind       ;
	uint          descriptor_binding_storage_image_update_after_bind       ;
	uint          descriptor_binding_storage_buffer_update_after_bind      ;
	uint          descriptor_binding_uniform_texel_buffer_update_after_bind;
	uint          descriptor_binding_storage_texel_buffer_update_after_bind;
	uint          descriptor_binding_update_unused_while_pending           ;
	uint          descriptor_binding_partially_bound                       ;
	uint          descriptor_binding_variable_descriptor_count             ;
	uint          runtime_descriptor_array                                 ;
	uint          sampler_filter_minmax                                    ;
	uint          scalar_block_layout                                      ;
	uint          imageless_framebuffer                                    ;
	uint          uniform_buffer_standard_layout                           ;
	uint          shader_subgroup_extended_types                           ;
	uint          separate_depth_stencil_layouts                           ;
	uint          host_query_reset                                         ;
	uint          timeline_semaphore                                       ;
	uint          buffer_device_address                                    ;
	uint          buffer_device_address_capture_replay                     ;
	uint          buffer_device_address_multi_device                       ;
	uint          vulkan_memory_model                                      ;
	uint          vulkan_memory_model_device_scope                         ;
	uint          vulkan_memory_model_availability_visibility_chains       ;
	uint          shader_output_viewport_index                             ;
	uint          shader_output_layer                                      ;
	uint          subgroup_broadcast_dynamic_id                            ;
}

struct ConformanceVersion {
	char major   ;
	char minor   ;
	char subminor;
	char patch   ;
}

struct PhysicalDeviceVulkan12Properties {
	StructureType                   s_type                                                      ;
	void*                           p_next                                                      ;
	DriverId                        driver_id                                                   ;
	ichar[MAX_DRIVER_NAME_SIZE]     driver_name                                                 ;
	ichar[MAX_DRIVER_INFO_SIZE]     driver_info                                                 ;
	ConformanceVersion              conformance_version                                         ;
	ShaderFloatControlsIndependence denorm_behavior_independence                                ;
	ShaderFloatControlsIndependence rounding_mode_independence                                  ;
	uint                            shader_signed_zero_inf_nan_preserve_float16                 ;
	uint                            shader_signed_zero_inf_nan_preserve_float32                 ;
	uint                            shader_signed_zero_inf_nan_preserve_float64                 ;
	uint                            shader_denorm_preserve_float16                              ;
	uint                            shader_denorm_preserve_float32                              ;
	uint                            shader_denorm_preserve_float64                              ;
	uint                            shader_denorm_flush_to_zero_float16                         ;
	uint                            shader_denorm_flush_to_zero_float32                         ;
	uint                            shader_denorm_flush_to_zero_float64                         ;
	uint                            shader_rounding_mode_rte_float16                            ;
	uint                            shader_rounding_mode_rte_float32                            ;
	uint                            shader_rounding_mode_rte_float64                            ;
	uint                            shader_rounding_mode_rtz_float16                            ;
	uint                            shader_rounding_mode_rtz_float32                            ;
	uint                            shader_rounding_mode_rtz_float64                            ;
	uint                            max_update_after_bind_descriptors_in_all_pools              ;
	uint                            shader_uniform_buffer_array_non_uniform_indexing_native     ;
	uint                            shader_sampled_image_array_non_uniform_indexing_native      ;
	uint                            shader_storage_buffer_array_non_uniform_indexing_native     ;
	uint                            shader_storage_image_array_non_uniform_indexing_native      ;
	uint                            shader_input_attachment_array_non_uniform_indexing_native   ;
	uint                            robust_buffer_access_update_after_bind                      ;
	uint                            quad_divergent_implicit_lod                                 ;
	uint                            max_per_stage_descriptor_update_after_bind_samplers         ;
	uint                            max_per_stage_descriptor_update_after_bind_uniform_buffers  ;
	uint                            max_per_stage_descriptor_update_after_bind_storage_buffers  ;
	uint                            max_per_stage_descriptor_update_after_bind_sampled_images   ;
	uint                            max_per_stage_descriptor_update_after_bind_storage_images   ;
	uint                            max_per_stage_descriptor_update_after_bind_input_attachments;
	uint                            max_per_stage_update_after_bind_resources                   ;
	uint                            max_descriptor_set_update_after_bind_samplers               ;
	uint                            max_descriptor_set_update_after_bind_uniform_buffers        ;
	uint                            max_descriptor_set_update_after_bind_uniform_buffers_dynamic;
	uint                            max_descriptor_set_update_after_bind_storage_buffers        ;
	uint                            max_descriptor_set_update_after_bind_storage_buffers_dynamic;
	uint                            max_descriptor_set_update_after_bind_sampled_images         ;
	uint                            max_descriptor_set_update_after_bind_storage_images         ;
	uint                            max_descriptor_set_update_after_bind_input_attachments      ;
	ResolveModeFlags                supported_depth_resolve_modes                               ;
	ResolveModeFlags                supported_stencil_resolve_modes                             ;
	uint                            independent_resolve_none                                    ;
	uint                            independent_resolve                                         ;
	uint                            filter_minmax_single_component_formats                      ;
	uint                            filter_minmax_image_component_mapping                       ;
	ulong                           max_timeline_semaphore_value_difference                     ;
	SampleCountFlags                framebuffer_integer_color_sample_counts                     ;
}

struct ImageFormatListCreateInfo {
	StructureType s_type           ;
	void*         p_next           ;
	uint          view_format_count;
	Format*       p_view_formats   ;
}

struct AttachmentDescription2 {
	StructureType              s_type          ;
	void*                      p_next          ;
	AttachmentDescriptionFlags flags           ;
	Format                     format          ;
	SampleCountFlags           samples         ;
	AttachmentLoadOp           load_op         ;
	AttachmentStoreOp          store_op        ;
	AttachmentLoadOp           stencil_load_op ;
	AttachmentStoreOp          stencil_store_op;
	ImageLayout                initial_layout  ;
	ImageLayout                final_layout    ;
}

struct AttachmentReference2 {
	StructureType    s_type     ;
	void*            p_next     ;
	uint             attachment ;
	ImageLayout      layout     ;
	ImageAspectFlags aspect_mask;
}

struct SubpassDescription2 {
	StructureType           s_type                    ;
	void*                   p_next                    ;
	SubpassDescriptionFlags flags                     ;
	PipelineBindPoint       pipeline_bind_point       ;
	uint                    view_mask                 ;
	uint                    input_attachment_count    ;
	AttachmentReference2*   p_input_attachments       ;
	uint                    color_attachment_count    ;
	AttachmentReference2*   p_color_attachments       ;
	AttachmentReference2*   p_resolve_attachments     ;
	AttachmentReference2*   p_depth_stencil_attachment;
	uint                    preserve_attachment_count ;
	uint*                   p_preserve_attachments    ;
}

struct SubpassDependency2 {
	StructureType      s_type          ;
	void*              p_next          ;
	uint               src_subpass     ;
	uint               dst_subpass     ;
	PipelineStageFlags src_stage_mask  ;
	PipelineStageFlags dst_stage_mask  ;
	AccessFlags        src_access_mask ;
	AccessFlags        dst_access_mask ;
	DependencyFlags    dependency_flags;
	int                view_offset     ;
}

struct RenderPassCreateInfo2 {
	StructureType           s_type                    ;
	void*                   p_next                    ;
	RenderPassCreateFlags   flags                     ;
	uint                    attachment_count          ;
	AttachmentDescription2* p_attachments             ;
	uint                    subpass_count             ;
	SubpassDescription2*    p_subpasses               ;
	uint                    dependency_count          ;
	SubpassDependency2*     p_dependencies            ;
	uint                    correlated_view_mask_count;
	uint*                   p_correlated_view_masks   ;
}

struct SubpassBeginInfo {
	StructureType   s_type  ;
	void*           p_next  ;
	SubpassContents contents;
}

struct SubpassEndInfo {
	StructureType s_type;
	void*         p_next;
}

struct PhysicalDevice8BitStorageFeatures {
	StructureType s_type                                ;
	void*         p_next                                ;
	uint          storage_buffer8_bit_access            ;
	uint          uniform_and_storage_buffer8_bit_access;
	uint          storage_push_constant8                ;
}

struct PhysicalDeviceDriverProperties {
	StructureType               s_type             ;
	void*                       p_next             ;
	DriverId                    driver_id          ;
	ichar[MAX_DRIVER_NAME_SIZE] driver_name        ;
	ichar[MAX_DRIVER_INFO_SIZE] driver_info        ;
	ConformanceVersion          conformance_version;
}

struct PhysicalDeviceShaderAtomicInt64Features {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          shader_buffer_int64_atomics;
	uint          shader_shared_int64_atomics;
}

struct PhysicalDeviceShaderFloat16Int8Features {
	StructureType s_type        ;
	void*         p_next        ;
	uint          shader_float16;
	uint          shader_int8   ;
}

struct PhysicalDeviceFloatControlsProperties {
	StructureType                   s_type                                     ;
	void*                           p_next                                     ;
	ShaderFloatControlsIndependence denorm_behavior_independence               ;
	ShaderFloatControlsIndependence rounding_mode_independence                 ;
	uint                            shader_signed_zero_inf_nan_preserve_float16;
	uint                            shader_signed_zero_inf_nan_preserve_float32;
	uint                            shader_signed_zero_inf_nan_preserve_float64;
	uint                            shader_denorm_preserve_float16             ;
	uint                            shader_denorm_preserve_float32             ;
	uint                            shader_denorm_preserve_float64             ;
	uint                            shader_denorm_flush_to_zero_float16        ;
	uint                            shader_denorm_flush_to_zero_float32        ;
	uint                            shader_denorm_flush_to_zero_float64        ;
	uint                            shader_rounding_mode_rte_float16           ;
	uint                            shader_rounding_mode_rte_float32           ;
	uint                            shader_rounding_mode_rte_float64           ;
	uint                            shader_rounding_mode_rtz_float16           ;
	uint                            shader_rounding_mode_rtz_float32           ;
	uint                            shader_rounding_mode_rtz_float64           ;
}

struct DescriptorSetLayoutBindingFlagsCreateInfo {
	StructureType           s_type         ;
	void*                   p_next         ;
	uint                    binding_count  ;
	DescriptorBindingFlags* p_binding_flags;
}

struct PhysicalDeviceDescriptorIndexingFeatures {
	StructureType s_type                                                   ;
	void*         p_next                                                   ;
	uint          shader_input_attachment_array_dynamic_indexing           ;
	uint          shader_uniform_texel_buffer_array_dynamic_indexing       ;
	uint          shader_storage_texel_buffer_array_dynamic_indexing       ;
	uint          shader_uniform_buffer_array_non_uniform_indexing         ;
	uint          shader_sampled_image_array_non_uniform_indexing          ;
	uint          shader_storage_buffer_array_non_uniform_indexing         ;
	uint          shader_storage_image_array_non_uniform_indexing          ;
	uint          shader_input_attachment_array_non_uniform_indexing       ;
	uint          shader_uniform_texel_buffer_array_non_uniform_indexing   ;
	uint          shader_storage_texel_buffer_array_non_uniform_indexing   ;
	uint          descriptor_binding_uniform_buffer_update_after_bind      ;
	uint          descriptor_binding_sampled_image_update_after_bind       ;
	uint          descriptor_binding_storage_image_update_after_bind       ;
	uint          descriptor_binding_storage_buffer_update_after_bind      ;
	uint          descriptor_binding_uniform_texel_buffer_update_after_bind;
	uint          descriptor_binding_storage_texel_buffer_update_after_bind;
	uint          descriptor_binding_update_unused_while_pending           ;
	uint          descriptor_binding_partially_bound                       ;
	uint          descriptor_binding_variable_descriptor_count             ;
	uint          runtime_descriptor_array                                 ;
}

struct PhysicalDeviceDescriptorIndexingProperties {
	StructureType s_type                                                      ;
	void*         p_next                                                      ;
	uint          max_update_after_bind_descriptors_in_all_pools              ;
	uint          shader_uniform_buffer_array_non_uniform_indexing_native     ;
	uint          shader_sampled_image_array_non_uniform_indexing_native      ;
	uint          shader_storage_buffer_array_non_uniform_indexing_native     ;
	uint          shader_storage_image_array_non_uniform_indexing_native      ;
	uint          shader_input_attachment_array_non_uniform_indexing_native   ;
	uint          robust_buffer_access_update_after_bind                      ;
	uint          quad_divergent_implicit_lod                                 ;
	uint          max_per_stage_descriptor_update_after_bind_samplers         ;
	uint          max_per_stage_descriptor_update_after_bind_uniform_buffers  ;
	uint          max_per_stage_descriptor_update_after_bind_storage_buffers  ;
	uint          max_per_stage_descriptor_update_after_bind_sampled_images   ;
	uint          max_per_stage_descriptor_update_after_bind_storage_images   ;
	uint          max_per_stage_descriptor_update_after_bind_input_attachments;
	uint          max_per_stage_update_after_bind_resources                   ;
	uint          max_descriptor_set_update_after_bind_samplers               ;
	uint          max_descriptor_set_update_after_bind_uniform_buffers        ;
	uint          max_descriptor_set_update_after_bind_uniform_buffers_dynamic;
	uint          max_descriptor_set_update_after_bind_storage_buffers        ;
	uint          max_descriptor_set_update_after_bind_storage_buffers_dynamic;
	uint          max_descriptor_set_update_after_bind_sampled_images         ;
	uint          max_descriptor_set_update_after_bind_storage_images         ;
	uint          max_descriptor_set_update_after_bind_input_attachments      ;
}

struct DescriptorSetVariableDescriptorCountAllocateInfo {
	StructureType s_type              ;
	void*         p_next              ;
	uint          descriptor_set_count;
	uint*         p_descriptor_counts ;
}

struct DescriptorSetVariableDescriptorCountLayoutSupport {
	StructureType s_type                       ;
	void*         p_next                       ;
	uint          max_variable_descriptor_count;
}

struct SubpassDescriptionDepthStencilResolve {
	StructureType         s_type                            ;
	void*                 p_next                            ;
	ResolveModeFlags      depth_resolve_mode                ;
	ResolveModeFlags      stencil_resolve_mode              ;
	AttachmentReference2* p_depth_stencil_resolve_attachment;
}

struct PhysicalDeviceDepthStencilResolveProperties {
	StructureType    s_type                         ;
	void*            p_next                         ;
	ResolveModeFlags supported_depth_resolve_modes  ;
	ResolveModeFlags supported_stencil_resolve_modes;
	uint             independent_resolve_none       ;
	uint             independent_resolve            ;
}

struct PhysicalDeviceScalarBlockLayoutFeatures {
	StructureType s_type             ;
	void*         p_next             ;
	uint          scalar_block_layout;
}

struct ImageStencilUsageCreateInfo {
	StructureType   s_type       ;
	void*           p_next       ;
	ImageUsageFlags stencil_usage;
}

struct SamplerReductionModeCreateInfo {
	StructureType        s_type        ;
	void*                p_next        ;
	SamplerReductionMode reduction_mode;
}

struct PhysicalDeviceSamplerFilterMinmaxProperties {
	StructureType s_type                                ;
	void*         p_next                                ;
	uint          filter_minmax_single_component_formats;
	uint          filter_minmax_image_component_mapping ;
}

struct PhysicalDeviceVulkanMemoryModelFeatures {
	StructureType s_type                                            ;
	void*         p_next                                            ;
	uint          vulkan_memory_model                               ;
	uint          vulkan_memory_model_device_scope                  ;
	uint          vulkan_memory_model_availability_visibility_chains;
}

struct PhysicalDeviceImagelessFramebufferFeatures {
	StructureType s_type               ;
	void*         p_next               ;
	uint          imageless_framebuffer;
}

struct FramebufferAttachmentImageInfo {
	StructureType    s_type           ;
	void*            p_next           ;
	ImageCreateFlags flags            ;
	ImageUsageFlags  usage            ;
	uint             width            ;
	uint             height           ;
	uint             layer_count      ;
	uint             view_format_count;
	Format*          p_view_formats   ;
}

struct FramebufferAttachmentsCreateInfo {
	StructureType                   s_type                     ;
	void*                           p_next                     ;
	uint                            attachment_image_info_count;
	FramebufferAttachmentImageInfo* p_attachment_image_infos   ;
}

struct RenderPassAttachmentBeginInfo {
	StructureType s_type          ;
	void*         p_next          ;
	uint          attachment_count;
	ImageView*    p_attachments   ;
}

struct PhysicalDeviceUniformBufferStandardLayoutFeatures {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          uniform_buffer_standard_layout;
}

struct PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          shader_subgroup_extended_types;
}

struct PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          separate_depth_stencil_layouts;
}

struct AttachmentReferenceStencilLayout {
	StructureType s_type        ;
	void*         p_next        ;
	ImageLayout   stencil_layout;
}

struct AttachmentDescriptionStencilLayout {
	StructureType s_type                ;
	void*         p_next                ;
	ImageLayout   stencil_initial_layout;
	ImageLayout   stencil_final_layout  ;
}

struct PhysicalDeviceHostQueryResetFeatures {
	StructureType s_type          ;
	void*         p_next          ;
	uint          host_query_reset;
}

struct PhysicalDeviceTimelineSemaphoreFeatures {
	StructureType s_type            ;
	void*         p_next            ;
	uint          timeline_semaphore;
}

struct PhysicalDeviceTimelineSemaphoreProperties {
	StructureType s_type                                 ;
	void*         p_next                                 ;
	ulong         max_timeline_semaphore_value_difference;
}

struct SemaphoreTypeCreateInfo {
	StructureType s_type        ;
	void*         p_next        ;
	SemaphoreType semaphore_type;
	ulong         initial_value ;
}

struct TimelineSemaphoreSubmitInfo {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          wait_semaphore_value_count  ;
	ulong*        p_wait_semaphore_values     ;
	uint          signal_semaphore_value_count;
	ulong*        p_signal_semaphore_values   ;
}

struct SemaphoreWaitInfo {
	StructureType      s_type         ;
	void*              p_next         ;
	SemaphoreWaitFlags flags          ;
	uint               semaphore_count;
	Semaphore*         p_semaphores   ;
	ulong*             p_values       ;
}

struct SemaphoreSignalInfo {
	StructureType s_type   ;
	void*         p_next   ;
	Semaphore     semaphore;
	ulong         value    ;
}

struct PhysicalDeviceBufferDeviceAddressFeatures {
	StructureType s_type                              ;
	void*         p_next                              ;
	uint          buffer_device_address               ;
	uint          buffer_device_address_capture_replay;
	uint          buffer_device_address_multi_device  ;
}

struct BufferDeviceAddressInfo {
	StructureType s_type;
	void*         p_next;
	Buffer        buffer;
}

struct BufferOpaqueCaptureAddressCreateInfo {
	StructureType s_type                ;
	void*         p_next                ;
	ulong         opaque_capture_address;
}

struct MemoryOpaqueCaptureAddressAllocateInfo {
	StructureType s_type                ;
	void*         p_next                ;
	ulong         opaque_capture_address;
}

struct DeviceMemoryOpaqueCaptureAddressInfo {
	StructureType s_type;
	void*         p_next;
	DeviceMemory  memory;
}

struct PhysicalDeviceVulkan13Features {
	StructureType s_type                                                   ;
	void*         p_next                                                   ;
	uint          robust_image_access                                      ;
	uint          inline_uniform_block                                     ;
	uint          descriptor_binding_inline_uniform_block_update_after_bind;
	uint          pipeline_creation_cache_control                          ;
	uint          private_data                                             ;
	uint          shader_demote_to_helper_invocation                       ;
	uint          shader_terminate_invocation                              ;
	uint          subgroup_size_control                                    ;
	uint          compute_full_subgroups                                   ;
	uint          synchronization2                                         ;
	uint          texture_compression_astc_hdr                             ;
	uint          shader_zero_initialize_workgroup_memory                  ;
	uint          dynamic_rendering                                        ;
	uint          shader_integer_dot_product                               ;
	uint          maintenance4                                             ;
}

struct PhysicalDeviceVulkan13Properties {
	StructureType    s_type                                                                                ;
	void*            p_next                                                                                ;
	uint             min_subgroup_size                                                                     ;
	uint             max_subgroup_size                                                                     ;
	uint             max_compute_workgroup_subgroups                                                       ;
	ShaderStageFlags required_subgroup_size_stages                                                         ;
	uint             max_inline_uniform_block_size                                                         ;
	uint             max_per_stage_descriptor_inline_uniform_blocks                                        ;
	uint             max_per_stage_descriptor_update_after_bind_inline_uniform_blocks                      ;
	uint             max_descriptor_set_inline_uniform_blocks                                              ;
	uint             max_descriptor_set_update_after_bind_inline_uniform_blocks                            ;
	uint             max_inline_uniform_total_size                                                         ;
	uint             integer_dot_product8_bit_unsigned_accelerated                                         ;
	uint             integer_dot_product8_bit_signed_accelerated                                           ;
	uint             integer_dot_product8_bit_mixed_signedness_accelerated                                 ;
	uint             integer_dot_product4x8_bit_packed_unsigned_accelerated                                ;
	uint             integer_dot_product4x8_bit_packed_signed_accelerated                                  ;
	uint             integer_dot_product4x8_bit_packed_mixed_signedness_accelerated                        ;
	uint             integer_dot_product16_bit_unsigned_accelerated                                        ;
	uint             integer_dot_product16_bit_signed_accelerated                                          ;
	uint             integer_dot_product16_bit_mixed_signedness_accelerated                                ;
	uint             integer_dot_product32_bit_unsigned_accelerated                                        ;
	uint             integer_dot_product32_bit_signed_accelerated                                          ;
	uint             integer_dot_product32_bit_mixed_signedness_accelerated                                ;
	uint             integer_dot_product64_bit_unsigned_accelerated                                        ;
	uint             integer_dot_product64_bit_signed_accelerated                                          ;
	uint             integer_dot_product64_bit_mixed_signedness_accelerated                                ;
	uint             integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated                 ;
	uint             integer_dot_product_accumulating_saturating8_bit_signed_accelerated                   ;
	uint             integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated         ;
	uint             integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated        ;
	uint             integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated          ;
	uint             integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated;
	uint             integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated                ;
	uint             integer_dot_product_accumulating_saturating16_bit_signed_accelerated                  ;
	uint             integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated        ;
	uint             integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated                ;
	uint             integer_dot_product_accumulating_saturating32_bit_signed_accelerated                  ;
	uint             integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated        ;
	uint             integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated                ;
	uint             integer_dot_product_accumulating_saturating64_bit_signed_accelerated                  ;
	uint             integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated        ;
	DeviceSize       storage_texel_buffer_offset_alignment_bytes                                           ;
	uint             storage_texel_buffer_offset_single_texel_alignment                                    ;
	DeviceSize       uniform_texel_buffer_offset_alignment_bytes                                           ;
	uint             uniform_texel_buffer_offset_single_texel_alignment                                    ;
	DeviceSize       max_buffer_size                                                                       ;
}

struct PipelineCreationFeedback {
	PipelineCreationFeedbackFlags flags   ;
	ulong                         duration;
}

struct PipelineCreationFeedbackCreateInfo {
	StructureType             s_type                                ;
	void*                     p_next                                ;
	PipelineCreationFeedback* p_pipeline_creation_feedback          ;
	uint                      pipeline_stage_creation_feedback_count;
	PipelineCreationFeedback* p_pipeline_stage_creation_feedbacks   ;
}

struct PhysicalDeviceShaderTerminateInvocationFeatures {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          shader_terminate_invocation;
}

struct PhysicalDeviceToolProperties {
	StructureType                  s_type     ;
	void*                          p_next     ;
	ichar[MAX_EXTENSION_NAME_SIZE] name       ;
	ichar[MAX_EXTENSION_NAME_SIZE] version    ;
	ToolPurposeFlags               purposes   ;
	ichar[MAX_DESCRIPTION_SIZE]    description;
	ichar[MAX_EXTENSION_NAME_SIZE] layer      ;
}

struct PhysicalDeviceShaderDemoteToHelperInvocationFeatures {
	StructureType s_type                            ;
	void*         p_next                            ;
	uint          shader_demote_to_helper_invocation;
}

struct PhysicalDevicePrivateDataFeatures {
	StructureType s_type      ;
	void*         p_next      ;
	uint          private_data;
}

struct DevicePrivateDataCreateInfo {
	StructureType s_type                         ;
	void*         p_next                         ;
	uint          private_data_slot_request_count;
}

struct PrivateDataSlotCreateInfo {
	StructureType              s_type;
	void*                      p_next;
	PrivateDataSlotCreateFlags flags ;
}

struct PhysicalDevicePipelineCreationCacheControlFeatures {
	StructureType s_type                         ;
	void*         p_next                         ;
	uint          pipeline_creation_cache_control;
}

struct MemoryBarrier2 {
	StructureType       s_type         ;
	void*               p_next         ;
	PipelineStageFlags2 src_stage_mask ;
	AccessFlags2        src_access_mask;
	PipelineStageFlags2 dst_stage_mask ;
	AccessFlags2        dst_access_mask;
}

struct BufferMemoryBarrier2 {
	StructureType       s_type                ;
	void*               p_next                ;
	PipelineStageFlags2 src_stage_mask        ;
	AccessFlags2        src_access_mask       ;
	PipelineStageFlags2 dst_stage_mask        ;
	AccessFlags2        dst_access_mask       ;
	uint                src_queue_family_index;
	uint                dst_queue_family_index;
	Buffer              buffer                ;
	DeviceSize          offset                ;
	DeviceSize          size                  ;
}

struct ImageMemoryBarrier2 {
	StructureType         s_type                ;
	void*                 p_next                ;
	PipelineStageFlags2   src_stage_mask        ;
	AccessFlags2          src_access_mask       ;
	PipelineStageFlags2   dst_stage_mask        ;
	AccessFlags2          dst_access_mask       ;
	ImageLayout           old_layout            ;
	ImageLayout           new_layout            ;
	uint                  src_queue_family_index;
	uint                  dst_queue_family_index;
	Image                 image                 ;
	ImageSubresourceRange subresource_range     ;
}

struct DependencyInfo {
	StructureType         s_type                     ;
	void*                 p_next                     ;
	DependencyFlags       dependency_flags           ;
	uint                  memory_barrier_count       ;
	MemoryBarrier2*       p_memory_barriers          ;
	uint                  buffer_memory_barrier_count;
	BufferMemoryBarrier2* p_buffer_memory_barriers   ;
	uint                  image_memory_barrier_count ;
	ImageMemoryBarrier2*  p_image_memory_barriers    ;
}

struct SemaphoreSubmitInfo {
	StructureType       s_type      ;
	void*               p_next      ;
	Semaphore           semaphore   ;
	ulong               value       ;
	PipelineStageFlags2 stage_mask  ;
	uint                device_index;
}

struct CommandBufferSubmitInfo {
	StructureType s_type        ;
	void*         p_next        ;
	CommandBuffer command_buffer;
	uint          device_mask   ;
}

struct SubmitInfo2 {
	StructureType            s_type                     ;
	void*                    p_next                     ;
	SubmitFlags              flags                      ;
	uint                     wait_semaphore_info_count  ;
	SemaphoreSubmitInfo*     p_wait_semaphore_infos     ;
	uint                     command_buffer_info_count  ;
	CommandBufferSubmitInfo* p_command_buffer_infos     ;
	uint                     signal_semaphore_info_count;
	SemaphoreSubmitInfo*     p_signal_semaphore_infos   ;
}

struct PhysicalDeviceSynchronization2Features {
	StructureType s_type          ;
	void*         p_next          ;
	uint          synchronization2;
}

struct PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
	StructureType s_type                                 ;
	void*         p_next                                 ;
	uint          shader_zero_initialize_workgroup_memory;
}

struct PhysicalDeviceImageRobustnessFeatures {
	StructureType s_type             ;
	void*         p_next             ;
	uint          robust_image_access;
}

struct BufferCopy2 {
	StructureType s_type    ;
	void*         p_next    ;
	DeviceSize    src_offset;
	DeviceSize    dst_offset;
	DeviceSize    size      ;
}

struct CopyBufferInfo2 {
	StructureType s_type      ;
	void*         p_next      ;
	Buffer        src_buffer  ;
	Buffer        dst_buffer  ;
	uint          region_count;
	BufferCopy2*  p_regions   ;
}

struct ImageCopy2 {
	StructureType          s_type         ;
	void*                  p_next         ;
	ImageSubresourceLayers src_subresource;
	Offset3D               src_offset     ;
	ImageSubresourceLayers dst_subresource;
	Offset3D               dst_offset     ;
	Extent3D               extent         ;
}

struct CopyImageInfo2 {
	StructureType s_type          ;
	void*         p_next          ;
	Image         src_image       ;
	ImageLayout   src_image_layout;
	Image         dst_image       ;
	ImageLayout   dst_image_layout;
	uint          region_count    ;
	ImageCopy2*   p_regions       ;
}

struct BufferImageCopy2 {
	StructureType          s_type             ;
	void*                  p_next             ;
	DeviceSize             buffer_offset      ;
	uint                   buffer_row_length  ;
	uint                   buffer_image_height;
	ImageSubresourceLayers image_subresource  ;
	Offset3D               image_offset       ;
	Extent3D               image_extent       ;
}

struct CopyBufferToImageInfo2 {
	StructureType     s_type          ;
	void*             p_next          ;
	Buffer            src_buffer      ;
	Image             dst_image       ;
	ImageLayout       dst_image_layout;
	uint              region_count    ;
	BufferImageCopy2* p_regions       ;
}

struct CopyImageToBufferInfo2 {
	StructureType     s_type          ;
	void*             p_next          ;
	Image             src_image       ;
	ImageLayout       src_image_layout;
	Buffer            dst_buffer      ;
	uint              region_count    ;
	BufferImageCopy2* p_regions       ;
}

struct ImageBlit2 {
	StructureType          s_type         ;
	void*                  p_next         ;
	ImageSubresourceLayers src_subresource;
	Offset3D[2]            src_offsets    ;
	ImageSubresourceLayers dst_subresource;
	Offset3D[2]            dst_offsets    ;
}

struct BlitImageInfo2 {
	StructureType s_type          ;
	void*         p_next          ;
	Image         src_image       ;
	ImageLayout   src_image_layout;
	Image         dst_image       ;
	ImageLayout   dst_image_layout;
	uint          region_count    ;
	ImageBlit2*   p_regions       ;
	Filter        filter          ;
}

struct ImageResolve2 {
	StructureType          s_type         ;
	void*                  p_next         ;
	ImageSubresourceLayers src_subresource;
	Offset3D               src_offset     ;
	ImageSubresourceLayers dst_subresource;
	Offset3D               dst_offset     ;
	Extent3D               extent         ;
}

struct ResolveImageInfo2 {
	StructureType  s_type          ;
	void*          p_next          ;
	Image          src_image       ;
	ImageLayout    src_image_layout;
	Image          dst_image       ;
	ImageLayout    dst_image_layout;
	uint           region_count    ;
	ImageResolve2* p_regions       ;
}

struct PhysicalDeviceSubgroupSizeControlFeatures {
	StructureType s_type                ;
	void*         p_next                ;
	uint          subgroup_size_control ;
	uint          compute_full_subgroups;
}

struct PhysicalDeviceSubgroupSizeControlProperties {
	StructureType    s_type                         ;
	void*            p_next                         ;
	uint             min_subgroup_size              ;
	uint             max_subgroup_size              ;
	uint             max_compute_workgroup_subgroups;
	ShaderStageFlags required_subgroup_size_stages  ;
}

struct PipelineShaderStageRequiredSubgroupSizeCreateInfo {
	StructureType s_type                ;
	void*         p_next                ;
	uint          required_subgroup_size;
}

struct PhysicalDeviceInlineUniformBlockFeatures {
	StructureType s_type                                                   ;
	void*         p_next                                                   ;
	uint          inline_uniform_block                                     ;
	uint          descriptor_binding_inline_uniform_block_update_after_bind;
}

struct PhysicalDeviceInlineUniformBlockProperties {
	StructureType s_type                                                          ;
	void*         p_next                                                          ;
	uint          max_inline_uniform_block_size                                   ;
	uint          max_per_stage_descriptor_inline_uniform_blocks                  ;
	uint          max_per_stage_descriptor_update_after_bind_inline_uniform_blocks;
	uint          max_descriptor_set_inline_uniform_blocks                        ;
	uint          max_descriptor_set_update_after_bind_inline_uniform_blocks      ;
}

struct WriteDescriptorSetInlineUniformBlock {
	StructureType s_type   ;
	void*         p_next   ;
	uint          data_size;
	void*         p_data   ;
}

struct DescriptorPoolInlineUniformBlockCreateInfo {
	StructureType s_type                           ;
	void*         p_next                           ;
	uint          max_inline_uniform_block_bindings;
}

struct PhysicalDeviceTextureCompressionASTCHDRFeatures {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          texture_compression_astc_hdr;
}

struct RenderingAttachmentInfo {
	StructureType     s_type              ;
	void*             p_next              ;
	ImageView         image_view          ;
	ImageLayout       image_layout        ;
	ResolveModeFlags  resolve_mode        ;
	ImageView         resolve_image_view  ;
	ImageLayout       resolve_image_layout;
	AttachmentLoadOp  load_op             ;
	AttachmentStoreOp store_op            ;
	ClearValue        clear_value         ;
}

struct RenderingInfo {
	StructureType            s_type                ;
	void*                    p_next                ;
	RenderingFlags           flags                 ;
	Rect2D                   render_area           ;
	uint                     layer_count           ;
	uint                     view_mask             ;
	uint                     color_attachment_count;
	RenderingAttachmentInfo* p_color_attachments   ;
	RenderingAttachmentInfo* p_depth_attachment    ;
	RenderingAttachmentInfo* p_stencil_attachment  ;
}

struct PipelineRenderingCreateInfo {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          view_mask                 ;
	uint          color_attachment_count    ;
	Format*       p_color_attachment_formats;
	Format        depth_attachment_format   ;
	Format        stencil_attachment_format ;
}

struct PhysicalDeviceDynamicRenderingFeatures {
	StructureType s_type           ;
	void*         p_next           ;
	uint          dynamic_rendering;
}

struct CommandBufferInheritanceRenderingInfo {
	StructureType    s_type                    ;
	void*            p_next                    ;
	RenderingFlags   flags                     ;
	uint             view_mask                 ;
	uint             color_attachment_count    ;
	Format*          p_color_attachment_formats;
	Format           depth_attachment_format   ;
	Format           stencil_attachment_format ;
	SampleCountFlags rasterization_samples     ;
}

struct PhysicalDeviceShaderIntegerDotProductFeatures {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          shader_integer_dot_product;
}

struct PhysicalDeviceShaderIntegerDotProductProperties {
	StructureType s_type                                                                                ;
	void*         p_next                                                                                ;
	uint          integer_dot_product8_bit_unsigned_accelerated                                         ;
	uint          integer_dot_product8_bit_signed_accelerated                                           ;
	uint          integer_dot_product8_bit_mixed_signedness_accelerated                                 ;
	uint          integer_dot_product4x8_bit_packed_unsigned_accelerated                                ;
	uint          integer_dot_product4x8_bit_packed_signed_accelerated                                  ;
	uint          integer_dot_product4x8_bit_packed_mixed_signedness_accelerated                        ;
	uint          integer_dot_product16_bit_unsigned_accelerated                                        ;
	uint          integer_dot_product16_bit_signed_accelerated                                          ;
	uint          integer_dot_product16_bit_mixed_signedness_accelerated                                ;
	uint          integer_dot_product32_bit_unsigned_accelerated                                        ;
	uint          integer_dot_product32_bit_signed_accelerated                                          ;
	uint          integer_dot_product32_bit_mixed_signedness_accelerated                                ;
	uint          integer_dot_product64_bit_unsigned_accelerated                                        ;
	uint          integer_dot_product64_bit_signed_accelerated                                          ;
	uint          integer_dot_product64_bit_mixed_signedness_accelerated                                ;
	uint          integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated                 ;
	uint          integer_dot_product_accumulating_saturating8_bit_signed_accelerated                   ;
	uint          integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated         ;
	uint          integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated        ;
	uint          integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated          ;
	uint          integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated;
	uint          integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated                ;
	uint          integer_dot_product_accumulating_saturating16_bit_signed_accelerated                  ;
	uint          integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated        ;
	uint          integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated                ;
	uint          integer_dot_product_accumulating_saturating32_bit_signed_accelerated                  ;
	uint          integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated        ;
	uint          integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated                ;
	uint          integer_dot_product_accumulating_saturating64_bit_signed_accelerated                  ;
	uint          integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated        ;
}

struct PhysicalDeviceTexelBufferAlignmentProperties {
	StructureType s_type                                            ;
	void*         p_next                                            ;
	DeviceSize    storage_texel_buffer_offset_alignment_bytes       ;
	uint          storage_texel_buffer_offset_single_texel_alignment;
	DeviceSize    uniform_texel_buffer_offset_alignment_bytes       ;
	uint          uniform_texel_buffer_offset_single_texel_alignment;
}

struct FormatProperties3 {
	StructureType       s_type                 ;
	void*               p_next                 ;
	FormatFeatureFlags2 linear_tiling_features ;
	FormatFeatureFlags2 optimal_tiling_features;
	FormatFeatureFlags2 buffer_features        ;
}

struct PhysicalDeviceMaintenance4Features {
	StructureType s_type      ;
	void*         p_next      ;
	uint          maintenance4;
}

struct PhysicalDeviceMaintenance4Properties {
	StructureType s_type         ;
	void*         p_next         ;
	DeviceSize    max_buffer_size;
}

struct DeviceBufferMemoryRequirements {
	StructureType     s_type       ;
	void*             p_next       ;
	BufferCreateInfo* p_create_info;
}

struct DeviceImageMemoryRequirements {
	StructureType    s_type       ;
	void*            p_next       ;
	ImageCreateInfo* p_create_info;
	ImageAspectFlags plane_aspect ;
}

struct PhysicalDeviceVulkan14Features {
	StructureType s_type                                     ;
	void*         p_next                                     ;
	uint          global_priority_query                      ;
	uint          shader_subgroup_rotate                     ;
	uint          shader_subgroup_rotate_clustered           ;
	uint          shader_float_controls2                     ;
	uint          shader_expect_assume                       ;
	uint          rectangular_lines                          ;
	uint          bresenham_lines                            ;
	uint          smooth_lines                               ;
	uint          stippled_rectangular_lines                 ;
	uint          stippled_bresenham_lines                   ;
	uint          stippled_smooth_lines                      ;
	uint          vertex_attribute_instance_rate_divisor     ;
	uint          vertex_attribute_instance_rate_zero_divisor;
	uint          index_type_uint8                           ;
	uint          dynamic_rendering_local_read               ;
	uint          maintenance5                               ;
	uint          maintenance6                               ;
	uint          pipeline_protected_access                  ;
	uint          pipeline_robustness                        ;
	uint          host_image_copy                            ;
	uint          push_descriptor                            ;
}

struct PhysicalDeviceVulkan14Properties {
	StructureType                    s_type                                                   ;
	void*                            p_next                                                   ;
	uint                             line_sub_pixel_precision_bits                            ;
	uint                             max_vertex_attrib_divisor                                ;
	uint                             supports_non_zero_first_instance                         ;
	uint                             max_push_descriptors                                     ;
	uint                             dynamic_rendering_local_read_depth_stencil_attachments   ;
	uint                             dynamic_rendering_local_read_multisampled_attachments    ;
	uint                             early_fragment_multisample_coverage_after_sample_counting;
	uint                             early_fragment_sample_mask_test_before_sample_counting   ;
	uint                             depth_stencil_swizzle_one_support                        ;
	uint                             polygon_mode_point_size                                  ;
	uint                             non_strict_single_pixel_wide_lines_use_parallelogram     ;
	uint                             non_strict_wide_lines_use_parallelogram                  ;
	uint                             block_texel_view_compatible_multiple_layers              ;
	uint                             max_combined_image_sampler_descriptor_count              ;
	uint                             fragment_shading_rate_clamp_combiner_inputs              ;
	PipelineRobustnessBufferBehavior default_robustness_storage_buffers                       ;
	PipelineRobustnessBufferBehavior default_robustness_uniform_buffers                       ;
	PipelineRobustnessBufferBehavior default_robustness_vertex_inputs                         ;
	PipelineRobustnessImageBehavior  default_robustness_images                                ;
	uint                             copy_src_layout_count                                    ;
	ImageLayout*                     p_copy_src_layouts                                       ;
	uint                             copy_dst_layout_count                                    ;
	ImageLayout*                     p_copy_dst_layouts                                       ;
	char[UUID_SIZE]                  optimal_tiling_layout_uuid                               ;
	uint                             identical_memory_type_requirements                       ;
}

struct DeviceQueueGlobalPriorityCreateInfo {
	StructureType       s_type         ;
	void*               p_next         ;
	QueueGlobalPriority global_priority;
}

struct PhysicalDeviceGlobalPriorityQueryFeatures {
	StructureType s_type               ;
	void*         p_next               ;
	uint          global_priority_query;
}

struct QueueFamilyGlobalPriorityProperties {
	StructureType                                 s_type        ;
	void*                                         p_next        ;
	uint                                          priority_count;
	QueueGlobalPriority[MAX_GLOBAL_PRIORITY_SIZE] priorities    ;
}

struct PhysicalDeviceShaderSubgroupRotateFeatures {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          shader_subgroup_rotate          ;
	uint          shader_subgroup_rotate_clustered;
}

struct PhysicalDeviceShaderFloatControls2Features {
	StructureType s_type                ;
	void*         p_next                ;
	uint          shader_float_controls2;
}

struct PhysicalDeviceShaderExpectAssumeFeatures {
	StructureType s_type              ;
	void*         p_next              ;
	uint          shader_expect_assume;
}

struct PhysicalDeviceLineRasterizationFeatures {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          rectangular_lines         ;
	uint          bresenham_lines           ;
	uint          smooth_lines              ;
	uint          stippled_rectangular_lines;
	uint          stippled_bresenham_lines  ;
	uint          stippled_smooth_lines     ;
}

struct PhysicalDeviceLineRasterizationProperties {
	StructureType s_type                       ;
	void*         p_next                       ;
	uint          line_sub_pixel_precision_bits;
}

struct PipelineRasterizationLineStateCreateInfo {
	StructureType         s_type                 ;
	void*                 p_next                 ;
	LineRasterizationMode line_rasterization_mode;
	uint                  stippled_line_enable   ;
	uint                  line_stipple_factor    ;
	ushort                line_stipple_pattern   ;
}

struct PhysicalDeviceVertexAttributeDivisorProperties {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          max_vertex_attrib_divisor       ;
	uint          supports_non_zero_first_instance;
}

struct VertexInputBindingDivisorDescription {
	uint binding;
	uint divisor;
}

struct PipelineVertexInputDivisorStateCreateInfo {
	StructureType                         s_type                      ;
	void*                                 p_next                      ;
	uint                                  vertex_binding_divisor_count;
	VertexInputBindingDivisorDescription* p_vertex_binding_divisors   ;
}

struct PhysicalDeviceVertexAttributeDivisorFeatures {
	StructureType s_type                                     ;
	void*         p_next                                     ;
	uint          vertex_attribute_instance_rate_divisor     ;
	uint          vertex_attribute_instance_rate_zero_divisor;
}

struct PhysicalDeviceIndexTypeUint8Features {
	StructureType s_type          ;
	void*         p_next          ;
	uint          index_type_uint8;
}

struct MemoryMapInfo {
	StructureType  s_type;
	void*          p_next;
	MemoryMapFlags flags ;
	DeviceMemory   memory;
	DeviceSize     offset;
	DeviceSize     size  ;
}

struct MemoryUnmapInfo {
	StructureType    s_type;
	void*            p_next;
	MemoryUnmapFlags flags ;
	DeviceMemory     memory;
}

struct PhysicalDeviceMaintenance5Features {
	StructureType s_type      ;
	void*         p_next      ;
	uint          maintenance5;
}

struct PhysicalDeviceMaintenance5Properties {
	StructureType s_type                                                   ;
	void*         p_next                                                   ;
	uint          early_fragment_multisample_coverage_after_sample_counting;
	uint          early_fragment_sample_mask_test_before_sample_counting   ;
	uint          depth_stencil_swizzle_one_support                        ;
	uint          polygon_mode_point_size                                  ;
	uint          non_strict_single_pixel_wide_lines_use_parallelogram     ;
	uint          non_strict_wide_lines_use_parallelogram                  ;
}

struct RenderingAreaInfo {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          view_mask                 ;
	uint          color_attachment_count    ;
	Format*       p_color_attachment_formats;
	Format        depth_attachment_format   ;
	Format        stencil_attachment_format ;
}

struct ImageSubresource2 {
	StructureType    s_type           ;
	void*            p_next           ;
	ImageSubresource image_subresource;
}

struct DeviceImageSubresourceInfo {
	StructureType      s_type       ;
	void*              p_next       ;
	ImageCreateInfo*   p_create_info;
	ImageSubresource2* p_subresource;
}

struct SubresourceLayout2 {
	StructureType     s_type            ;
	void*             p_next            ;
	SubresourceLayout subresource_layout;
}

struct PipelineCreateFlags2CreateInfo {
	StructureType        s_type;
	void*                p_next;
	PipelineCreateFlags2 flags ;
}

struct BufferUsageFlags2CreateInfo {
	StructureType     s_type;
	void*             p_next;
	BufferUsageFlags2 usage ;
}

struct PhysicalDevicePushDescriptorProperties {
	StructureType s_type              ;
	void*         p_next              ;
	uint          max_push_descriptors;
}

struct PhysicalDeviceDynamicRenderingLocalReadFeatures {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          dynamic_rendering_local_read;
}

struct RenderingAttachmentLocationInfo {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          color_attachment_count      ;
	uint*         p_color_attachment_locations;
}

struct RenderingInputAttachmentIndexInfo {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          color_attachment_count          ;
	uint*         p_color_attachment_input_indices;
	uint*         p_depth_input_attachment_index  ;
	uint*         p_stencil_input_attachment_index;
}

struct PhysicalDeviceMaintenance6Features {
	StructureType s_type      ;
	void*         p_next      ;
	uint          maintenance6;
}

struct PhysicalDeviceMaintenance6Properties {
	StructureType s_type                                     ;
	void*         p_next                                     ;
	uint          block_texel_view_compatible_multiple_layers;
	uint          max_combined_image_sampler_descriptor_count;
	uint          fragment_shading_rate_clamp_combiner_inputs;
}

struct BindMemoryStatus {
	StructureType s_type  ;
	void*         p_next  ;
	Result*       p_result;
}

struct BindDescriptorSetsInfo {
	StructureType    s_type              ;
	void*            p_next              ;
	ShaderStageFlags stage_flags         ;
	PipelineLayout   layout              ;
	uint             first_set           ;
	uint             descriptor_set_count;
	DescriptorSet*   p_descriptor_sets   ;
	uint             dynamic_offset_count;
	uint*            p_dynamic_offsets   ;
}

struct PushConstantsInfo {
	StructureType    s_type     ;
	void*            p_next     ;
	PipelineLayout   layout     ;
	ShaderStageFlags stage_flags;
	uint             offset     ;
	uint             size       ;
	void*            p_values   ;
}

struct PushDescriptorSetInfo {
	StructureType       s_type                ;
	void*               p_next                ;
	ShaderStageFlags    stage_flags           ;
	PipelineLayout      layout                ;
	uint                set                   ;
	uint                descriptor_write_count;
	WriteDescriptorSet* p_descriptor_writes   ;
}

struct PushDescriptorSetWithTemplateInfo {
	StructureType            s_type                    ;
	void*                    p_next                    ;
	DescriptorUpdateTemplate descriptor_update_template;
	PipelineLayout           layout                    ;
	uint                     set                       ;
	void*                    p_data                    ;
}

struct PhysicalDevicePipelineProtectedAccessFeatures {
	StructureType s_type                   ;
	void*         p_next                   ;
	uint          pipeline_protected_access;
}

struct PhysicalDevicePipelineRobustnessFeatures {
	StructureType s_type             ;
	void*         p_next             ;
	uint          pipeline_robustness;
}

struct PhysicalDevicePipelineRobustnessProperties {
	StructureType                    s_type                            ;
	void*                            p_next                            ;
	PipelineRobustnessBufferBehavior default_robustness_storage_buffers;
	PipelineRobustnessBufferBehavior default_robustness_uniform_buffers;
	PipelineRobustnessBufferBehavior default_robustness_vertex_inputs  ;
	PipelineRobustnessImageBehavior  default_robustness_images         ;
}

struct PipelineRobustnessCreateInfo {
	StructureType                    s_type         ;
	void*                            p_next         ;
	PipelineRobustnessBufferBehavior storage_buffers;
	PipelineRobustnessBufferBehavior uniform_buffers;
	PipelineRobustnessBufferBehavior vertex_inputs  ;
	PipelineRobustnessImageBehavior  images         ;
}

struct PhysicalDeviceHostImageCopyFeatures {
	StructureType s_type         ;
	void*         p_next         ;
	uint          host_image_copy;
}

struct PhysicalDeviceHostImageCopyProperties {
	StructureType   s_type                            ;
	void*           p_next                            ;
	uint            copy_src_layout_count             ;
	ImageLayout*    p_copy_src_layouts                ;
	uint            copy_dst_layout_count             ;
	ImageLayout*    p_copy_dst_layouts                ;
	char[UUID_SIZE] optimal_tiling_layout_uuid        ;
	uint            identical_memory_type_requirements;
}

struct MemoryToImageCopy {
	StructureType          s_type             ;
	void*                  p_next             ;
	void*                  p_host_pointer     ;
	uint                   memory_row_length  ;
	uint                   memory_image_height;
	ImageSubresourceLayers image_subresource  ;
	Offset3D               image_offset       ;
	Extent3D               image_extent       ;
}

struct ImageToMemoryCopy {
	StructureType          s_type             ;
	void*                  p_next             ;
	void*                  p_host_pointer     ;
	uint                   memory_row_length  ;
	uint                   memory_image_height;
	ImageSubresourceLayers image_subresource  ;
	Offset3D               image_offset       ;
	Extent3D               image_extent       ;
}

struct CopyMemoryToImageInfo {
	StructureType      s_type          ;
	void*              p_next          ;
	HostImageCopyFlags flags           ;
	Image              dst_image       ;
	ImageLayout        dst_image_layout;
	uint               region_count    ;
	MemoryToImageCopy* p_regions       ;
}

struct CopyImageToMemoryInfo {
	StructureType      s_type          ;
	void*              p_next          ;
	HostImageCopyFlags flags           ;
	Image              src_image       ;
	ImageLayout        src_image_layout;
	uint               region_count    ;
	ImageToMemoryCopy* p_regions       ;
}

struct CopyImageToImageInfo {
	StructureType      s_type          ;
	void*              p_next          ;
	HostImageCopyFlags flags           ;
	Image              src_image       ;
	ImageLayout        src_image_layout;
	Image              dst_image       ;
	ImageLayout        dst_image_layout;
	uint               region_count    ;
	ImageCopy2*        p_regions       ;
}

struct HostImageLayoutTransitionInfo {
	StructureType         s_type           ;
	void*                 p_next           ;
	Image                 image            ;
	ImageLayout           old_layout       ;
	ImageLayout           new_layout       ;
	ImageSubresourceRange subresource_range;
}

struct SubresourceHostMemcpySize {
	StructureType s_type;
	void*         p_next;
	DeviceSize    size  ;
}

struct HostImageCopyDevicePerformanceQuery {
	StructureType s_type                 ;
	void*         p_next                 ;
	uint          optimal_device_access  ;
	uint          identical_memory_layout;
}

struct SurfaceCapabilitiesKHR {
	uint                     min_image_count          ;
	uint                     max_image_count          ;
	Extent2D                 current_extent           ;
	Extent2D                 min_image_extent         ;
	Extent2D                 max_image_extent         ;
	uint                     max_image_array_layers   ;
	SurfaceTransformFlagsKHR supported_transforms     ;
	SurfaceTransformFlagsKHR current_transform        ;
	CompositeAlphaFlagsKHR   supported_composite_alpha;
	ImageUsageFlags          supported_usage_flags    ;
}

struct SurfaceFormatKHR {
	Format        format     ;
	ColorSpaceKHR color_space;
}

struct SwapchainCreateInfoKHR {
	StructureType            s_type                  ;
	void*                    p_next                  ;
	SwapchainCreateFlagsKHR  flags                   ;
	SurfaceKHR               surface                 ;
	uint                     min_image_count         ;
	Format                   image_format            ;
	ColorSpaceKHR            image_color_space       ;
	Extent2D                 image_extent            ;
	uint                     image_array_layers      ;
	ImageUsageFlags          image_usage             ;
	SharingMode              image_sharing_mode      ;
	uint                     queue_family_index_count;
	uint*                    p_queue_family_indices  ;
	SurfaceTransformFlagsKHR pre_transform           ;
	CompositeAlphaFlagsKHR   composite_alpha         ;
	PresentModeKHR           present_mode            ;
	uint                     clipped                 ;
	SwapchainKHR             old_swapchain           ;
}

struct PresentInfoKHR {
	StructureType s_type              ;
	void*         p_next              ;
	uint          wait_semaphore_count;
	Semaphore*    p_wait_semaphores   ;
	uint          swapchain_count     ;
	SwapchainKHR* p_swapchains        ;
	uint*         p_image_indices     ;
	Result*       p_results           ;
}

struct ImageSwapchainCreateInfoKHR {
	StructureType s_type   ;
	void*         p_next   ;
	SwapchainKHR  swapchain;
}

struct BindImageMemorySwapchainInfoKHR {
	StructureType s_type     ;
	void*         p_next     ;
	SwapchainKHR  swapchain  ;
	uint          image_index;
}

struct AcquireNextImageInfoKHR {
	StructureType s_type     ;
	void*         p_next     ;
	SwapchainKHR  swapchain  ;
	ulong         timeout    ;
	Semaphore     semaphore  ;
	Fence         fence      ;
	uint          device_mask;
}

struct DeviceGroupPresentCapabilitiesKHR {
	StructureType                  s_type      ;
	void*                          p_next      ;
	uint[MAX_DEVICE_GROUP_SIZE]    present_mask;
	DeviceGroupPresentModeFlagsKHR modes       ;
}

struct DeviceGroupPresentInfoKHR {
	StructureType                  s_type         ;
	void*                          p_next         ;
	uint                           swapchain_count;
	uint*                          p_device_masks ;
	DeviceGroupPresentModeFlagsKHR mode           ;
}

struct DeviceGroupSwapchainCreateInfoKHR {
	StructureType                  s_type;
	void*                          p_next;
	DeviceGroupPresentModeFlagsKHR modes ;
}

struct DisplayModeParametersKHR {
	Extent2D visible_region;
	uint     refresh_rate  ;
}

struct DisplayModeCreateInfoKHR {
	StructureType             s_type    ;
	void*                     p_next    ;
	DisplayModeCreateFlagsKHR flags     ;
	DisplayModeParametersKHR  parameters;
}

struct DisplayModePropertiesKHR {
	DisplayModeKHR           display_mode;
	DisplayModeParametersKHR parameters  ;
}

struct DisplayPlaneCapabilitiesKHR {
	DisplayPlaneAlphaFlagsKHR supported_alpha ;
	Offset2D                  min_src_position;
	Offset2D                  max_src_position;
	Extent2D                  min_src_extent  ;
	Extent2D                  max_src_extent  ;
	Offset2D                  min_dst_position;
	Offset2D                  max_dst_position;
	Extent2D                  min_dst_extent  ;
	Extent2D                  max_dst_extent  ;
}

struct DisplayPlanePropertiesKHR {
	DisplayKHR current_display    ;
	uint       current_stack_index;
}

struct DisplayPropertiesKHR {
	DisplayKHR               display               ;
	ZString                  display_name          ;
	Extent2D                 physical_dimensions   ;
	Extent2D                 physical_resolution   ;
	SurfaceTransformFlagsKHR supported_transforms  ;
	uint                     plane_reorder_possible;
	uint                     persistent_content    ;
}

struct DisplaySurfaceCreateInfoKHR {
	StructureType                s_type           ;
	void*                        p_next           ;
	DisplaySurfaceCreateFlagsKHR flags            ;
	DisplayModeKHR               display_mode     ;
	uint                         plane_index      ;
	uint                         plane_stack_index;
	SurfaceTransformFlagsKHR     transform        ;
	float                        global_alpha     ;
	DisplayPlaneAlphaFlagsKHR    alpha_mode       ;
	Extent2D                     image_extent     ;
}

struct DisplayPresentInfoKHR {
	StructureType s_type    ;
	void*         p_next    ;
	Rect2D        src_rect  ;
	Rect2D        dst_rect  ;
	uint          persistent;
}

struct QueueFamilyQueryResultStatusPropertiesKHR {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          query_result_status_support;
}

struct QueueFamilyVideoPropertiesKHR {
	StructureType               s_type                ;
	void*                       p_next                ;
	VideoCodecOperationFlagsKHR video_codec_operations;
}

struct VideoProfileInfoKHR {
	StructureType                  s_type               ;
	void*                          p_next               ;
	VideoCodecOperationFlagsKHR    video_codec_operation;
	VideoChromaSubsamplingFlagsKHR chroma_subsampling   ;
	VideoComponentBitDepthFlagsKHR luma_bit_depth       ;
	VideoComponentBitDepthFlagsKHR chroma_bit_depth     ;
}

struct VideoProfileListInfoKHR {
	StructureType        s_type       ;
	void*                p_next       ;
	uint                 profile_count;
	VideoProfileInfoKHR* p_profiles   ;
}

struct VideoCapabilitiesKHR {
	StructureType           s_type                               ;
	void*                   p_next                               ;
	VideoCapabilityFlagsKHR flags                                ;
	DeviceSize              min_bitstream_buffer_offset_alignment;
	DeviceSize              min_bitstream_buffer_size_alignment  ;
	Extent2D                picture_access_granularity           ;
	Extent2D                min_coded_extent                     ;
	Extent2D                max_coded_extent                     ;
	uint                    max_dpb_slots                        ;
	uint                    max_active_reference_pictures        ;
	ExtensionProperties     std_header_version                   ;
}

struct PhysicalDeviceVideoFormatInfoKHR {
	StructureType   s_type     ;
	void*           p_next     ;
	ImageUsageFlags image_usage;
}

struct VideoFormatPropertiesKHR {
	StructureType    s_type            ;
	void*            p_next            ;
	Format           format            ;
	ComponentMapping component_mapping ;
	ImageCreateFlags image_create_flags;
	ImageType        image_type        ;
	ImageTiling      image_tiling      ;
	ImageUsageFlags  image_usage_flags ;
}

struct VideoPictureResourceInfoKHR {
	StructureType s_type            ;
	void*         p_next            ;
	Offset2D      coded_offset      ;
	Extent2D      coded_extent      ;
	uint          base_array_layer  ;
	ImageView     image_view_binding;
}

struct VideoReferenceSlotInfoKHR {
	StructureType                s_type            ;
	void*                        p_next            ;
	int                          slot_index        ;
	VideoPictureResourceInfoKHR* p_picture_resource;
}

struct VideoSessionMemoryRequirementsKHR {
	StructureType      s_type             ;
	void*              p_next             ;
	uint               memory_bind_index  ;
	MemoryRequirements memory_requirements;
}

struct BindVideoSessionMemoryInfoKHR {
	StructureType s_type           ;
	void*         p_next           ;
	uint          memory_bind_index;
	DeviceMemory  memory           ;
	DeviceSize    memory_offset    ;
	DeviceSize    memory_size      ;
}

struct VideoSessionCreateInfoKHR {
	StructureType              s_type                       ;
	void*                      p_next                       ;
	uint                       queue_family_index           ;
	VideoSessionCreateFlagsKHR flags                        ;
	VideoProfileInfoKHR*       p_video_profile              ;
	Format                     picture_format               ;
	Extent2D                   max_coded_extent             ;
	Format                     reference_picture_format     ;
	uint                       max_dpb_slots                ;
	uint                       max_active_reference_pictures;
	ExtensionProperties*       p_std_header_version         ;
}

struct VideoSessionParametersCreateInfoKHR {
	StructureType                        s_type                           ;
	void*                                p_next                           ;
	VideoSessionParametersCreateFlagsKHR flags                            ;
	VideoSessionParametersKHR            video_session_parameters_template;
	VideoSessionKHR                      video_session                    ;
}

struct VideoSessionParametersUpdateInfoKHR {
	StructureType s_type               ;
	void*         p_next               ;
	uint          update_sequence_count;
}

struct VideoBeginCodingInfoKHR {
	StructureType              s_type                  ;
	void*                      p_next                  ;
	VideoBeginCodingFlagsKHR   flags                   ;
	VideoSessionKHR            video_session           ;
	VideoSessionParametersKHR  video_session_parameters;
	uint                       reference_slot_count    ;
	VideoReferenceSlotInfoKHR* p_reference_slots       ;
}

struct VideoEndCodingInfoKHR {
	StructureType          s_type;
	void*                  p_next;
	VideoEndCodingFlagsKHR flags ;
}

struct VideoCodingControlInfoKHR {
	StructureType              s_type;
	void*                      p_next;
	VideoCodingControlFlagsKHR flags ;
}

struct VideoDecodeCapabilitiesKHR {
	StructureType                 s_type;
	void*                         p_next;
	VideoDecodeCapabilityFlagsKHR flags ;
}

struct VideoDecodeUsageInfoKHR {
	StructureType            s_type           ;
	void*                    p_next           ;
	VideoDecodeUsageFlagsKHR video_usage_hints;
}

struct VideoDecodeInfoKHR {
	StructureType               s_type                ;
	void*                       p_next                ;
	VideoDecodeFlagsKHR         flags                 ;
	Buffer                      src_buffer            ;
	DeviceSize                  src_buffer_offset     ;
	DeviceSize                  src_buffer_range      ;
	VideoPictureResourceInfoKHR dst_picture_resource  ;
	VideoReferenceSlotInfoKHR*  p_setup_reference_slot;
	uint                        reference_slot_count  ;
	VideoReferenceSlotInfoKHR*  p_reference_slots     ;
}

struct VideoEncodeH264CapabilitiesKHR {
	StructureType                     s_type                              ;
	void*                             p_next                              ;
	VideoEncodeH264CapabilityFlagsKHR flags                               ;
	VideoH264LevelIdc                 max_level_idc                       ;
	uint                              max_slice_count                     ;
	uint                              max_p_picture_l0_reference_count    ;
	uint                              max_b_picture_l0_reference_count    ;
	uint                              max_l1_reference_count              ;
	uint                              max_temporal_layer_count            ;
	uint                              expect_dyadic_temporal_layer_pattern;
	int                               min_qp                              ;
	int                               max_qp                              ;
	uint                              prefers_gop_remaining_frames        ;
	uint                              requires_gop_remaining_frames       ;
	VideoEncodeH264StdFlagsKHR        std_syntax_flags                    ;
}

struct VideoEncodeH264QpKHR {
	int qp_i;
	int qp_p;
	int qp_b;
}

struct VideoEncodeH264QualityLevelPropertiesKHR {
	StructureType                      s_type                                ;
	void*                              p_next                                ;
	VideoEncodeH264RateControlFlagsKHR preferred_rate_control_flags          ;
	uint                               preferred_gop_frame_count             ;
	uint                               preferred_idr_period                  ;
	uint                               preferred_consecutive_b_frame_count   ;
	uint                               preferred_temporal_layer_count        ;
	VideoEncodeH264QpKHR               preferred_constant_qp                 ;
	uint                               preferred_max_l0_reference_count      ;
	uint                               preferred_max_l1_reference_count      ;
	uint                               preferred_std_entropy_coding_mode_flag;
}

struct VideoEncodeH264SessionCreateInfoKHR {
	StructureType     s_type           ;
	void*             p_next           ;
	uint              use_max_level_idc;
	VideoH264LevelIdc max_level_idc    ;
}

struct VideoEncodeH264SessionParametersAddInfoKHR {
	StructureType                  s_type       ;
	void*                          p_next       ;
	uint                           std_sps_count;
	VideoH264SequenceParameterSet* p_std_sp_ss  ;
	uint                           std_pps_count;
	VideoH264PictureParameterSet*  p_std_pp_ss  ;
}

struct VideoEncodeH264SessionParametersCreateInfoKHR {
	StructureType                               s_type               ;
	void*                                       p_next               ;
	uint                                        max_std_sps_count    ;
	uint                                        max_std_pps_count    ;
	VideoEncodeH264SessionParametersAddInfoKHR* p_parameters_add_info;
}

struct VideoEncodeH264SessionParametersGetInfoKHR {
	StructureType s_type       ;
	void*         p_next       ;
	uint          write_std_sps;
	uint          write_std_pps;
	uint          std_sps_id   ;
	uint          std_pps_id   ;
}

struct VideoEncodeH264SessionParametersFeedbackInfoKHR {
	StructureType s_type               ;
	void*         p_next               ;
	uint          has_std_sps_overrides;
	uint          has_std_pps_overrides;
}

struct VideoEncodeH264NaluSliceInfoKHR {
	StructureType               s_type            ;
	void*                       p_next            ;
	int                         constant_qp       ;
	VideoEncodeH264SliceHeader* p_std_slice_header;
}

struct VideoEncodeH264PictureInfoKHR {
	StructureType                    s_type                ;
	void*                            p_next                ;
	uint                             nalu_slice_entry_count;
	VideoEncodeH264NaluSliceInfoKHR* p_nalu_slice_entries  ;
	VideoEncodeH264PictureInfo*      p_std_picture_info    ;
	uint                             generate_prefix_nalu  ;
}

struct VideoEncodeH264DpbSlotInfoKHR {
	StructureType                 s_type              ;
	void*                         p_next              ;
	VideoEncodeH264ReferenceInfo* p_std_reference_info;
}

struct VideoEncodeH264ProfileInfoKHR {
	StructureType       s_type         ;
	void*               p_next         ;
	VideoH264ProfileIdc std_profile_idc;
}

struct VideoEncodeH264RateControlInfoKHR {
	StructureType                      s_type                   ;
	void*                              p_next                   ;
	VideoEncodeH264RateControlFlagsKHR flags                    ;
	uint                               gop_frame_count          ;
	uint                               idr_period               ;
	uint                               consecutive_b_frame_count;
	uint                               temporal_layer_count     ;
}

struct VideoEncodeH264FrameSizeKHR {
	uint frame_i_size;
	uint frame_p_size;
	uint frame_b_size;
}

struct VideoEncodeH264RateControlLayerInfoKHR {
	StructureType               s_type            ;
	void*                       p_next            ;
	uint                        use_min_qp        ;
	VideoEncodeH264QpKHR        min_qp            ;
	uint                        use_max_qp        ;
	VideoEncodeH264QpKHR        max_qp            ;
	uint                        use_max_frame_size;
	VideoEncodeH264FrameSizeKHR max_frame_size    ;
}

struct VideoEncodeH264GopRemainingFrameInfoKHR {
	StructureType s_type                  ;
	void*         p_next                  ;
	uint          use_gop_remaining_frames;
	uint          gop_remaining_i         ;
	uint          gop_remaining_p         ;
	uint          gop_remaining_b         ;
}

struct VideoEncodeH265CapabilitiesKHR {
	StructureType                             s_type                                  ;
	void*                                     p_next                                  ;
	VideoEncodeH265CapabilityFlagsKHR         flags                                   ;
	VideoH265LevelIdc                         max_level_idc                           ;
	uint                                      max_slice_segment_count                 ;
	Extent2D                                  max_tiles                               ;
	VideoEncodeH265CtbSizeFlagsKHR            ctb_sizes                               ;
	VideoEncodeH265TransformBlockSizeFlagsKHR transform_block_sizes                   ;
	uint                                      max_p_picture_l0_reference_count        ;
	uint                                      max_b_picture_l0_reference_count        ;
	uint                                      max_l1_reference_count                  ;
	uint                                      max_sub_layer_count                     ;
	uint                                      expect_dyadic_temporal_sub_layer_pattern;
	int                                       min_qp                                  ;
	int                                       max_qp                                  ;
	uint                                      prefers_gop_remaining_frames            ;
	uint                                      requires_gop_remaining_frames           ;
	VideoEncodeH265StdFlagsKHR                std_syntax_flags                        ;
}

struct VideoEncodeH265SessionCreateInfoKHR {
	StructureType     s_type           ;
	void*             p_next           ;
	uint              use_max_level_idc;
	VideoH265LevelIdc max_level_idc    ;
}

struct VideoEncodeH265QpKHR {
	int qp_i;
	int qp_p;
	int qp_b;
}

struct VideoEncodeH265QualityLevelPropertiesKHR {
	StructureType                      s_type                             ;
	void*                              p_next                             ;
	VideoEncodeH265RateControlFlagsKHR preferred_rate_control_flags       ;
	uint                               preferred_gop_frame_count          ;
	uint                               preferred_idr_period               ;
	uint                               preferred_consecutive_b_frame_count;
	uint                               preferred_sub_layer_count          ;
	VideoEncodeH265QpKHR               preferred_constant_qp              ;
	uint                               preferred_max_l0_reference_count   ;
	uint                               preferred_max_l1_reference_count   ;
}

struct VideoEncodeH265SessionParametersAddInfoKHR {
	StructureType                  s_type       ;
	void*                          p_next       ;
	uint                           std_vps_count;
	VideoH265VideoParameterSet*    p_std_vp_ss  ;
	uint                           std_sps_count;
	VideoH265SequenceParameterSet* p_std_sp_ss  ;
	uint                           std_pps_count;
	VideoH265PictureParameterSet*  p_std_pp_ss  ;
}

struct VideoEncodeH265SessionParametersCreateInfoKHR {
	StructureType                               s_type               ;
	void*                                       p_next               ;
	uint                                        max_std_vps_count    ;
	uint                                        max_std_sps_count    ;
	uint                                        max_std_pps_count    ;
	VideoEncodeH265SessionParametersAddInfoKHR* p_parameters_add_info;
}

struct VideoEncodeH265SessionParametersGetInfoKHR {
	StructureType s_type       ;
	void*         p_next       ;
	uint          write_std_vps;
	uint          write_std_sps;
	uint          write_std_pps;
	uint          std_vps_id   ;
	uint          std_sps_id   ;
	uint          std_pps_id   ;
}

struct VideoEncodeH265SessionParametersFeedbackInfoKHR {
	StructureType s_type               ;
	void*         p_next               ;
	uint          has_std_vps_overrides;
	uint          has_std_sps_overrides;
	uint          has_std_pps_overrides;
}

struct VideoEncodeH265NaluSliceSegmentInfoKHR {
	StructureType                      s_type                    ;
	void*                              p_next                    ;
	int                                constant_qp               ;
	VideoEncodeH265SliceSegmentHeader* p_std_slice_segment_header;
}

struct VideoEncodeH265PictureInfoKHR {
	StructureType                           s_type                        ;
	void*                                   p_next                        ;
	uint                                    nalu_slice_segment_entry_count;
	VideoEncodeH265NaluSliceSegmentInfoKHR* p_nalu_slice_segment_entries  ;
	VideoEncodeH265PictureInfo*             p_std_picture_info            ;
}

struct VideoEncodeH265DpbSlotInfoKHR {
	StructureType                 s_type              ;
	void*                         p_next              ;
	VideoEncodeH265ReferenceInfo* p_std_reference_info;
}

struct VideoEncodeH265ProfileInfoKHR {
	StructureType       s_type         ;
	void*               p_next         ;
	VideoH265ProfileIdc std_profile_idc;
}

struct VideoEncodeH265RateControlInfoKHR {
	StructureType                      s_type                   ;
	void*                              p_next                   ;
	VideoEncodeH265RateControlFlagsKHR flags                    ;
	uint                               gop_frame_count          ;
	uint                               idr_period               ;
	uint                               consecutive_b_frame_count;
	uint                               sub_layer_count          ;
}

struct VideoEncodeH265FrameSizeKHR {
	uint frame_i_size;
	uint frame_p_size;
	uint frame_b_size;
}

struct VideoEncodeH265RateControlLayerInfoKHR {
	StructureType               s_type            ;
	void*                       p_next            ;
	uint                        use_min_qp        ;
	VideoEncodeH265QpKHR        min_qp            ;
	uint                        use_max_qp        ;
	VideoEncodeH265QpKHR        max_qp            ;
	uint                        use_max_frame_size;
	VideoEncodeH265FrameSizeKHR max_frame_size    ;
}

struct VideoEncodeH265GopRemainingFrameInfoKHR {
	StructureType s_type                  ;
	void*         p_next                  ;
	uint          use_gop_remaining_frames;
	uint          gop_remaining_i         ;
	uint          gop_remaining_p         ;
	uint          gop_remaining_b         ;
}

struct VideoDecodeH264ProfileInfoKHR {
	StructureType                        s_type         ;
	void*                                p_next         ;
	VideoH264ProfileIdc                  std_profile_idc;
	VideoDecodeH264PictureLayoutFlagsKHR picture_layout ;
}

struct VideoDecodeH264CapabilitiesKHR {
	StructureType     s_type                  ;
	void*             p_next                  ;
	VideoH264LevelIdc max_level_idc           ;
	Offset2D          field_offset_granularity;
}

struct VideoDecodeH264SessionParametersAddInfoKHR {
	StructureType                  s_type       ;
	void*                          p_next       ;
	uint                           std_sps_count;
	VideoH264SequenceParameterSet* p_std_sp_ss  ;
	uint                           std_pps_count;
	VideoH264PictureParameterSet*  p_std_pp_ss  ;
}

struct VideoDecodeH264SessionParametersCreateInfoKHR {
	StructureType                               s_type               ;
	void*                                       p_next               ;
	uint                                        max_std_sps_count    ;
	uint                                        max_std_pps_count    ;
	VideoDecodeH264SessionParametersAddInfoKHR* p_parameters_add_info;
}

struct VideoDecodeH264PictureInfoKHR {
	StructureType               s_type            ;
	void*                       p_next            ;
	VideoDecodeH264PictureInfo* p_std_picture_info;
	uint                        slice_count       ;
	uint*                       p_slice_offsets   ;
}

struct VideoDecodeH264DpbSlotInfoKHR {
	StructureType                 s_type              ;
	void*                         p_next              ;
	VideoDecodeH264ReferenceInfo* p_std_reference_info;
}

struct ImportMemoryFdInfoKHR {
	StructureType                 s_type     ;
	void*                         p_next     ;
	ExternalMemoryHandleTypeFlags handle_type;
	CInt                          fd         ;
}

struct MemoryFdPropertiesKHR {
	StructureType s_type          ;
	void*         p_next          ;
	uint          memory_type_bits;
}

struct MemoryGetFdInfoKHR {
	StructureType                 s_type     ;
	void*                         p_next     ;
	DeviceMemory                  memory     ;
	ExternalMemoryHandleTypeFlags handle_type;
}

struct ImportSemaphoreFdInfoKHR {
	StructureType                    s_type     ;
	void*                            p_next     ;
	Semaphore                        semaphore  ;
	SemaphoreImportFlags             flags      ;
	ExternalSemaphoreHandleTypeFlags handle_type;
	CInt                             fd         ;
}

struct SemaphoreGetFdInfoKHR {
	StructureType                    s_type     ;
	void*                            p_next     ;
	Semaphore                        semaphore  ;
	ExternalSemaphoreHandleTypeFlags handle_type;
}

struct RectLayerKHR {
	Offset2D offset;
	Extent2D extent;
	uint     layer ;
}

struct PresentRegionKHR {
	uint          rectangle_count;
	RectLayerKHR* p_rectangles   ;
}

struct PresentRegionsKHR {
	StructureType     s_type         ;
	void*             p_next         ;
	uint              swapchain_count;
	PresentRegionKHR* p_regions      ;
}

struct SharedPresentSurfaceCapabilitiesKHR {
	StructureType   s_type                              ;
	void*           p_next                              ;
	ImageUsageFlags shared_present_supported_usage_flags;
}

struct ImportFenceFdInfoKHR {
	StructureType                s_type     ;
	void*                        p_next     ;
	Fence                        fence      ;
	FenceImportFlags             flags      ;
	ExternalFenceHandleTypeFlags handle_type;
	CInt                         fd         ;
}

struct FenceGetFdInfoKHR {
	StructureType                s_type     ;
	void*                        p_next     ;
	Fence                        fence      ;
	ExternalFenceHandleTypeFlags handle_type;
}

struct PhysicalDevicePerformanceQueryFeaturesKHR {
	StructureType s_type                                  ;
	void*         p_next                                  ;
	uint          performance_counter_query_pools         ;
	uint          performance_counter_multiple_query_pools;
}

struct PhysicalDevicePerformanceQueryPropertiesKHR {
	StructureType s_type                           ;
	void*         p_next                           ;
	uint          allow_command_buffer_query_copies;
}

struct PerformanceCounterKHR {
	StructureType                s_type ;
	void*                        p_next ;
	PerformanceCounterUnitKHR    unit   ;
	PerformanceCounterScopeKHR   scope  ;
	PerformanceCounterStorageKHR storage;
	char[UUID_SIZE]              uuid   ;
}

struct PerformanceCounterDescriptionKHR {
	StructureType                         s_type     ;
	void*                                 p_next     ;
	PerformanceCounterDescriptionFlagsKHR flags      ;
	ichar[MAX_DESCRIPTION_SIZE]           name       ;
	ichar[MAX_DESCRIPTION_SIZE]           category   ;
	ichar[MAX_DESCRIPTION_SIZE]           description;
}

struct QueryPoolPerformanceCreateInfoKHR {
	StructureType s_type             ;
	void*         p_next             ;
	uint          queue_family_index ;
	uint          counter_index_count;
	uint*         p_counter_indices  ;
}

union PerformanceCounterResultKHR {
	int    int32  ;
	long   int64  ;
	uint   uint32 ;
	ulong  uint64 ;
	float  float32;
	double float64;
}

struct AcquireProfilingLockInfoKHR {
	StructureType                s_type ;
	void*                        p_next ;
	AcquireProfilingLockFlagsKHR flags  ;
	ulong                        timeout;
}

struct PerformanceQuerySubmitInfoKHR {
	StructureType s_type            ;
	void*         p_next            ;
	uint          counter_pass_index;
}

struct PhysicalDeviceSurfaceInfo2KHR {
	StructureType s_type ;
	void*         p_next ;
	SurfaceKHR    surface;
}

struct SurfaceCapabilities2KHR {
	StructureType          s_type              ;
	void*                  p_next              ;
	SurfaceCapabilitiesKHR surface_capabilities;
}

struct SurfaceFormat2KHR {
	StructureType    s_type        ;
	void*            p_next        ;
	SurfaceFormatKHR surface_format;
}

struct DisplayProperties2KHR {
	StructureType        s_type            ;
	void*                p_next            ;
	DisplayPropertiesKHR display_properties;
}

struct DisplayPlaneProperties2KHR {
	StructureType             s_type                  ;
	void*                     p_next                  ;
	DisplayPlanePropertiesKHR display_plane_properties;
}

struct DisplayModeProperties2KHR {
	StructureType            s_type                 ;
	void*                    p_next                 ;
	DisplayModePropertiesKHR display_mode_properties;
}

struct DisplayPlaneInfo2KHR {
	StructureType  s_type     ;
	void*          p_next     ;
	DisplayModeKHR mode       ;
	uint           plane_index;
}

struct DisplayPlaneCapabilities2KHR {
	StructureType               s_type      ;
	void*                       p_next      ;
	DisplayPlaneCapabilitiesKHR capabilities;
}

struct PhysicalDeviceShaderClockFeaturesKHR {
	StructureType s_type               ;
	void*         p_next               ;
	uint          shader_subgroup_clock;
	uint          shader_device_clock  ;
}

struct VideoDecodeH265ProfileInfoKHR {
	StructureType       s_type         ;
	void*               p_next         ;
	VideoH265ProfileIdc std_profile_idc;
}

struct VideoDecodeH265CapabilitiesKHR {
	StructureType     s_type       ;
	void*             p_next       ;
	VideoH265LevelIdc max_level_idc;
}

struct VideoDecodeH265SessionParametersAddInfoKHR {
	StructureType                  s_type       ;
	void*                          p_next       ;
	uint                           std_vps_count;
	VideoH265VideoParameterSet*    p_std_vp_ss  ;
	uint                           std_sps_count;
	VideoH265SequenceParameterSet* p_std_sp_ss  ;
	uint                           std_pps_count;
	VideoH265PictureParameterSet*  p_std_pp_ss  ;
}

struct VideoDecodeH265SessionParametersCreateInfoKHR {
	StructureType                               s_type               ;
	void*                                       p_next               ;
	uint                                        max_std_vps_count    ;
	uint                                        max_std_sps_count    ;
	uint                                        max_std_pps_count    ;
	VideoDecodeH265SessionParametersAddInfoKHR* p_parameters_add_info;
}

struct VideoDecodeH265PictureInfoKHR {
	StructureType               s_type                 ;
	void*                       p_next                 ;
	VideoDecodeH265PictureInfo* p_std_picture_info     ;
	uint                        slice_segment_count    ;
	uint*                       p_slice_segment_offsets;
}

struct VideoDecodeH265DpbSlotInfoKHR {
	StructureType                 s_type              ;
	void*                         p_next              ;
	VideoDecodeH265ReferenceInfo* p_std_reference_info;
}

struct FragmentShadingRateAttachmentInfoKHR {
	StructureType         s_type                            ;
	void*                 p_next                            ;
	AttachmentReference2* p_fragment_shading_rate_attachment;
	Extent2D              shading_rate_attachment_texel_size;
}

struct PipelineFragmentShadingRateStateCreateInfoKHR {
	StructureType                       s_type       ;
	void*                               p_next       ;
	Extent2D                            fragment_size;
	FragmentShadingRateCombinerOpKHR[2] combiner_ops ;
}

struct PhysicalDeviceFragmentShadingRateFeaturesKHR {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          pipeline_fragment_shading_rate  ;
	uint          primitive_fragment_shading_rate ;
	uint          attachment_fragment_shading_rate;
}

struct PhysicalDeviceFragmentShadingRatePropertiesKHR {
	StructureType    s_type                                                      ;
	void*            p_next                                                      ;
	Extent2D         min_fragment_shading_rate_attachment_texel_size             ;
	Extent2D         max_fragment_shading_rate_attachment_texel_size             ;
	uint             max_fragment_shading_rate_attachment_texel_size_aspect_ratio;
	uint             primitive_fragment_shading_rate_with_multiple_viewports     ;
	uint             layered_shading_rate_attachments                            ;
	uint             fragment_shading_rate_non_trivial_combiner_ops              ;
	Extent2D         max_fragment_size                                           ;
	uint             max_fragment_size_aspect_ratio                              ;
	uint             max_fragment_shading_rate_coverage_samples                  ;
	SampleCountFlags max_fragment_shading_rate_rasterization_samples             ;
	uint             fragment_shading_rate_with_shader_depth_stencil_writes      ;
	uint             fragment_shading_rate_with_sample_mask                      ;
	uint             fragment_shading_rate_with_shader_sample_mask               ;
	uint             fragment_shading_rate_with_conservative_rasterization       ;
	uint             fragment_shading_rate_with_fragment_shader_interlock        ;
	uint             fragment_shading_rate_with_custom_sample_locations          ;
	uint             fragment_shading_rate_strict_multiply_combiner              ;
}

struct PhysicalDeviceFragmentShadingRateKHR {
	StructureType    s_type       ;
	void*            p_next       ;
	SampleCountFlags sample_counts;
	Extent2D         fragment_size;
}

struct RenderingFragmentShadingRateAttachmentInfoKHR {
	StructureType s_type                            ;
	void*         p_next                            ;
	ImageView     image_view                        ;
	ImageLayout   image_layout                      ;
	Extent2D      shading_rate_attachment_texel_size;
}

struct PhysicalDeviceShaderQuadControlFeaturesKHR {
	StructureType s_type             ;
	void*         p_next             ;
	uint          shader_quad_control;
}

struct SurfaceProtectedCapabilitiesKHR {
	StructureType s_type            ;
	void*         p_next            ;
	uint          supports_protected;
}

struct PhysicalDevicePresentWaitFeaturesKHR {
	StructureType s_type      ;
	void*         p_next      ;
	uint          present_wait;
}

struct PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
	StructureType s_type                  ;
	void*         p_next                  ;
	uint          pipeline_executable_info;
}

struct PipelineInfoKHR {
	StructureType s_type  ;
	void*         p_next  ;
	Pipeline      pipeline;
}

struct PipelineExecutablePropertiesKHR {
	StructureType               s_type       ;
	void*                       p_next       ;
	ShaderStageFlags            stages       ;
	ichar[MAX_DESCRIPTION_SIZE] name         ;
	ichar[MAX_DESCRIPTION_SIZE] description  ;
	uint                        subgroup_size;
}

struct PipelineExecutableInfoKHR {
	StructureType s_type          ;
	void*         p_next          ;
	Pipeline      pipeline        ;
	uint          executable_index;
}

union PipelineExecutableStatisticValueKHR {
	uint   b32;
	long   i64;
	ulong  u64;
	double f64;
}

struct PipelineExecutableStatisticKHR {
	StructureType                        s_type     ;
	void*                                p_next     ;
	ichar[MAX_DESCRIPTION_SIZE]          name       ;
	ichar[MAX_DESCRIPTION_SIZE]          description;
	PipelineExecutableStatisticFormatKHR format     ;
	PipelineExecutableStatisticValueKHR  value      ;
}

struct PipelineExecutableInternalRepresentationKHR {
	StructureType               s_type     ;
	void*                       p_next     ;
	ichar[MAX_DESCRIPTION_SIZE] name       ;
	ichar[MAX_DESCRIPTION_SIZE] description;
	uint                        is_text    ;
	usz                         data_size  ;
	void*                       p_data     ;
}

struct PipelineLibraryCreateInfoKHR {
	StructureType s_type       ;
	void*         p_next       ;
	uint          library_count;
	Pipeline*     p_libraries  ;
}

struct PresentIdKHR {
	StructureType s_type         ;
	void*         p_next         ;
	uint          swapchain_count;
	ulong*        p_present_ids  ;
}

struct PhysicalDevicePresentIdFeaturesKHR {
	StructureType s_type    ;
	void*         p_next    ;
	uint          present_id;
}

struct VideoEncodeInfoKHR {
	StructureType               s_type                            ;
	void*                       p_next                            ;
	VideoEncodeFlagsKHR         flags                             ;
	Buffer                      dst_buffer                        ;
	DeviceSize                  dst_buffer_offset                 ;
	DeviceSize                  dst_buffer_range                  ;
	VideoPictureResourceInfoKHR src_picture_resource              ;
	VideoReferenceSlotInfoKHR*  p_setup_reference_slot            ;
	uint                        reference_slot_count              ;
	VideoReferenceSlotInfoKHR*  p_reference_slots                 ;
	uint                        preceding_externally_encoded_bytes;
}

struct VideoEncodeCapabilitiesKHR {
	StructureType                      s_type                          ;
	void*                              p_next                          ;
	VideoEncodeCapabilityFlagsKHR      flags                           ;
	VideoEncodeRateControlModeFlagsKHR rate_control_modes              ;
	uint                               max_rate_control_layers         ;
	ulong                              max_bitrate                     ;
	uint                               max_quality_levels              ;
	Extent2D                           encode_input_picture_granularity;
	VideoEncodeFeedbackFlagsKHR        supported_encode_feedback_flags ;
}

struct QueryPoolVideoEncodeFeedbackCreateInfoKHR {
	StructureType               s_type               ;
	void*                       p_next               ;
	VideoEncodeFeedbackFlagsKHR encode_feedback_flags;
}

struct VideoEncodeUsageInfoKHR {
	StructureType              s_type             ;
	void*                      p_next             ;
	VideoEncodeUsageFlagsKHR   video_usage_hints  ;
	VideoEncodeContentFlagsKHR video_content_hints;
	VideoEncodeTuningModeKHR   tuning_mode        ;
}

struct VideoEncodeRateControlLayerInfoKHR {
	StructureType s_type                ;
	void*         p_next                ;
	ulong         average_bitrate       ;
	ulong         max_bitrate           ;
	uint          frame_rate_numerator  ;
	uint          frame_rate_denominator;
}

struct VideoEncodeRateControlInfoKHR {
	StructureType                       s_type                           ;
	void*                               p_next                           ;
	VideoEncodeRateControlFlagsKHR      flags                            ;
	VideoEncodeRateControlModeFlagsKHR  rate_control_mode                ;
	uint                                layer_count                      ;
	VideoEncodeRateControlLayerInfoKHR* p_layers                         ;
	uint                                virtual_buffer_size_in_ms        ;
	uint                                initial_virtual_buffer_size_in_ms;
}

struct PhysicalDeviceVideoEncodeQualityLevelInfoKHR {
	StructureType        s_type         ;
	void*                p_next         ;
	VideoProfileInfoKHR* p_video_profile;
	uint                 quality_level  ;
}

struct VideoEncodeQualityLevelPropertiesKHR {
	StructureType                      s_type                            ;
	void*                              p_next                            ;
	VideoEncodeRateControlModeFlagsKHR preferred_rate_control_mode       ;
	uint                               preferred_rate_control_layer_count;
}

struct VideoEncodeQualityLevelInfoKHR {
	StructureType s_type       ;
	void*         p_next       ;
	uint          quality_level;
}

struct VideoEncodeSessionParametersGetInfoKHR {
	StructureType             s_type                  ;
	void*                     p_next                  ;
	VideoSessionParametersKHR video_session_parameters;
}

struct VideoEncodeSessionParametersFeedbackInfoKHR {
	StructureType s_type       ;
	void*         p_next       ;
	uint          has_overrides;
}

struct PhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          fragment_shader_barycentric;
}

struct PhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
	StructureType s_type                                                ;
	void*         p_next                                                ;
	uint          tri_strip_vertex_order_independent_of_provoking_vertex;
}

struct PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
	StructureType s_type                              ;
	void*         p_next                              ;
	uint          shader_subgroup_uniform_control_flow;
}

struct PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
	StructureType s_type                                              ;
	void*         p_next                                              ;
	uint          workgroup_memory_explicit_layout                    ;
	uint          workgroup_memory_explicit_layout_scalar_block_layout;
	uint          workgroup_memory_explicit_layout8_bit_access        ;
	uint          workgroup_memory_explicit_layout16_bit_access       ;
}

struct PhysicalDeviceRayTracingMaintenance1FeaturesKHR {
	StructureType s_type                                   ;
	void*         p_next                                   ;
	uint          ray_tracing_maintenance1                 ;
	uint          ray_tracing_pipeline_trace_rays_indirect2;
}

struct TraceRaysIndirectCommand2KHR {
	DeviceAddress raygen_shader_record_address         ;
	DeviceSize    raygen_shader_record_size            ;
	DeviceAddress miss_shader_binding_table_address    ;
	DeviceSize    miss_shader_binding_table_size       ;
	DeviceSize    miss_shader_binding_table_stride     ;
	DeviceAddress hit_shader_binding_table_address     ;
	DeviceSize    hit_shader_binding_table_size        ;
	DeviceSize    hit_shader_binding_table_stride      ;
	DeviceAddress callable_shader_binding_table_address;
	DeviceSize    callable_shader_binding_table_size   ;
	DeviceSize    callable_shader_binding_table_stride ;
	uint          width                                ;
	uint          height                               ;
	uint          depth                                ;
}

struct PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          shader_maximal_reconvergence;
}

struct PhysicalDeviceRayTracingPositionFetchFeaturesKHR {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          ray_tracing_position_fetch;
}

struct PhysicalDevicePipelineBinaryFeaturesKHR {
	StructureType s_type           ;
	void*         p_next           ;
	uint          pipeline_binaries;
}

struct PhysicalDevicePipelineBinaryPropertiesKHR {
	StructureType s_type                                    ;
	void*         p_next                                    ;
	uint          pipeline_binary_internal_cache            ;
	uint          pipeline_binary_internal_cache_control    ;
	uint          pipeline_binary_prefers_internal_cache    ;
	uint          pipeline_binary_precompiled_internal_cache;
	uint          pipeline_binary_compressed_data           ;
}

struct DevicePipelineBinaryInternalCacheControlKHR {
	StructureType s_type                ;
	void*         p_next                ;
	uint          disable_internal_cache;
}

struct PipelineBinaryKeyKHR {
	StructureType                          s_type  ;
	void*                                  p_next  ;
	uint                                   key_size;
	char[MAX_PIPELINE_BINARY_KEY_SIZE_KHR] key     ;
}

struct PipelineBinaryDataKHR {
	usz   data_size;
	void* p_data   ;
}

struct PipelineBinaryKeysAndDataKHR {
	uint                   binary_count          ;
	PipelineBinaryKeyKHR*  p_pipeline_binary_keys;
	PipelineBinaryDataKHR* p_pipeline_binary_data;
}

struct PipelineCreateInfoKHR {
	StructureType s_type;
	void*         p_next;
}

struct PipelineBinaryCreateInfoKHR {
	StructureType                 s_type                ;
	void*                         p_next                ;
	PipelineBinaryKeysAndDataKHR* p_keys_and_data_info  ;
	Pipeline                      pipeline              ;
	PipelineCreateInfoKHR*        p_pipeline_create_info;
}

struct PipelineBinaryInfoKHR {
	StructureType      s_type             ;
	void*              p_next             ;
	uint               binary_count       ;
	PipelineBinaryKHR* p_pipeline_binaries;
}

struct ReleaseCapturedPipelineDataInfoKHR {
	StructureType s_type  ;
	void*         p_next  ;
	Pipeline      pipeline;
}

struct PipelineBinaryDataInfoKHR {
	StructureType     s_type         ;
	void*             p_next         ;
	PipelineBinaryKHR pipeline_binary;
}

struct PipelineBinaryHandlesInfoKHR {
	StructureType      s_type               ;
	void*              p_next               ;
	uint               pipeline_binary_count;
	PipelineBinaryKHR* p_pipeline_binaries  ;
}

struct CooperativeMatrixPropertiesKHR {
	StructureType    s_type                 ;
	void*            p_next                 ;
	uint             m_size                 ;
	uint             n_size                 ;
	uint             k_size                 ;
	ComponentTypeKHR a_type                 ;
	ComponentTypeKHR b_type                 ;
	ComponentTypeKHR c_type                 ;
	ComponentTypeKHR result_type            ;
	uint             saturating_accumulation;
	ScopeKHR         scope                  ;
}

struct PhysicalDeviceCooperativeMatrixFeaturesKHR {
	StructureType s_type                                 ;
	void*         p_next                                 ;
	uint          cooperative_matrix                     ;
	uint          cooperative_matrix_robust_buffer_access;
}

struct PhysicalDeviceCooperativeMatrixPropertiesKHR {
	StructureType    s_type                             ;
	void*            p_next                             ;
	ShaderStageFlags cooperative_matrix_supported_stages;
}

struct PhysicalDeviceComputeShaderDerivativesFeaturesKHR {
	StructureType s_type                         ;
	void*         p_next                         ;
	uint          compute_derivative_group_quads ;
	uint          compute_derivative_group_linear;
}

struct PhysicalDeviceComputeShaderDerivativesPropertiesKHR {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          mesh_and_task_shader_derivatives;
}

struct VideoDecodeAV1ProfileInfoKHR {
	StructureType   s_type            ;
	void*           p_next            ;
	VideoAV1Profile std_profile       ;
	uint            film_grain_support;
}

struct VideoDecodeAV1CapabilitiesKHR {
	StructureType s_type   ;
	void*         p_next   ;
	VideoAV1Level max_level;
}

struct VideoDecodeAV1SessionParametersCreateInfoKHR {
	StructureType           s_type               ;
	void*                   p_next               ;
	VideoAV1SequenceHeader* p_std_sequence_header;
}

struct VideoDecodeAV1PictureInfoKHR {
	StructureType                               s_type                     ;
	void*                                       p_next                     ;
	VideoDecodeAV1PictureInfo*                  p_std_picture_info         ;
	int[MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR] reference_name_slot_indices;
	uint                                        frame_header_offset        ;
	uint                                        tile_count                 ;
	uint*                                       p_tile_offsets             ;
	uint*                                       p_tile_sizes               ;
}

struct VideoDecodeAV1DpbSlotInfoKHR {
	StructureType                s_type              ;
	void*                        p_next              ;
	VideoDecodeAV1ReferenceInfo* p_std_reference_info;
}

struct PhysicalDeviceVideoEncodeAV1FeaturesKHR {
	StructureType s_type          ;
	void*         p_next          ;
	uint          video_encode_av1;
}

struct VideoEncodeAV1CapabilitiesKHR {
	StructureType                        s_type                                            ;
	void*                                p_next                                            ;
	VideoEncodeAV1CapabilityFlagsKHR     flags                                             ;
	VideoAV1Level                        max_level                                         ;
	Extent2D                             coded_picture_alignment                           ;
	Extent2D                             max_tiles                                         ;
	Extent2D                             min_tile_size                                     ;
	Extent2D                             max_tile_size                                     ;
	VideoEncodeAV1SuperblockSizeFlagsKHR superblock_sizes                                  ;
	uint                                 max_single_reference_count                        ;
	uint                                 single_reference_name_mask                        ;
	uint                                 max_unidirectional_compound_reference_count       ;
	uint                                 max_unidirectional_compound_group1_reference_count;
	uint                                 unidirectional_compound_reference_name_mask       ;
	uint                                 max_bidirectional_compound_reference_count        ;
	uint                                 max_bidirectional_compound_group1_reference_count ;
	uint                                 max_bidirectional_compound_group2_reference_count ;
	uint                                 bidirectional_compound_reference_name_mask        ;
	uint                                 max_temporal_layer_count                          ;
	uint                                 max_spatial_layer_count                           ;
	uint                                 max_operating_points                              ;
	uint                                 min_q_index                                       ;
	uint                                 max_q_index                                       ;
	uint                                 prefers_gop_remaining_frames                      ;
	uint                                 requires_gop_remaining_frames                     ;
	VideoEncodeAV1StdFlagsKHR            std_syntax_flags                                  ;
}

struct VideoEncodeAV1QIndexKHR {
	uint intra_q_index       ;
	uint predictive_q_index  ;
	uint bipredictive_q_index;
}

struct VideoEncodeAV1QualityLevelPropertiesKHR {
	StructureType                     s_type                                                      ;
	void*                             p_next                                                      ;
	VideoEncodeAV1RateControlFlagsKHR preferred_rate_control_flags                                ;
	uint                              preferred_gop_frame_count                                   ;
	uint                              preferred_key_frame_period                                  ;
	uint                              preferred_consecutive_bipredictive_frame_count              ;
	uint                              preferred_temporal_layer_count                              ;
	VideoEncodeAV1QIndexKHR           preferred_constant_q_index                                  ;
	uint                              preferred_max_single_reference_count                        ;
	uint                              preferred_single_reference_name_mask                        ;
	uint                              preferred_max_unidirectional_compound_reference_count       ;
	uint                              preferred_max_unidirectional_compound_group1_reference_count;
	uint                              preferred_unidirectional_compound_reference_name_mask       ;
	uint                              preferred_max_bidirectional_compound_reference_count        ;
	uint                              preferred_max_bidirectional_compound_group1_reference_count ;
	uint                              preferred_max_bidirectional_compound_group2_reference_count ;
	uint                              preferred_bidirectional_compound_reference_name_mask        ;
}

struct VideoEncodeAV1SessionCreateInfoKHR {
	StructureType s_type       ;
	void*         p_next       ;
	uint          use_max_level;
	VideoAV1Level max_level    ;
}

struct VideoEncodeAV1SessionParametersCreateInfoKHR {
	StructureType                     s_type                   ;
	void*                             p_next                   ;
	VideoAV1SequenceHeader*           p_std_sequence_header    ;
	VideoEncodeAV1DecoderModelInfo*   p_std_decoder_model_info ;
	uint                              std_operating_point_count;
	VideoEncodeAV1OperatingPointInfo* p_std_operating_points   ;
}

struct VideoEncodeAV1PictureInfoKHR {
	StructureType                               s_type                       ;
	void*                                       p_next                       ;
	VideoEncodeAV1PredictionModeKHR             prediction_mode              ;
	VideoEncodeAV1RateControlGroupKHR           rate_control_group           ;
	uint                                        constant_q_index             ;
	VideoEncodeAV1PictureInfo*                  p_std_picture_info           ;
	int[MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR] reference_name_slot_indices  ;
	uint                                        primary_reference_cdf_only   ;
	uint                                        generate_obu_extension_header;
}

struct VideoEncodeAV1DpbSlotInfoKHR {
	StructureType                s_type              ;
	void*                        p_next              ;
	VideoEncodeAV1ReferenceInfo* p_std_reference_info;
}

struct VideoEncodeAV1ProfileInfoKHR {
	StructureType   s_type     ;
	void*           p_next     ;
	VideoAV1Profile std_profile;
}

struct VideoEncodeAV1FrameSizeKHR {
	uint intra_frame_size       ;
	uint predictive_frame_size  ;
	uint bipredictive_frame_size;
}

struct VideoEncodeAV1GopRemainingFrameInfoKHR {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          use_gop_remaining_frames  ;
	uint          gop_remaining_intra       ;
	uint          gop_remaining_predictive  ;
	uint          gop_remaining_bipredictive;
}

struct VideoEncodeAV1RateControlInfoKHR {
	StructureType                     s_type                              ;
	void*                             p_next                              ;
	VideoEncodeAV1RateControlFlagsKHR flags                               ;
	uint                              gop_frame_count                     ;
	uint                              key_frame_period                    ;
	uint                              consecutive_bipredictive_frame_count;
	uint                              temporal_layer_count                ;
}

struct VideoEncodeAV1RateControlLayerInfoKHR {
	StructureType              s_type            ;
	void*                      p_next            ;
	uint                       use_min_q_index   ;
	VideoEncodeAV1QIndexKHR    min_q_index       ;
	uint                       use_max_q_index   ;
	VideoEncodeAV1QIndexKHR    max_q_index       ;
	uint                       use_max_frame_size;
	VideoEncodeAV1FrameSizeKHR max_frame_size    ;
}

struct PhysicalDeviceVideoMaintenance1FeaturesKHR {
	StructureType s_type            ;
	void*         p_next            ;
	uint          video_maintenance1;
}

struct VideoInlineQueryInfoKHR {
	StructureType s_type     ;
	void*         p_next     ;
	QueryPool     query_pool ;
	uint          first_query;
	uint          query_count;
}

struct CalibratedTimestampInfoKHR {
	StructureType s_type     ;
	void*         p_next     ;
	TimeDomainKHR time_domain;
}

struct SetDescriptorBufferOffsetsInfoEXT {
	StructureType    s_type          ;
	void*            p_next          ;
	ShaderStageFlags stage_flags     ;
	PipelineLayout   layout          ;
	uint             first_set       ;
	uint             set_count       ;
	uint*            p_buffer_indices;
	DeviceSize*      p_offsets       ;
}

struct BindDescriptorBufferEmbeddedSamplersInfoEXT {
	StructureType    s_type     ;
	void*            p_next     ;
	ShaderStageFlags stage_flags;
	PipelineLayout   layout     ;
	uint             set        ;
}

struct VideoEncodeQuantizationMapCapabilitiesKHR {
	StructureType s_type                     ;
	void*         p_next                     ;
	Extent2D      max_quantization_map_extent;
}

struct VideoFormatQuantizationMapPropertiesKHR {
	StructureType s_type                     ;
	void*         p_next                     ;
	Extent2D      quantization_map_texel_size;
}

struct VideoEncodeQuantizationMapInfoKHR {
	StructureType s_type                 ;
	void*         p_next                 ;
	ImageView     quantization_map       ;
	Extent2D      quantization_map_extent;
}

struct VideoEncodeQuantizationMapSessionParametersCreateInfoKHR {
	StructureType s_type                     ;
	void*         p_next                     ;
	Extent2D      quantization_map_texel_size;
}

struct PhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR {
	StructureType s_type                       ;
	void*         p_next                       ;
	uint          video_encode_quantization_map;
}

struct VideoEncodeH264QuantizationMapCapabilitiesKHR {
	StructureType s_type      ;
	void*         p_next      ;
	int           min_qp_delta;
	int           max_qp_delta;
}

struct VideoEncodeH265QuantizationMapCapabilitiesKHR {
	StructureType s_type      ;
	void*         p_next      ;
	int           min_qp_delta;
	int           max_qp_delta;
}

struct VideoFormatH265QuantizationMapPropertiesKHR {
	StructureType                  s_type              ;
	void*                          p_next              ;
	VideoEncodeH265CtbSizeFlagsKHR compatible_ctb_sizes;
}

struct VideoEncodeAV1QuantizationMapCapabilitiesKHR {
	StructureType s_type           ;
	void*         p_next           ;
	int           min_q_index_delta;
	int           max_q_index_delta;
}

struct VideoFormatAV1QuantizationMapPropertiesKHR {
	StructureType                        s_type                     ;
	void*                                p_next                     ;
	VideoEncodeAV1SuperblockSizeFlagsKHR compatible_superblock_sizes;
}

struct PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR {
	StructureType s_type                             ;
	void*         p_next                             ;
	uint          shader_relaxed_extended_instruction;
}

struct PhysicalDeviceMaintenance7FeaturesKHR {
	StructureType s_type      ;
	void*         p_next      ;
	uint          maintenance7;
}

struct PhysicalDeviceMaintenance7PropertiesKHR {
	StructureType s_type                                                            ;
	void*         p_next                                                            ;
	uint          robust_fragment_shading_rate_attachment_access                    ;
	uint          separate_depth_stencil_attachment_access                          ;
	uint          max_descriptor_set_total_uniform_buffers_dynamic                  ;
	uint          max_descriptor_set_total_storage_buffers_dynamic                  ;
	uint          max_descriptor_set_total_buffers_dynamic                          ;
	uint          max_descriptor_set_update_after_bind_total_uniform_buffers_dynamic;
	uint          max_descriptor_set_update_after_bind_total_storage_buffers_dynamic;
	uint          max_descriptor_set_update_after_bind_total_buffers_dynamic        ;
}

struct PhysicalDeviceLayeredApiPropertiesKHR {
	StructureType                        s_type     ;
	void*                                p_next     ;
	uint                                 vendor_id  ;
	uint                                 device_id  ;
	PhysicalDeviceLayeredApiKHR          layered_api;
	ichar[MAX_PHYSICAL_DEVICE_NAME_SIZE] device_name;
}

struct PhysicalDeviceLayeredApiPropertiesListKHR {
	StructureType                          s_type           ;
	void*                                  p_next           ;
	uint                                   layered_api_count;
	PhysicalDeviceLayeredApiPropertiesKHR* p_layered_apis   ;
}

struct PhysicalDeviceLayeredApiVulkanPropertiesKHR {
	StructureType             s_type    ;
	void*                     p_next    ;
	PhysicalDeviceProperties2 properties;
}

struct PhysicalDeviceMaintenance8FeaturesKHR {
	StructureType s_type      ;
	void*         p_next      ;
	uint          maintenance8;
}

struct MemoryBarrierAccessFlags3KHR {
	StructureType   s_type          ;
	void*           p_next          ;
	AccessFlags3KHR src_access_mask3;
	AccessFlags3KHR dst_access_mask3;
}

struct PhysicalDeviceVideoMaintenance2FeaturesKHR {
	StructureType s_type            ;
	void*         p_next            ;
	uint          video_maintenance2;
}

struct VideoDecodeH264InlineSessionParametersInfoKHR {
	StructureType                  s_type   ;
	void*                          p_next   ;
	VideoH264SequenceParameterSet* p_std_sps;
	VideoH264PictureParameterSet*  p_std_pps;
}

struct VideoDecodeH265InlineSessionParametersInfoKHR {
	StructureType                  s_type   ;
	void*                          p_next   ;
	VideoH265VideoParameterSet*    p_std_vps;
	VideoH265SequenceParameterSet* p_std_sps;
	VideoH265PictureParameterSet*  p_std_pps;
}

struct VideoDecodeAV1InlineSessionParametersInfoKHR {
	StructureType           s_type               ;
	void*                   p_next               ;
	VideoAV1SequenceHeader* p_std_sequence_header;
}

struct PhysicalDeviceDepthClampZeroOneFeaturesKHR {
	StructureType s_type              ;
	void*         p_next              ;
	uint          depth_clamp_zero_one;
}

struct DebugReportCallbackCreateInfoEXT {
	StructureType              s_type      ;
	void*                      p_next      ;
	DebugReportFlagsEXT        flags       ;
	ProcDebugReportCallbackEXT pfn_callback;
	void*                      p_user_data ;
}

struct PipelineRasterizationStateRasterizationOrderAMD {
	StructureType         s_type             ;
	void*                 p_next             ;
	RasterizationOrderAMD rasterization_order;
}

struct DebugMarkerObjectNameInfoEXT {
	StructureType            s_type       ;
	void*                    p_next       ;
	DebugReportObjectTypeEXT object_type  ;
	ulong                    object       ;
	ZString                  p_object_name;
}

struct DebugMarkerObjectTagInfoEXT {
	StructureType            s_type     ;
	void*                    p_next     ;
	DebugReportObjectTypeEXT object_type;
	ulong                    object     ;
	ulong                    tag_name   ;
	usz                      tag_size   ;
	void*                    p_tag      ;
}

struct DebugMarkerMarkerInfoEXT {
	StructureType s_type       ;
	void*         p_next       ;
	ZString       p_marker_name;
	float[4]      color        ;
}

struct DedicatedAllocationImageCreateInfoNV {
	StructureType s_type              ;
	void*         p_next              ;
	uint          dedicated_allocation;
}

struct DedicatedAllocationBufferCreateInfoNV {
	StructureType s_type              ;
	void*         p_next              ;
	uint          dedicated_allocation;
}

struct DedicatedAllocationMemoryAllocateInfoNV {
	StructureType s_type;
	void*         p_next;
	Image         image ;
	Buffer        buffer;
}

struct PhysicalDeviceTransformFeedbackFeaturesEXT {
	StructureType s_type            ;
	void*         p_next            ;
	uint          transform_feedback;
	uint          geometry_streams  ;
}

struct PhysicalDeviceTransformFeedbackPropertiesEXT {
	StructureType s_type                                        ;
	void*         p_next                                        ;
	uint          max_transform_feedback_streams                ;
	uint          max_transform_feedback_buffers                ;
	DeviceSize    max_transform_feedback_buffer_size            ;
	uint          max_transform_feedback_stream_data_size       ;
	uint          max_transform_feedback_buffer_data_size       ;
	uint          max_transform_feedback_buffer_data_stride     ;
	uint          transform_feedback_queries                    ;
	uint          transform_feedback_streams_lines_triangles    ;
	uint          transform_feedback_rasterization_stream_select;
	uint          transform_feedback_draw                       ;
}

struct PipelineRasterizationStateStreamCreateInfoEXT {
	StructureType                                  s_type              ;
	void*                                          p_next              ;
	PipelineRasterizationStateStreamCreateFlagsEXT flags               ;
	uint                                           rasterization_stream;
}

struct CuModuleCreateInfoNVX {
	StructureType s_type   ;
	void*         p_next   ;
	usz           data_size;
	void*         p_data   ;
}

struct CuModuleTexturingModeCreateInfoNVX {
	StructureType s_type            ;
	void*         p_next            ;
	uint          use64bit_texturing;
}

struct CuFunctionCreateInfoNVX {
	StructureType s_type ;
	void*         p_next ;
	CuModuleNVX   module_;
	ZString       p_name ;
}

struct CuLaunchInfoNVX {
	StructureType s_type          ;
	void*         p_next          ;
	CuFunctionNVX function        ;
	uint          grid_dim_x      ;
	uint          grid_dim_y      ;
	uint          grid_dim_z      ;
	uint          block_dim_x     ;
	uint          block_dim_y     ;
	uint          block_dim_z     ;
	uint          shared_mem_bytes;
	usz           param_count     ;
	void*         p_params        ;
	usz           extra_count     ;
	void*         p_extras        ;
}

struct ImageViewHandleInfoNVX {
	StructureType  s_type         ;
	void*          p_next         ;
	ImageView      image_view     ;
	DescriptorType descriptor_type;
	Sampler        sampler        ;
}

struct ImageViewAddressPropertiesNVX {
	StructureType s_type        ;
	void*         p_next        ;
	DeviceAddress device_address;
	DeviceSize    size          ;
}

struct TextureLODGatherFormatPropertiesAMD {
	StructureType s_type                              ;
	void*         p_next                              ;
	uint          supports_texture_gather_lod_bias_amd;
}

struct ShaderResourceUsageAMD {
	uint num_used_vgprs               ;
	uint num_used_sgprs               ;
	uint lds_size_per_local_work_group;
	usz  lds_usage_size_in_bytes      ;
	usz  scratch_mem_usage_in_bytes   ;
}

struct ShaderStatisticsInfoAMD {
	ShaderStageFlags       shader_stage_mask      ;
	ShaderResourceUsageAMD resource_usage         ;
	uint                   num_physical_vgprs     ;
	uint                   num_physical_sgprs     ;
	uint                   num_available_vgprs    ;
	uint                   num_available_sgprs    ;
	uint[3]                compute_work_group_size;
}

struct PhysicalDeviceCornerSampledImageFeaturesNV {
	StructureType s_type              ;
	void*         p_next              ;
	uint          corner_sampled_image;
}

struct ExternalImageFormatPropertiesNV {
	ImageFormatProperties           image_format_properties          ;
	ExternalMemoryFeatureFlagsNV    external_memory_features         ;
	ExternalMemoryHandleTypeFlagsNV export_from_imported_handle_types;
	ExternalMemoryHandleTypeFlagsNV compatible_handle_types          ;
}

struct ExternalMemoryImageCreateInfoNV {
	StructureType                   s_type      ;
	void*                           p_next      ;
	ExternalMemoryHandleTypeFlagsNV handle_types;
}

struct ExportMemoryAllocateInfoNV {
	StructureType                   s_type      ;
	void*                           p_next      ;
	ExternalMemoryHandleTypeFlagsNV handle_types;
}

struct ValidationFlagsEXT {
	StructureType       s_type                         ;
	void*               p_next                         ;
	uint                disabled_validation_check_count;
	ValidationCheckEXT* p_disabled_validation_checks   ;
}

struct ImageViewASTCDecodeModeEXT {
	StructureType s_type     ;
	void*         p_next     ;
	Format        decode_mode;
}

struct PhysicalDeviceASTCDecodeFeaturesEXT {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          decode_mode_shared_exponent;
}

struct ConditionalRenderingBeginInfoEXT {
	StructureType                s_type;
	void*                        p_next;
	Buffer                       buffer;
	DeviceSize                   offset;
	ConditionalRenderingFlagsEXT flags ;
}

struct PhysicalDeviceConditionalRenderingFeaturesEXT {
	StructureType s_type                         ;
	void*         p_next                         ;
	uint          conditional_rendering          ;
	uint          inherited_conditional_rendering;
}

struct CommandBufferInheritanceConditionalRenderingInfoEXT {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          conditional_rendering_enable;
}

struct ViewportWScalingNV {
	float xcoeff;
	float ycoeff;
}

struct PipelineViewportWScalingStateCreateInfoNV {
	StructureType       s_type                   ;
	void*               p_next                   ;
	uint                viewport_w_scaling_enable;
	uint                viewport_count           ;
	ViewportWScalingNV* p_viewport_w_scalings    ;
}

struct SurfaceCapabilities2EXT {
	StructureType            s_type                    ;
	void*                    p_next                    ;
	uint                     min_image_count           ;
	uint                     max_image_count           ;
	Extent2D                 current_extent            ;
	Extent2D                 min_image_extent          ;
	Extent2D                 max_image_extent          ;
	uint                     max_image_array_layers    ;
	SurfaceTransformFlagsKHR supported_transforms      ;
	SurfaceTransformFlagsKHR current_transform         ;
	CompositeAlphaFlagsKHR   supported_composite_alpha ;
	ImageUsageFlags          supported_usage_flags     ;
	SurfaceCounterFlagsEXT   supported_surface_counters;
}

struct DisplayPowerInfoEXT {
	StructureType        s_type     ;
	void*                p_next     ;
	DisplayPowerStateEXT power_state;
}

struct DeviceEventInfoEXT {
	StructureType      s_type      ;
	void*              p_next      ;
	DeviceEventTypeEXT device_event;
}

struct DisplayEventInfoEXT {
	StructureType       s_type       ;
	void*               p_next       ;
	DisplayEventTypeEXT display_event;
}

struct SwapchainCounterCreateInfoEXT {
	StructureType          s_type          ;
	void*                  p_next          ;
	SurfaceCounterFlagsEXT surface_counters;
}

struct RefreshCycleDurationGOOGLE {
	ulong refresh_duration;
}

struct PastPresentationTimingGOOGLE {
	uint  present_id           ;
	ulong desired_present_time ;
	ulong actual_present_time  ;
	ulong earliest_present_time;
	ulong present_margin       ;
}

struct PresentTimeGOOGLE {
	uint  present_id          ;
	ulong desired_present_time;
}

struct PresentTimesInfoGOOGLE {
	StructureType      s_type         ;
	void*              p_next         ;
	uint               swapchain_count;
	PresentTimeGOOGLE* p_times        ;
}

struct PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          per_view_position_all_components;
}

struct MultiviewPerViewAttributesInfoNVX {
	StructureType s_type                             ;
	void*         p_next                             ;
	uint          per_view_attributes                ;
	uint          per_view_attributes_position_x_only;
}

struct ViewportSwizzleNV {
	ViewportCoordinateSwizzleNV x;
	ViewportCoordinateSwizzleNV y;
	ViewportCoordinateSwizzleNV z;
	ViewportCoordinateSwizzleNV w;
}

struct PipelineViewportSwizzleStateCreateInfoNV {
	StructureType                             s_type             ;
	void*                                     p_next             ;
	PipelineViewportSwizzleStateCreateFlagsNV flags              ;
	uint                                      viewport_count     ;
	ViewportSwizzleNV*                        p_viewport_swizzles;
}

struct PhysicalDeviceDiscardRectanglePropertiesEXT {
	StructureType s_type                ;
	void*         p_next                ;
	uint          max_discard_rectangles;
}

struct PipelineDiscardRectangleStateCreateInfoEXT {
	StructureType                               s_type                 ;
	void*                                       p_next                 ;
	PipelineDiscardRectangleStateCreateFlagsEXT flags                  ;
	DiscardRectangleModeEXT                     discard_rectangle_mode ;
	uint                                        discard_rectangle_count;
	Rect2D*                                     p_discard_rectangles   ;
}

struct PhysicalDeviceConservativeRasterizationPropertiesEXT {
	StructureType s_type                                         ;
	void*         p_next                                         ;
	float         primitive_overestimation_size                  ;
	float         max_extra_primitive_overestimation_size        ;
	float         extra_primitive_overestimation_size_granularity;
	uint          primitive_underestimation                      ;
	uint          conservative_point_and_line_rasterization      ;
	uint          degenerate_triangles_rasterized                ;
	uint          degenerate_lines_rasterized                    ;
	uint          fully_covered_fragment_shader_input_variable   ;
	uint          conservative_rasterization_post_depth_coverage ;
}

struct PipelineRasterizationConservativeStateCreateInfoEXT {
	StructureType                                        s_type                             ;
	void*                                                p_next                             ;
	PipelineRasterizationConservativeStateCreateFlagsEXT flags                              ;
	ConservativeRasterizationModeEXT                     conservative_rasterization_mode    ;
	float                                                extra_primitive_overestimation_size;
}

struct PhysicalDeviceDepthClipEnableFeaturesEXT {
	StructureType s_type           ;
	void*         p_next           ;
	uint          depth_clip_enable;
}

struct PipelineRasterizationDepthClipStateCreateInfoEXT {
	StructureType                                     s_type           ;
	void*                                             p_next           ;
	PipelineRasterizationDepthClipStateCreateFlagsEXT flags            ;
	uint                                              depth_clip_enable;
}

struct XYColorEXT {
	float x;
	float y;
}

struct HdrMetadataEXT {
	StructureType s_type                       ;
	void*         p_next                       ;
	XYColorEXT    display_primary_red          ;
	XYColorEXT    display_primary_green        ;
	XYColorEXT    display_primary_blue         ;
	XYColorEXT    white_point                  ;
	float         max_luminance                ;
	float         min_luminance                ;
	float         max_content_light_level      ;
	float         max_frame_average_light_level;
}

struct PhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          relaxed_line_rasterization;
}

struct DebugUtilsLabelEXT {
	StructureType s_type      ;
	void*         p_next      ;
	ZString       p_label_name;
	float[4]      color       ;
}

struct DebugUtilsObjectNameInfoEXT {
	StructureType s_type       ;
	void*         p_next       ;
	ObjectType    object_type  ;
	ulong         object_handle;
	ZString       p_object_name;
}

struct DebugUtilsMessengerCallbackDataEXT {
	StructureType                           s_type             ;
	void*                                   p_next             ;
	DebugUtilsMessengerCallbackDataFlagsEXT flags              ;
	ZString                                 p_message_id_name  ;
	int                                     message_id_number  ;
	ZString                                 p_message          ;
	uint                                    queue_label_count  ;
	DebugUtilsLabelEXT*                     p_queue_labels     ;
	uint                                    cmd_buf_label_count;
	DebugUtilsLabelEXT*                     p_cmd_buf_labels   ;
	uint                                    object_count       ;
	DebugUtilsObjectNameInfoEXT*            p_objects          ;
}

struct DebugUtilsMessengerCreateInfoEXT {
	StructureType                      s_type           ;
	void*                              p_next           ;
	DebugUtilsMessengerCreateFlagsEXT  flags            ;
	DebugUtilsMessageSeverityFlagsEXT  message_severity ;
	DebugUtilsMessageTypeFlagsEXT      message_type     ;
	ProcDebugUtilsMessengerCallbackEXT pfn_user_callback;
	void*                              p_user_data      ;
}

struct DebugUtilsObjectTagInfoEXT {
	StructureType s_type       ;
	void*         p_next       ;
	ObjectType    object_type  ;
	ulong         object_handle;
	ulong         tag_name     ;
	usz           tag_size     ;
	void*         p_tag        ;
}

struct AttachmentSampleCountInfoAMD {
	StructureType     s_type                          ;
	void*             p_next                          ;
	uint              color_attachment_count          ;
	SampleCountFlags* p_color_attachment_samples      ;
	SampleCountFlags  depth_stencil_attachment_samples;
}

struct SampleLocationEXT {
	float x;
	float y;
}

struct SampleLocationsInfoEXT {
	StructureType      s_type                    ;
	void*              p_next                    ;
	SampleCountFlags   sample_locations_per_pixel;
	Extent2D           sample_location_grid_size ;
	uint               sample_locations_count    ;
	SampleLocationEXT* p_sample_locations        ;
}

struct AttachmentSampleLocationsEXT {
	uint                   attachment_index     ;
	SampleLocationsInfoEXT sample_locations_info;
}

struct SubpassSampleLocationsEXT {
	uint                   subpass_index        ;
	SampleLocationsInfoEXT sample_locations_info;
}

struct RenderPassSampleLocationsBeginInfoEXT {
	StructureType                 s_type                                   ;
	void*                         p_next                                   ;
	uint                          attachment_initial_sample_locations_count;
	AttachmentSampleLocationsEXT* p_attachment_initial_sample_locations    ;
	uint                          post_subpass_sample_locations_count      ;
	SubpassSampleLocationsEXT*    p_post_subpass_sample_locations          ;
}

struct PipelineSampleLocationsStateCreateInfoEXT {
	StructureType          s_type                 ;
	void*                  p_next                 ;
	uint                   sample_locations_enable;
	SampleLocationsInfoEXT sample_locations_info  ;
}

struct PhysicalDeviceSampleLocationsPropertiesEXT {
	StructureType    s_type                          ;
	void*            p_next                          ;
	SampleCountFlags sample_location_sample_counts   ;
	Extent2D         max_sample_location_grid_size   ;
	float[2]         sample_location_coordinate_range;
	uint             sample_location_sub_pixel_bits  ;
	uint             variable_sample_locations       ;
}

struct MultisamplePropertiesEXT {
	StructureType s_type                       ;
	void*         p_next                       ;
	Extent2D      max_sample_location_grid_size;
}

struct PhysicalDeviceBlendOperationAdvancedFeaturesEXT {
	StructureType s_type                            ;
	void*         p_next                            ;
	uint          advanced_blend_coherent_operations;
}

struct PhysicalDeviceBlendOperationAdvancedPropertiesEXT {
	StructureType s_type                                    ;
	void*         p_next                                    ;
	uint          advanced_blend_max_color_attachments      ;
	uint          advanced_blend_independent_blend          ;
	uint          advanced_blend_non_premultiplied_src_color;
	uint          advanced_blend_non_premultiplied_dst_color;
	uint          advanced_blend_correlated_overlap         ;
	uint          advanced_blend_all_operations             ;
}

struct PipelineColorBlendAdvancedStateCreateInfoEXT {
	StructureType   s_type           ;
	void*           p_next           ;
	uint            src_premultiplied;
	uint            dst_premultiplied;
	BlendOverlapEXT blend_overlap    ;
}

struct PipelineCoverageToColorStateCreateInfoNV {
	StructureType                             s_type                    ;
	void*                                     p_next                    ;
	PipelineCoverageToColorStateCreateFlagsNV flags                     ;
	uint                                      coverage_to_color_enable  ;
	uint                                      coverage_to_color_location;
}

struct PipelineCoverageModulationStateCreateInfoNV {
	StructureType                                s_type                          ;
	void*                                        p_next                          ;
	PipelineCoverageModulationStateCreateFlagsNV flags                           ;
	CoverageModulationModeNV                     coverage_modulation_mode        ;
	uint                                         coverage_modulation_table_enable;
	uint                                         coverage_modulation_table_count ;
	float*                                       p_coverage_modulation_table     ;
}

struct PhysicalDeviceShaderSMBuiltinsPropertiesNV {
	StructureType s_type             ;
	void*         p_next             ;
	uint          shader_sm_count    ;
	uint          shader_warps_per_sm;
}

struct PhysicalDeviceShaderSMBuiltinsFeaturesNV {
	StructureType s_type            ;
	void*         p_next            ;
	uint          shader_sm_builtins;
}

struct DrmFormatModifierPropertiesEXT {
	ulong              drm_format_modifier                ;
	uint               drm_format_modifier_plane_count    ;
	FormatFeatureFlags drm_format_modifier_tiling_features;
}

struct DrmFormatModifierPropertiesListEXT {
	StructureType                   s_type                          ;
	void*                           p_next                          ;
	uint                            drm_format_modifier_count       ;
	DrmFormatModifierPropertiesEXT* p_drm_format_modifier_properties;
}

struct PhysicalDeviceImageDrmFormatModifierInfoEXT {
	StructureType s_type                  ;
	void*         p_next                  ;
	ulong         drm_format_modifier     ;
	SharingMode   sharing_mode            ;
	uint          queue_family_index_count;
	uint*         p_queue_family_indices  ;
}

struct ImageDrmFormatModifierListCreateInfoEXT {
	StructureType s_type                   ;
	void*         p_next                   ;
	uint          drm_format_modifier_count;
	ulong*        p_drm_format_modifiers   ;
}

struct ImageDrmFormatModifierExplicitCreateInfoEXT {
	StructureType      s_type                         ;
	void*              p_next                         ;
	ulong              drm_format_modifier            ;
	uint               drm_format_modifier_plane_count;
	SubresourceLayout* p_plane_layouts                ;
}

struct ImageDrmFormatModifierPropertiesEXT {
	StructureType s_type             ;
	void*         p_next             ;
	ulong         drm_format_modifier;
}

struct DrmFormatModifierProperties2EXT {
	ulong               drm_format_modifier                ;
	uint                drm_format_modifier_plane_count    ;
	FormatFeatureFlags2 drm_format_modifier_tiling_features;
}

struct DrmFormatModifierPropertiesList2EXT {
	StructureType                    s_type                          ;
	void*                            p_next                          ;
	uint                             drm_format_modifier_count       ;
	DrmFormatModifierProperties2EXT* p_drm_format_modifier_properties;
}

struct ValidationCacheCreateInfoEXT {
	StructureType                 s_type           ;
	void*                         p_next           ;
	ValidationCacheCreateFlagsEXT flags            ;
	usz                           initial_data_size;
	void*                         p_initial_data   ;
}

struct ShaderModuleValidationCacheCreateInfoEXT {
	StructureType      s_type          ;
	void*              p_next          ;
	ValidationCacheEXT validation_cache;
}

struct ShadingRatePaletteNV {
	uint                       shading_rate_palette_entry_count;
	ShadingRatePaletteEntryNV* p_shading_rate_palette_entries  ;
}

struct PipelineViewportShadingRateImageStateCreateInfoNV {
	StructureType         s_type                   ;
	void*                 p_next                   ;
	uint                  shading_rate_image_enable;
	uint                  viewport_count           ;
	ShadingRatePaletteNV* p_shading_rate_palettes  ;
}

struct PhysicalDeviceShadingRateImageFeaturesNV {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          shading_rate_image              ;
	uint          shading_rate_coarse_sample_order;
}

struct PhysicalDeviceShadingRateImagePropertiesNV {
	StructureType s_type                         ;
	void*         p_next                         ;
	Extent2D      shading_rate_texel_size        ;
	uint          shading_rate_palette_size      ;
	uint          shading_rate_max_coarse_samples;
}

struct CoarseSampleLocationNV {
	uint pixel_x;
	uint pixel_y;
	uint sample ;
}

struct CoarseSampleOrderCustomNV {
	ShadingRatePaletteEntryNV shading_rate         ;
	uint                      sample_count         ;
	uint                      sample_location_count;
	CoarseSampleLocationNV*   p_sample_locations   ;
}

struct PipelineViewportCoarseSampleOrderStateCreateInfoNV {
	StructureType              s_type                   ;
	void*                      p_next                   ;
	CoarseSampleOrderTypeNV    sample_order_type        ;
	uint                       custom_sample_order_count;
	CoarseSampleOrderCustomNV* p_custom_sample_orders   ;
}

struct RayTracingShaderGroupCreateInfoNV {
	StructureType                s_type             ;
	void*                        p_next             ;
	RayTracingShaderGroupTypeKHR type               ;
	uint                         general_shader     ;
	uint                         closest_hit_shader ;
	uint                         any_hit_shader     ;
	uint                         intersection_shader;
}

struct RayTracingPipelineCreateInfoNV {
	StructureType                      s_type              ;
	void*                              p_next              ;
	PipelineCreateFlags                flags               ;
	uint                               stage_count         ;
	PipelineShaderStageCreateInfo*     p_stages            ;
	uint                               group_count         ;
	RayTracingShaderGroupCreateInfoNV* p_groups            ;
	uint                               max_recursion_depth ;
	PipelineLayout                     layout              ;
	Pipeline                           base_pipeline_handle;
	int                                base_pipeline_index ;
}

struct GeometryTrianglesNV {
	StructureType s_type          ;
	void*         p_next          ;
	Buffer        vertex_data     ;
	DeviceSize    vertex_offset   ;
	uint          vertex_count    ;
	DeviceSize    vertex_stride   ;
	Format        vertex_format   ;
	Buffer        index_data      ;
	DeviceSize    index_offset    ;
	uint          index_count     ;
	IndexType     index_type      ;
	Buffer        transform_data  ;
	DeviceSize    transform_offset;
}

struct GeometryAABBNV {
	StructureType s_type    ;
	void*         p_next    ;
	Buffer        aabb_data ;
	uint          num_aab_bs;
	uint          stride    ;
	DeviceSize    offset    ;
}

struct GeometryDataNV {
	GeometryTrianglesNV triangles;
	GeometryAABBNV      aabbs    ;
}

struct GeometryNV {
	StructureType    s_type       ;
	void*            p_next       ;
	GeometryTypeKHR  geometry_type;
	GeometryDataNV   geometry     ;
	GeometryFlagsKHR flags        ;
}

struct AccelerationStructureInfoNV {
	StructureType                     s_type        ;
	void*                             p_next        ;
	AccelerationStructureTypeNV       type          ;
	BuildAccelerationStructureFlagsNV flags         ;
	uint                              instance_count;
	uint                              geometry_count;
	GeometryNV*                       p_geometries  ;
}

struct AccelerationStructureCreateInfoNV {
	StructureType               s_type        ;
	void*                       p_next        ;
	DeviceSize                  compacted_size;
	AccelerationStructureInfoNV info          ;
}

struct BindAccelerationStructureMemoryInfoNV {
	StructureType           s_type                ;
	void*                   p_next                ;
	AccelerationStructureNV acceleration_structure;
	DeviceMemory            memory                ;
	DeviceSize              memory_offset         ;
	uint                    device_index_count    ;
	uint*                   p_device_indices      ;
}

struct WriteDescriptorSetAccelerationStructureNV {
	StructureType            s_type                      ;
	void*                    p_next                      ;
	uint                     acceleration_structure_count;
	AccelerationStructureNV* p_acceleration_structures   ;
}

struct AccelerationStructureMemoryRequirementsInfoNV {
	StructureType                                 s_type                ;
	void*                                         p_next                ;
	AccelerationStructureMemoryRequirementsTypeNV type                  ;
	AccelerationStructureNV                       acceleration_structure;
}

struct PhysicalDeviceRayTracingPropertiesNV {
	StructureType s_type                                    ;
	void*         p_next                                    ;
	uint          shader_group_handle_size                  ;
	uint          max_recursion_depth                       ;
	uint          max_shader_group_stride                   ;
	uint          shader_group_base_alignment               ;
	ulong         max_geometry_count                        ;
	ulong         max_instance_count                        ;
	ulong         max_triangle_count                        ;
	uint          max_descriptor_set_acceleration_structures;
}

struct TransformMatrixKHR {
	float[3][4] matrix;
}

struct AabbPositionsKHR {
	float min_x;
	float min_y;
	float min_z;
	float max_x;
	float max_y;
	float max_z;
}

struct AccelerationStructureInstanceKHR {
    TransformMatrixKHR transform;
bitstruct : ulong {
    uint instance_custom_index: 0..23;
    uint mask: 24..31;
    uint instance_shader_binding_table_record_offset: 32..55;
    uint flags: 56..63; /* Warning: GeometryInstanceFlagsKHR converted to uint to comply to C3 standard */
}
    ulong acceleration_structure_reference;
}

struct PhysicalDeviceRepresentativeFragmentTestFeaturesNV {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          representative_fragment_test;
}

struct PipelineRepresentativeFragmentTestStateCreateInfoNV {
	StructureType s_type                             ;
	void*         p_next                             ;
	uint          representative_fragment_test_enable;
}

struct PhysicalDeviceImageViewImageFormatInfoEXT {
	StructureType s_type         ;
	void*         p_next         ;
	ImageViewType image_view_type;
}

struct FilterCubicImageViewImageFormatPropertiesEXT {
	StructureType s_type             ;
	void*         p_next             ;
	uint          filter_cubic       ;
	uint          filter_cubic_minmax;
}

struct ImportMemoryHostPointerInfoEXT {
	StructureType                 s_type        ;
	void*                         p_next        ;
	ExternalMemoryHandleTypeFlags handle_type   ;
	void*                         p_host_pointer;
}

struct MemoryHostPointerPropertiesEXT {
	StructureType s_type          ;
	void*         p_next          ;
	uint          memory_type_bits;
}

struct PhysicalDeviceExternalMemoryHostPropertiesEXT {
	StructureType s_type                             ;
	void*         p_next                             ;
	DeviceSize    min_imported_host_pointer_alignment;
}

struct PipelineCompilerControlCreateInfoAMD {
	StructureType                   s_type                ;
	void*                           p_next                ;
	PipelineCompilerControlFlagsAMD compiler_control_flags;
}

struct PhysicalDeviceShaderCorePropertiesAMD {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          shader_engine_count           ;
	uint          shader_arrays_per_engine_count;
	uint          compute_units_per_shader_array;
	uint          simd_per_compute_unit         ;
	uint          wavefronts_per_simd           ;
	uint          wavefront_size                ;
	uint          sgprs_per_simd                ;
	uint          min_sgpr_allocation           ;
	uint          max_sgpr_allocation           ;
	uint          sgpr_allocation_granularity   ;
	uint          vgprs_per_simd                ;
	uint          min_vgpr_allocation           ;
	uint          max_vgpr_allocation           ;
	uint          vgpr_allocation_granularity   ;
}

struct DeviceMemoryOverallocationCreateInfoAMD {
	StructureType                   s_type                 ;
	void*                           p_next                 ;
	MemoryOverallocationBehaviorAMD overallocation_behavior;
}

struct PhysicalDeviceVertexAttributeDivisorPropertiesEXT {
	StructureType s_type                   ;
	void*         p_next                   ;
	uint          max_vertex_attrib_divisor;
}

struct PhysicalDeviceMeshShaderFeaturesNV {
	StructureType s_type     ;
	void*         p_next     ;
	uint          task_shader;
	uint          mesh_shader;
}

struct PhysicalDeviceMeshShaderPropertiesNV {
	StructureType s_type                               ;
	void*         p_next                               ;
	uint          max_draw_mesh_tasks_count            ;
	uint          max_task_work_group_invocations      ;
	uint[3]       max_task_work_group_size             ;
	uint          max_task_total_memory_size           ;
	uint          max_task_output_count                ;
	uint          max_mesh_work_group_invocations      ;
	uint[3]       max_mesh_work_group_size             ;
	uint          max_mesh_total_memory_size           ;
	uint          max_mesh_output_vertices             ;
	uint          max_mesh_output_primitives           ;
	uint          max_mesh_multiview_view_count        ;
	uint          mesh_output_per_vertex_granularity   ;
	uint          mesh_output_per_primitive_granularity;
}

struct DrawMeshTasksIndirectCommandNV {
	uint task_count;
	uint first_task;
}

struct PhysicalDeviceShaderImageFootprintFeaturesNV {
	StructureType s_type         ;
	void*         p_next         ;
	uint          image_footprint;
}

struct PipelineViewportExclusiveScissorStateCreateInfoNV {
	StructureType s_type                 ;
	void*         p_next                 ;
	uint          exclusive_scissor_count;
	Rect2D*       p_exclusive_scissors   ;
}

struct PhysicalDeviceExclusiveScissorFeaturesNV {
	StructureType s_type           ;
	void*         p_next           ;
	uint          exclusive_scissor;
}

struct QueueFamilyCheckpointPropertiesNV {
	StructureType      s_type                         ;
	void*              p_next                         ;
	PipelineStageFlags checkpoint_execution_stage_mask;
}

struct CheckpointDataNV {
	StructureType      s_type             ;
	void*              p_next             ;
	PipelineStageFlags stage              ;
	void*              p_checkpoint_marker;
}

struct QueueFamilyCheckpointProperties2NV {
	StructureType       s_type                         ;
	void*               p_next                         ;
	PipelineStageFlags2 checkpoint_execution_stage_mask;
}

struct CheckpointData2NV {
	StructureType       s_type             ;
	void*               p_next             ;
	PipelineStageFlags2 stage              ;
	void*               p_checkpoint_marker;
}

struct PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
	StructureType s_type                   ;
	void*         p_next                   ;
	uint          shader_integer_functions2;
}

union PerformanceValueDataINTEL {
	uint    value32     ;
	ulong   value64     ;
	float   value_float ;
	uint    value_bool  ;
	ZString value_string;
}

struct PerformanceValueINTEL {
	PerformanceValueTypeINTEL type;
	PerformanceValueDataINTEL data;
}

struct InitializePerformanceApiInfoINTEL {
	StructureType s_type     ;
	void*         p_next     ;
	void*         p_user_data;
}

struct QueryPoolPerformanceQueryCreateInfoINTEL {
	StructureType              s_type                       ;
	void*                      p_next                       ;
	QueryPoolSamplingModeINTEL performance_counters_sampling;
}

struct PerformanceMarkerInfoINTEL {
	StructureType s_type;
	void*         p_next;
	ulong         marker;
}

struct PerformanceStreamMarkerInfoINTEL {
	StructureType s_type;
	void*         p_next;
	uint          marker;
}

struct PerformanceOverrideInfoINTEL {
	StructureType                s_type   ;
	void*                        p_next   ;
	PerformanceOverrideTypeINTEL type     ;
	uint                         enable   ;
	ulong                        parameter;
}

struct PerformanceConfigurationAcquireInfoINTEL {
	StructureType                     s_type;
	void*                             p_next;
	PerformanceConfigurationTypeINTEL type  ;
}

struct PhysicalDevicePCIBusInfoPropertiesEXT {
	StructureType s_type      ;
	void*         p_next      ;
	uint          pci_domain  ;
	uint          pci_bus     ;
	uint          pci_device  ;
	uint          pci_function;
}

struct DisplayNativeHdrSurfaceCapabilitiesAMD {
	StructureType s_type               ;
	void*         p_next               ;
	uint          local_dimming_support;
}

struct SwapchainDisplayNativeHdrCreateInfoAMD {
	StructureType s_type              ;
	void*         p_next              ;
	uint          local_dimming_enable;
}

struct PhysicalDeviceFragmentDensityMapFeaturesEXT {
	StructureType s_type                                    ;
	void*         p_next                                    ;
	uint          fragment_density_map                      ;
	uint          fragment_density_map_dynamic              ;
	uint          fragment_density_map_non_subsampled_images;
}

struct PhysicalDeviceFragmentDensityMapPropertiesEXT {
	StructureType s_type                         ;
	void*         p_next                         ;
	Extent2D      min_fragment_density_texel_size;
	Extent2D      max_fragment_density_texel_size;
	uint          fragment_density_invocations   ;
}

struct RenderPassFragmentDensityMapCreateInfoEXT {
	StructureType       s_type                         ;
	void*               p_next                         ;
	AttachmentReference fragment_density_map_attachment;
}

struct RenderingFragmentDensityMapAttachmentInfoEXT {
	StructureType s_type      ;
	void*         p_next      ;
	ImageView     image_view  ;
	ImageLayout   image_layout;
}

struct PhysicalDeviceShaderCoreProperties2AMD {
	StructureType                s_type                   ;
	void*                        p_next                   ;
	ShaderCorePropertiesFlagsAMD shader_core_features     ;
	uint                         active_compute_unit_count;
}

struct PhysicalDeviceCoherentMemoryFeaturesAMD {
	StructureType s_type                ;
	void*         p_next                ;
	uint          device_coherent_memory;
}

struct PhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          shader_image_int64_atomics;
	uint          sparse_image_int64_atomics;
}

struct PhysicalDeviceMemoryBudgetPropertiesEXT {
	StructureType                s_type     ;
	void*                        p_next     ;
	DeviceSize[MAX_MEMORY_HEAPS] heap_budget;
	DeviceSize[MAX_MEMORY_HEAPS] heap_usage ;
}

struct PhysicalDeviceMemoryPriorityFeaturesEXT {
	StructureType s_type         ;
	void*         p_next         ;
	uint          memory_priority;
}

struct MemoryPriorityAllocateInfoEXT {
	StructureType s_type  ;
	void*         p_next  ;
	float         priority;
}

struct PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
	StructureType s_type                             ;
	void*         p_next                             ;
	uint          dedicated_allocation_image_aliasing;
}

struct PhysicalDeviceBufferDeviceAddressFeaturesEXT {
	StructureType s_type                              ;
	void*         p_next                              ;
	uint          buffer_device_address               ;
	uint          buffer_device_address_capture_replay;
	uint          buffer_device_address_multi_device  ;
}

struct BufferDeviceAddressCreateInfoEXT {
	StructureType s_type        ;
	void*         p_next        ;
	DeviceAddress device_address;
}

struct ValidationFeaturesEXT {
	StructureType                s_type                           ;
	void*                        p_next                           ;
	uint                         enabled_validation_feature_count ;
	ValidationFeatureEnableEXT*  p_enabled_validation_features    ;
	uint                         disabled_validation_feature_count;
	ValidationFeatureDisableEXT* p_disabled_validation_features   ;
}

struct CooperativeMatrixPropertiesNV {
	StructureType   s_type;
	void*           p_next;
	uint            m_size;
	uint            n_size;
	uint            k_size;
	ComponentTypeNV a_type;
	ComponentTypeNV b_type;
	ComponentTypeNV c_type;
	ComponentTypeNV d_type;
	ScopeNV         scope ;
}

struct PhysicalDeviceCooperativeMatrixFeaturesNV {
	StructureType s_type                                 ;
	void*         p_next                                 ;
	uint          cooperative_matrix                     ;
	uint          cooperative_matrix_robust_buffer_access;
}

struct PhysicalDeviceCooperativeMatrixPropertiesNV {
	StructureType    s_type                             ;
	void*            p_next                             ;
	ShaderStageFlags cooperative_matrix_supported_stages;
}

struct PhysicalDeviceCoverageReductionModeFeaturesNV {
	StructureType s_type                 ;
	void*         p_next                 ;
	uint          coverage_reduction_mode;
}

struct PipelineCoverageReductionStateCreateInfoNV {
	StructureType                               s_type                 ;
	void*                                       p_next                 ;
	PipelineCoverageReductionStateCreateFlagsNV flags                  ;
	CoverageReductionModeNV                     coverage_reduction_mode;
}

struct FramebufferMixedSamplesCombinationNV {
	StructureType           s_type                 ;
	void*                   p_next                 ;
	CoverageReductionModeNV coverage_reduction_mode;
	SampleCountFlags        rasterization_samples  ;
	SampleCountFlags        depth_stencil_samples  ;
	SampleCountFlags        color_samples          ;
}

struct PhysicalDeviceFragmentShaderInterlockFeaturesEXT {
	StructureType s_type                                ;
	void*         p_next                                ;
	uint          fragment_shader_sample_interlock      ;
	uint          fragment_shader_pixel_interlock       ;
	uint          fragment_shader_shading_rate_interlock;
}

struct PhysicalDeviceYcbcrImageArraysFeaturesEXT {
	StructureType s_type            ;
	void*         p_next            ;
	uint          ycbcr_image_arrays;
}

struct PhysicalDeviceProvokingVertexFeaturesEXT {
	StructureType s_type                                       ;
	void*         p_next                                       ;
	uint          provoking_vertex_last                        ;
	uint          transform_feedback_preserves_provoking_vertex;
}

struct PhysicalDeviceProvokingVertexPropertiesEXT {
	StructureType s_type                                                    ;
	void*         p_next                                                    ;
	uint          provoking_vertex_mode_per_pipeline                        ;
	uint          transform_feedback_preserves_triangle_fan_provoking_vertex;
}

struct PipelineRasterizationProvokingVertexStateCreateInfoEXT {
	StructureType          s_type               ;
	void*                  p_next               ;
	ProvokingVertexModeEXT provoking_vertex_mode;
}

struct HeadlessSurfaceCreateInfoEXT {
	StructureType                 s_type;
	void*                         p_next;
	HeadlessSurfaceCreateFlagsEXT flags ;
}

struct PhysicalDeviceShaderAtomicFloatFeaturesEXT {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          shader_buffer_float32_atomics   ;
	uint          shader_buffer_float32_atomic_add;
	uint          shader_buffer_float64_atomics   ;
	uint          shader_buffer_float64_atomic_add;
	uint          shader_shared_float32_atomics   ;
	uint          shader_shared_float32_atomic_add;
	uint          shader_shared_float64_atomics   ;
	uint          shader_shared_float64_atomic_add;
	uint          shader_image_float32_atomics    ;
	uint          shader_image_float32_atomic_add ;
	uint          sparse_image_float32_atomics    ;
	uint          sparse_image_float32_atomic_add ;
}

struct PhysicalDeviceExtendedDynamicStateFeaturesEXT {
	StructureType s_type                ;
	void*         p_next                ;
	uint          extended_dynamic_state;
}

struct PhysicalDeviceMapMemoryPlacedFeaturesEXT {
	StructureType s_type                 ;
	void*         p_next                 ;
	uint          memory_map_placed      ;
	uint          memory_map_range_placed;
	uint          memory_unmap_reserve   ;
}

struct PhysicalDeviceMapMemoryPlacedPropertiesEXT {
	StructureType s_type                         ;
	void*         p_next                         ;
	DeviceSize    min_placed_memory_map_alignment;
}

struct MemoryMapPlacedInfoEXT {
	StructureType s_type          ;
	void*         p_next          ;
	void*         p_placed_address;
}

struct PhysicalDeviceShaderAtomicFloat2FeaturesEXT {
	StructureType s_type                              ;
	void*         p_next                              ;
	uint          shader_buffer_float16_atomics       ;
	uint          shader_buffer_float16_atomic_add    ;
	uint          shader_buffer_float16_atomic_min_max;
	uint          shader_buffer_float32_atomic_min_max;
	uint          shader_buffer_float64_atomic_min_max;
	uint          shader_shared_float16_atomics       ;
	uint          shader_shared_float16_atomic_add    ;
	uint          shader_shared_float16_atomic_min_max;
	uint          shader_shared_float32_atomic_min_max;
	uint          shader_shared_float64_atomic_min_max;
	uint          shader_image_float32_atomic_min_max ;
	uint          sparse_image_float32_atomic_min_max ;
}

struct SurfacePresentModeEXT {
	StructureType  s_type      ;
	void*          p_next      ;
	PresentModeKHR present_mode;
}

struct SurfacePresentScalingCapabilitiesEXT {
	StructureType          s_type                     ;
	void*                  p_next                     ;
	PresentScalingFlagsEXT supported_present_scaling  ;
	PresentGravityFlagsEXT supported_present_gravity_x;
	PresentGravityFlagsEXT supported_present_gravity_y;
	Extent2D               min_scaled_image_extent    ;
	Extent2D               max_scaled_image_extent    ;
}

struct SurfacePresentModeCompatibilityEXT {
	StructureType   s_type            ;
	void*           p_next            ;
	uint            present_mode_count;
	PresentModeKHR* p_present_modes   ;
}

struct PhysicalDeviceSwapchainMaintenance1FeaturesEXT {
	StructureType s_type                ;
	void*         p_next                ;
	uint          swapchain_maintenance1;
}

struct SwapchainPresentFenceInfoEXT {
	StructureType s_type         ;
	void*         p_next         ;
	uint          swapchain_count;
	Fence*        p_fences       ;
}

struct SwapchainPresentModesCreateInfoEXT {
	StructureType   s_type            ;
	void*           p_next            ;
	uint            present_mode_count;
	PresentModeKHR* p_present_modes   ;
}

struct SwapchainPresentModeInfoEXT {
	StructureType   s_type         ;
	void*           p_next         ;
	uint            swapchain_count;
	PresentModeKHR* p_present_modes;
}

struct SwapchainPresentScalingCreateInfoEXT {
	StructureType          s_type           ;
	void*                  p_next           ;
	PresentScalingFlagsEXT scaling_behavior ;
	PresentGravityFlagsEXT present_gravity_x;
	PresentGravityFlagsEXT present_gravity_y;
}

struct ReleaseSwapchainImagesInfoEXT {
	StructureType s_type           ;
	void*         p_next           ;
	SwapchainKHR  swapchain        ;
	uint          image_index_count;
	uint*         p_image_indices  ;
}

struct PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
	StructureType s_type                                       ;
	void*         p_next                                       ;
	uint          max_graphics_shader_group_count              ;
	uint          max_indirect_sequence_count                  ;
	uint          max_indirect_commands_token_count            ;
	uint          max_indirect_commands_stream_count           ;
	uint          max_indirect_commands_token_offset           ;
	uint          max_indirect_commands_stream_stride          ;
	uint          min_sequences_count_buffer_offset_alignment  ;
	uint          min_sequences_index_buffer_offset_alignment  ;
	uint          min_indirect_commands_buffer_offset_alignment;
}

struct PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
	StructureType s_type                   ;
	void*         p_next                   ;
	uint          device_generated_commands;
}

struct GraphicsShaderGroupCreateInfoNV {
	StructureType                        s_type              ;
	void*                                p_next              ;
	uint                                 stage_count         ;
	PipelineShaderStageCreateInfo*       p_stages            ;
	PipelineVertexInputStateCreateInfo*  p_vertex_input_state;
	PipelineTessellationStateCreateInfo* p_tessellation_state;
}

struct GraphicsPipelineShaderGroupsCreateInfoNV {
	StructureType                    s_type        ;
	void*                            p_next        ;
	uint                             group_count   ;
	GraphicsShaderGroupCreateInfoNV* p_groups      ;
	uint                             pipeline_count;
	Pipeline*                        p_pipelines   ;
}

struct BindShaderGroupIndirectCommandNV {
	uint group_index;
}

struct BindIndexBufferIndirectCommandNV {
	DeviceAddress buffer_address;
	uint          size          ;
	IndexType     index_type    ;
}

struct BindVertexBufferIndirectCommandNV {
	DeviceAddress buffer_address;
	uint          size          ;
	uint          stride        ;
}

struct SetStateFlagsIndirectCommandNV {
	uint data;
}

struct IndirectCommandsStreamNV {
	Buffer     buffer;
	DeviceSize offset;
}

struct IndirectCommandsLayoutTokenNV {
	StructureType               s_type                         ;
	void*                       p_next                         ;
	IndirectCommandsTokenTypeNV token_type                     ;
	uint                        stream                         ;
	uint                        offset                         ;
	uint                        vertex_binding_unit            ;
	uint                        vertex_dynamic_stride          ;
	PipelineLayout              pushconstant_pipeline_layout   ;
	ShaderStageFlags            pushconstant_shader_stage_flags;
	uint                        pushconstant_offset            ;
	uint                        pushconstant_size              ;
	IndirectStateFlagsNV        indirect_state_flags           ;
	uint                        index_type_count               ;
	IndexType*                  p_index_types                  ;
	uint*                       p_index_type_values            ;
}

struct IndirectCommandsLayoutCreateInfoNV {
	StructureType                      s_type             ;
	void*                              p_next             ;
	IndirectCommandsLayoutUsageFlagsNV flags              ;
	PipelineBindPoint                  pipeline_bind_point;
	uint                               token_count        ;
	IndirectCommandsLayoutTokenNV*     p_tokens           ;
	uint                               stream_count       ;
	uint*                              p_stream_strides   ;
}

struct GeneratedCommandsInfoNV {
	StructureType             s_type                  ;
	void*                     p_next                  ;
	PipelineBindPoint         pipeline_bind_point     ;
	Pipeline                  pipeline                ;
	IndirectCommandsLayoutNV  indirect_commands_layout;
	uint                      stream_count            ;
	IndirectCommandsStreamNV* p_streams               ;
	uint                      sequences_count         ;
	Buffer                    preprocess_buffer       ;
	DeviceSize                preprocess_offset       ;
	DeviceSize                preprocess_size         ;
	Buffer                    sequences_count_buffer  ;
	DeviceSize                sequences_count_offset  ;
	Buffer                    sequences_index_buffer  ;
	DeviceSize                sequences_index_offset  ;
}

struct GeneratedCommandsMemoryRequirementsInfoNV {
	StructureType            s_type                  ;
	void*                    p_next                  ;
	PipelineBindPoint        pipeline_bind_point     ;
	Pipeline                 pipeline                ;
	IndirectCommandsLayoutNV indirect_commands_layout;
	uint                     max_sequences_count     ;
}

struct PhysicalDeviceInheritedViewportScissorFeaturesNV {
	StructureType s_type                       ;
	void*         p_next                       ;
	uint          inherited_viewport_scissor2d;
}

struct CommandBufferInheritanceViewportScissorInfoNV {
	StructureType s_type              ;
	void*         p_next              ;
	uint          viewport_scissor2d ;
	uint          viewport_depth_count;
	Viewport*     p_viewport_depths   ;
}

struct PhysicalDeviceTexelBufferAlignmentFeaturesEXT {
	StructureType s_type                ;
	void*         p_next                ;
	uint          texel_buffer_alignment;
}

struct RenderPassTransformBeginInfoQCOM {
	StructureType            s_type   ;
	void*                    p_next   ;
	SurfaceTransformFlagsKHR transform;
}

struct CommandBufferInheritanceRenderPassTransformInfoQCOM {
	StructureType            s_type     ;
	void*                    p_next     ;
	SurfaceTransformFlagsKHR transform  ;
	Rect2D                   render_area;
}

struct PhysicalDeviceDepthBiasControlFeaturesEXT {
	StructureType s_type                                              ;
	void*         p_next                                              ;
	uint          depth_bias_control                                  ;
	uint          least_representable_value_force_unorm_representation;
	uint          float_representation                                ;
	uint          depth_bias_exact                                    ;
}

struct DepthBiasInfoEXT {
	StructureType s_type                    ;
	void*         p_next                    ;
	float         depth_bias_constant_factor;
	float         depth_bias_clamp          ;
	float         depth_bias_slope_factor   ;
}

struct DepthBiasRepresentationInfoEXT {
	StructureType              s_type                   ;
	void*                      p_next                   ;
	DepthBiasRepresentationEXT depth_bias_representation;
	uint                       depth_bias_exact         ;
}

struct PhysicalDeviceDeviceMemoryReportFeaturesEXT {
	StructureType s_type              ;
	void*         p_next              ;
	uint          device_memory_report;
}

struct DeviceMemoryReportCallbackDataEXT {
	StructureType                  s_type          ;
	void*                          p_next          ;
	DeviceMemoryReportFlagsEXT     flags           ;
	DeviceMemoryReportEventTypeEXT type            ;
	ulong                          memory_object_id;
	DeviceSize                     size            ;
	ObjectType                     object_type     ;
	ulong                          object_handle   ;
	uint                           heap_index      ;
}

struct DeviceDeviceMemoryReportCreateInfoEXT {
	StructureType                     s_type           ;
	void*                             p_next           ;
	DeviceMemoryReportFlagsEXT        flags            ;
	ProcDeviceMemoryReportCallbackEXT pfn_user_callback;
	void*                             p_user_data      ;
}

struct PhysicalDeviceRobustness2FeaturesEXT {
	StructureType s_type               ;
	void*         p_next               ;
	uint          robust_buffer_access2;
	uint          robust_image_access2 ;
	uint          null_descriptor      ;
}

struct PhysicalDeviceRobustness2PropertiesEXT {
	StructureType s_type                                     ;
	void*         p_next                                     ;
	DeviceSize    robust_storage_buffer_access_size_alignment;
	DeviceSize    robust_uniform_buffer_access_size_alignment;
}

struct SamplerCustomBorderColorCreateInfoEXT {
	StructureType   s_type             ;
	void*           p_next             ;
	ClearColorValue custom_border_color;
	Format          format             ;
}

struct PhysicalDeviceCustomBorderColorPropertiesEXT {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          max_custom_border_color_samplers;
}

struct PhysicalDeviceCustomBorderColorFeaturesEXT {
	StructureType s_type                            ;
	void*         p_next                            ;
	uint          custom_border_colors              ;
	uint          custom_border_color_without_format;
}

struct PhysicalDevicePresentBarrierFeaturesNV {
	StructureType s_type         ;
	void*         p_next         ;
	uint          present_barrier;
}

struct SurfaceCapabilitiesPresentBarrierNV {
	StructureType s_type                   ;
	void*         p_next                   ;
	uint          present_barrier_supported;
}

struct SwapchainPresentBarrierCreateInfoNV {
	StructureType s_type                ;
	void*         p_next                ;
	uint          present_barrier_enable;
}

struct PhysicalDeviceDiagnosticsConfigFeaturesNV {
	StructureType s_type            ;
	void*         p_next            ;
	uint          diagnostics_config;
}

struct DeviceDiagnosticsConfigCreateInfoNV {
	StructureType                  s_type;
	void*                          p_next;
	DeviceDiagnosticsConfigFlagsNV flags ;
}

struct CudaModuleCreateInfoNV {
	StructureType s_type   ;
	void*         p_next   ;
	usz           data_size;
	void*         p_data   ;
}

struct CudaFunctionCreateInfoNV {
	StructureType s_type ;
	void*         p_next ;
	CudaModuleNV  module_;
	ZString       p_name ;
}

struct CudaLaunchInfoNV {
	StructureType  s_type          ;
	void*          p_next          ;
	CudaFunctionNV function        ;
	uint           grid_dim_x      ;
	uint           grid_dim_y      ;
	uint           grid_dim_z      ;
	uint           block_dim_x     ;
	uint           block_dim_y     ;
	uint           block_dim_z     ;
	uint           shared_mem_bytes;
	usz            param_count     ;
	void*          p_params        ;
	usz            extra_count     ;
	void*          p_extras        ;
}

struct PhysicalDeviceCudaKernelLaunchFeaturesNV {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          cuda_kernel_launch_features;
}

struct PhysicalDeviceCudaKernelLaunchPropertiesNV {
	StructureType s_type                  ;
	void*         p_next                  ;
	uint          compute_capability_minor;
	uint          compute_capability_major;
}

struct QueryLowLatencySupportNV {
	StructureType s_type                    ;
	void*         p_next                    ;
	void*         p_queried_low_latency_data;
}

struct PhysicalDeviceDescriptorBufferPropertiesEXT {
	StructureType s_type                                                    ;
	void*         p_next                                                    ;
	uint          combined_image_sampler_descriptor_single_array            ;
	uint          bufferless_push_descriptors                               ;
	uint          allow_sampler_image_view_post_submit_creation             ;
	DeviceSize    descriptor_buffer_offset_alignment                        ;
	uint          max_descriptor_buffer_bindings                            ;
	uint          max_resource_descriptor_buffer_bindings                   ;
	uint          max_sampler_descriptor_buffer_bindings                    ;
	uint          max_embedded_immutable_sampler_bindings                   ;
	uint          max_embedded_immutable_samplers                           ;
	usz           buffer_capture_replay_descriptor_data_size                ;
	usz           image_capture_replay_descriptor_data_size                 ;
	usz           image_view_capture_replay_descriptor_data_size            ;
	usz           sampler_capture_replay_descriptor_data_size               ;
	usz           acceleration_structure_capture_replay_descriptor_data_size;
	usz           sampler_descriptor_size                                   ;
	usz           combined_image_sampler_descriptor_size                    ;
	usz           sampled_image_descriptor_size                             ;
	usz           storage_image_descriptor_size                             ;
	usz           uniform_texel_buffer_descriptor_size                      ;
	usz           robust_uniform_texel_buffer_descriptor_size               ;
	usz           storage_texel_buffer_descriptor_size                      ;
	usz           robust_storage_texel_buffer_descriptor_size               ;
	usz           uniform_buffer_descriptor_size                            ;
	usz           robust_uniform_buffer_descriptor_size                     ;
	usz           storage_buffer_descriptor_size                            ;
	usz           robust_storage_buffer_descriptor_size                     ;
	usz           input_attachment_descriptor_size                          ;
	usz           acceleration_structure_descriptor_size                    ;
	DeviceSize    max_sampler_descriptor_buffer_range                       ;
	DeviceSize    max_resource_descriptor_buffer_range                      ;
	DeviceSize    sampler_descriptor_buffer_address_space_size              ;
	DeviceSize    resource_descriptor_buffer_address_space_size             ;
	DeviceSize    descriptor_buffer_address_space_size                      ;
}

struct PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
	StructureType s_type                                            ;
	void*         p_next                                            ;
	usz           combined_image_sampler_density_map_descriptor_size;
}

struct PhysicalDeviceDescriptorBufferFeaturesEXT {
	StructureType s_type                                ;
	void*         p_next                                ;
	uint          descriptor_buffer                     ;
	uint          descriptor_buffer_capture_replay      ;
	uint          descriptor_buffer_image_layout_ignored;
	uint          descriptor_buffer_push_descriptors    ;
}

struct DescriptorAddressInfoEXT {
	StructureType s_type ;
	void*         p_next ;
	DeviceAddress address;
	DeviceSize    range  ;
	Format        format ;
}

struct DescriptorBufferBindingInfoEXT {
	StructureType    s_type ;
	void*            p_next ;
	DeviceAddress    address;
	BufferUsageFlags usage  ;
}

struct DescriptorBufferBindingPushDescriptorBufferHandleEXT {
	StructureType s_type;
	void*         p_next;
	Buffer        buffer;
}

union DescriptorDataEXT {
	Sampler*                  p_sampler               ;
	DescriptorImageInfo*      p_combined_image_sampler;
	DescriptorImageInfo*      p_input_attachment_image;
	DescriptorImageInfo*      p_sampled_image         ;
	DescriptorImageInfo*      p_storage_image         ;
	DescriptorAddressInfoEXT* p_uniform_texel_buffer  ;
	DescriptorAddressInfoEXT* p_storage_texel_buffer  ;
	DescriptorAddressInfoEXT* p_uniform_buffer        ;
	DescriptorAddressInfoEXT* p_storage_buffer        ;
	DeviceAddress             acceleration_structure  ;
}

struct DescriptorGetInfoEXT {
	StructureType     s_type;
	void*             p_next;
	DescriptorType    type  ;
	DescriptorDataEXT data  ;
}

struct BufferCaptureDescriptorDataInfoEXT {
	StructureType s_type;
	void*         p_next;
	Buffer        buffer;
}

struct ImageCaptureDescriptorDataInfoEXT {
	StructureType s_type;
	void*         p_next;
	Image         image ;
}

struct ImageViewCaptureDescriptorDataInfoEXT {
	StructureType s_type    ;
	void*         p_next    ;
	ImageView     image_view;
}

struct SamplerCaptureDescriptorDataInfoEXT {
	StructureType s_type ;
	void*         p_next ;
	Sampler       sampler;
}

struct OpaqueCaptureDescriptorDataCreateInfoEXT {
	StructureType s_type                        ;
	void*         p_next                        ;
	void*         opaque_capture_descriptor_data;
}

struct AccelerationStructureCaptureDescriptorDataInfoEXT {
	StructureType            s_type                   ;
	void*                    p_next                   ;
	AccelerationStructureKHR acceleration_structure   ;
	AccelerationStructureNV  acceleration_structure_nv;
}

struct PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
	StructureType s_type                   ;
	void*         p_next                   ;
	uint          graphics_pipeline_library;
}

struct PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
	StructureType s_type                                                        ;
	void*         p_next                                                        ;
	uint          graphics_pipeline_library_fast_linking                        ;
	uint          graphics_pipeline_library_independent_interpolation_decoration;
}

struct GraphicsPipelineLibraryCreateInfoEXT {
	StructureType                   s_type;
	void*                           p_next;
	GraphicsPipelineLibraryFlagsEXT flags ;
}

struct PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
	StructureType s_type                              ;
	void*         p_next                              ;
	uint          shader_early_and_late_fragment_tests;
}

struct PhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
	StructureType s_type                              ;
	void*         p_next                              ;
	uint          fragment_shading_rate_enums         ;
	uint          supersample_fragment_shading_rates  ;
	uint          no_invocation_fragment_shading_rates;
}

struct PhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
	StructureType    s_type                                    ;
	void*            p_next                                    ;
	SampleCountFlags max_fragment_shading_rate_invocation_count;
}

struct PipelineFragmentShadingRateEnumStateCreateInfoNV {
	StructureType                       s_type           ;
	void*                               p_next           ;
	FragmentShadingRateTypeNV           shading_rate_type;
	FragmentShadingRateNV               shading_rate     ;
	FragmentShadingRateCombinerOpKHR[2] combiner_ops     ;
}

union DeviceOrHostAddressConstKHR {
	DeviceAddress device_address;
	void*         host_address  ;
}

struct AccelerationStructureGeometryMotionTrianglesDataNV {
	StructureType               s_type     ;
	void*                       p_next     ;
	DeviceOrHostAddressConstKHR vertex_data;
}

struct AccelerationStructureMotionInfoNV {
	StructureType                          s_type       ;
	void*                                  p_next       ;
	uint                                   max_instances;
	AccelerationStructureMotionInfoFlagsNV flags        ;
}

struct AccelerationStructureMatrixMotionInstanceNV {
    TransformMatrixKHR transform_t0;
    TransformMatrixKHR transform_t1;
bitstruct : ulong {
    uint instance_custom_index: 0..23;
    uint mask: 24..31;
    uint instance_shader_binding_table_record_offset: 32..55;
    uint flags: 56..63; /* Warning: GeometryInstanceFlagsKHR converted to uint to comply to C3 standard */
}
    ulong acceleration_structure_reference;
}

struct SRTDataNV {
	float sx ;
	float a  ;
	float b  ;
	float pvx;
	float sy ;
	float c  ;
	float pvy;
	float sz ;
	float pvz;
	float qx ;
	float qy ;
	float qz ;
	float qw ;
	float tx ;
	float ty ;
	float tz ;
}

struct AccelerationStructureSRTMotionInstanceNV {
    SRTDataNV transform_t0;
    SRTDataNV transform_t1;
bitstruct : ulong {
    uint instance_custom_index: 0..23;
    uint mask: 24..31;
    uint instance_shader_binding_table_record_offset: 32..55;
    uint flags: 56..63; /* Warning: GeometryInstanceFlagsKHR converted to uint to comply to C3 standard */
}
    ulong acceleration_structure_reference;
}

union AccelerationStructureMotionInstanceDataNV {
	AccelerationStructureInstanceKHR            static_instance       ;
	AccelerationStructureMatrixMotionInstanceNV matrix_motion_instance;
	AccelerationStructureSRTMotionInstanceNV    srt_motion_instance   ;
}

struct AccelerationStructureMotionInstanceNV {
	AccelerationStructureMotionInstanceTypeNV  type ;
	AccelerationStructureMotionInstanceFlagsNV flags;
	AccelerationStructureMotionInstanceDataNV  data ;
}

struct PhysicalDeviceRayTracingMotionBlurFeaturesNV {
	StructureType s_type                                              ;
	void*         p_next                                              ;
	uint          ray_tracing_motion_blur                             ;
	uint          ray_tracing_motion_blur_pipeline_trace_rays_indirect;
}

struct PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
	StructureType s_type                ;
	void*         p_next                ;
	uint          ycbcr2plane444_formats;
}

struct PhysicalDeviceFragmentDensityMap2FeaturesEXT {
	StructureType s_type                       ;
	void*         p_next                       ;
	uint          fragment_density_map_deferred;
}

struct PhysicalDeviceFragmentDensityMap2PropertiesEXT {
	StructureType s_type                                       ;
	void*         p_next                                       ;
	uint          subsampled_loads                             ;
	uint          subsampled_coarse_reconstruction_early_access;
	uint          max_subsampled_array_layers                  ;
	uint          max_descriptor_set_subsampled_samplers       ;
}

struct CopyCommandTransformInfoQCOM {
	StructureType            s_type   ;
	void*                    p_next   ;
	SurfaceTransformFlagsKHR transform;
}

struct PhysicalDeviceImageCompressionControlFeaturesEXT {
	StructureType s_type                   ;
	void*         p_next                   ;
	uint          image_compression_control;
}

struct ImageCompressionControlEXT {
	StructureType                      s_type                         ;
	void*                              p_next                         ;
	ImageCompressionFlagsEXT           flags                          ;
	uint                               compression_control_plane_count;
	ImageCompressionFixedRateFlagsEXT* p_fixed_rate_flags             ;
}

struct ImageCompressionPropertiesEXT {
	StructureType                     s_type                            ;
	void*                             p_next                            ;
	ImageCompressionFlagsEXT          image_compression_flags           ;
	ImageCompressionFixedRateFlagsEXT image_compression_fixed_rate_flags;
}

struct PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
	StructureType s_type                         ;
	void*         p_next                         ;
	uint          attachment_feedback_loop_layout;
}

struct PhysicalDevice4444FormatsFeaturesEXT {
	StructureType s_type            ;
	void*         p_next            ;
	uint          format_a4_r4_g4_b4;
	uint          format_a4_b4_g4_r4;
}

struct PhysicalDeviceFaultFeaturesEXT {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          device_fault              ;
	uint          device_fault_vendor_binary;
}

struct DeviceFaultCountsEXT {
	StructureType s_type            ;
	void*         p_next            ;
	uint          address_info_count;
	uint          vendor_info_count ;
	DeviceSize    vendor_binary_size;
}

struct DeviceFaultAddressInfoEXT {
	DeviceFaultAddressTypeEXT address_type     ;
	DeviceAddress             reported_address ;
	DeviceSize                address_precision;
}

struct DeviceFaultVendorInfoEXT {
	ichar[MAX_DESCRIPTION_SIZE] description      ;
	ulong                       vendor_fault_code;
	ulong                       vendor_fault_data;
}

struct DeviceFaultInfoEXT {
	StructureType               s_type              ;
	void*                       p_next              ;
	ichar[MAX_DESCRIPTION_SIZE] description         ;
	DeviceFaultAddressInfoEXT*  p_address_infos     ;
	DeviceFaultVendorInfoEXT*   p_vendor_infos      ;
	void*                       p_vendor_binary_data;
}

struct DeviceFaultVendorBinaryHeaderVersionOneEXT {
	uint                                    header_size            ;
	DeviceFaultVendorBinaryHeaderVersionEXT header_version         ;
	uint                                    vendor_id              ;
	uint                                    device_id              ;
	uint                                    driver_version         ;
	char[UUID_SIZE]                         pipeline_cache_uuid    ;
	uint                                    application_name_offset;
	uint                                    application_version    ;
	uint                                    engine_name_offset     ;
	uint                                    engine_version         ;
	uint                                    api_version            ;
}

struct PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
	StructureType s_type                                       ;
	void*         p_next                                       ;
	uint          rasterization_order_color_attachment_access  ;
	uint          rasterization_order_depth_attachment_access  ;
	uint          rasterization_order_stencil_attachment_access;
}

struct PhysicalDeviceRGBA10X6FormatsFeaturesEXT {
	StructureType s_type                                 ;
	void*         p_next                                 ;
	uint          format_rgba10x6_without_y_cb_cr_sampler;
}

struct PhysicalDeviceMutableDescriptorTypeFeaturesEXT {
	StructureType s_type                 ;
	void*         p_next                 ;
	uint          mutable_descriptor_type;
}

struct MutableDescriptorTypeListEXT {
	uint            descriptor_type_count;
	DescriptorType* p_descriptor_types   ;
}

struct MutableDescriptorTypeCreateInfoEXT {
	StructureType                 s_type                            ;
	void*                         p_next                            ;
	uint                          mutable_descriptor_type_list_count;
	MutableDescriptorTypeListEXT* p_mutable_descriptor_type_lists   ;
}

struct PhysicalDeviceVertexInputDynamicStateFeaturesEXT {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          vertex_input_dynamic_state;
}

struct VertexInputBindingDescription2EXT {
	StructureType   s_type    ;
	void*           p_next    ;
	uint            binding   ;
	uint            stride    ;
	VertexInputRate input_rate;
	uint            divisor   ;
}

struct VertexInputAttributeDescription2EXT {
	StructureType s_type  ;
	void*         p_next  ;
	uint          location;
	uint          binding ;
	Format        format  ;
	uint          offset  ;
}

struct PhysicalDeviceDrmPropertiesEXT {
	StructureType s_type       ;
	void*         p_next       ;
	uint          has_primary  ;
	uint          has_render   ;
	long          primary_major;
	long          primary_minor;
	long          render_major ;
	long          render_minor ;
}

struct PhysicalDeviceAddressBindingReportFeaturesEXT {
	StructureType s_type                ;
	void*         p_next                ;
	uint          report_address_binding;
}

struct DeviceAddressBindingCallbackDataEXT {
	StructureType                s_type      ;
	void*                        p_next      ;
	DeviceAddressBindingFlagsEXT flags       ;
	DeviceAddress                base_address;
	DeviceSize                   size        ;
	DeviceAddressBindingTypeEXT  binding_type;
}

struct PhysicalDeviceDepthClipControlFeaturesEXT {
	StructureType s_type            ;
	void*         p_next            ;
	uint          depth_clip_control;
}

struct PipelineViewportDepthClipControlCreateInfoEXT {
	StructureType s_type             ;
	void*         p_next             ;
	uint          negative_one_to_one;
}

struct PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
	StructureType s_type                               ;
	void*         p_next                               ;
	uint          primitive_topology_list_restart      ;
	uint          primitive_topology_patch_list_restart;
}

struct PhysicalDevicePresentModeFifoLatestReadyFeaturesEXT {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          present_mode_fifo_latest_ready;
}

struct SubpassShadingPipelineCreateInfoHUAWEI {
	StructureType s_type     ;
	void*         p_next     ;
	RenderPass    render_pass;
	uint          subpass    ;
}

struct PhysicalDeviceSubpassShadingFeaturesHUAWEI {
	StructureType s_type         ;
	void*         p_next         ;
	uint          subpass_shading;
}

struct PhysicalDeviceSubpassShadingPropertiesHUAWEI {
	StructureType s_type                                         ;
	void*         p_next                                         ;
	uint          max_subpass_shading_workgroup_size_aspect_ratio;
}

struct PhysicalDeviceInvocationMaskFeaturesHUAWEI {
	StructureType s_type         ;
	void*         p_next         ;
	uint          invocation_mask;
}

struct MemoryGetRemoteAddressInfoNV {
	StructureType                 s_type     ;
	void*                         p_next     ;
	DeviceMemory                  memory     ;
	ExternalMemoryHandleTypeFlags handle_type;
}

struct PhysicalDeviceExternalMemoryRDMAFeaturesNV {
	StructureType s_type              ;
	void*         p_next              ;
	uint          external_memory_rdma;
}

struct PipelinePropertiesIdentifierEXT {
	StructureType   s_type             ;
	void*           p_next             ;
	char[UUID_SIZE] pipeline_identifier;
}

struct PhysicalDevicePipelinePropertiesFeaturesEXT {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          pipeline_properties_identifier;
}

struct PhysicalDeviceFrameBoundaryFeaturesEXT {
	StructureType s_type        ;
	void*         p_next        ;
	uint          frame_boundary;
}

struct FrameBoundaryEXT {
	StructureType         s_type      ;
	void*                 p_next      ;
	FrameBoundaryFlagsEXT flags       ;
	ulong                 frame_id    ;
	uint                  image_count ;
	Image*                p_images    ;
	uint                  buffer_count;
	Buffer*               p_buffers   ;
	ulong                 tag_name    ;
	usz                   tag_size    ;
	void*                 p_tag       ;
}

struct PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
	StructureType s_type                               ;
	void*         p_next                               ;
	uint          multisampled_render_to_single_sampled;
}

struct SubpassResolvePerformanceQueryEXT {
	StructureType s_type ;
	void*         p_next ;
	uint          optimal;
}

struct MultisampledRenderToSingleSampledInfoEXT {
	StructureType    s_type                                      ;
	void*            p_next                                      ;
	uint             multisampled_render_to_single_sampled_enable;
	SampleCountFlags rasterization_samples                       ;
}

struct PhysicalDeviceExtendedDynamicState2FeaturesEXT {
	StructureType s_type                                      ;
	void*         p_next                                      ;
	uint          extended_dynamic_state2                     ;
	uint          extended_dynamic_state2_logic_op            ;
	uint          extended_dynamic_state2_patch_control_points;
}

struct PhysicalDeviceColorWriteEnableFeaturesEXT {
	StructureType s_type            ;
	void*         p_next            ;
	uint          color_write_enable;
}

struct PipelineColorWriteCreateInfoEXT {
	StructureType s_type               ;
	void*         p_next               ;
	uint          attachment_count     ;
	uint*         p_color_write_enables;
}

struct PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
	StructureType s_type                                            ;
	void*         p_next                                            ;
	uint          primitives_generated_query                        ;
	uint          primitives_generated_query_with_rasterizer_discard;
	uint          primitives_generated_query_with_non_zero_streams  ;
}

struct PhysicalDeviceImageViewMinLodFeaturesEXT {
	StructureType s_type ;
	void*         p_next ;
	uint          min_lod;
}

struct ImageViewMinLodCreateInfoEXT {
	StructureType s_type ;
	void*         p_next ;
	float         min_lod;
}

struct PhysicalDeviceMultiDrawFeaturesEXT {
	StructureType s_type    ;
	void*         p_next    ;
	uint          multi_draw;
}

struct PhysicalDeviceMultiDrawPropertiesEXT {
	StructureType s_type              ;
	void*         p_next              ;
	uint          max_multi_draw_count;
}

struct MultiDrawInfoEXT {
	uint first_vertex;
	uint vertex_count;
}

struct MultiDrawIndexedInfoEXT {
	uint first_index  ;
	uint index_count  ;
	int  vertex_offset;
}

struct PhysicalDeviceImage2DViewOf3DFeaturesEXT {
	StructureType s_type               ;
	void*         p_next               ;
	uint          image2d_view_of3d  ;
	uint          sampler2d_view_of3d;
}

struct PhysicalDeviceShaderTileImageFeaturesEXT {
	StructureType s_type                               ;
	void*         p_next                               ;
	uint          shader_tile_image_color_read_access  ;
	uint          shader_tile_image_depth_read_access  ;
	uint          shader_tile_image_stencil_read_access;
}

struct PhysicalDeviceShaderTileImagePropertiesEXT {
	StructureType s_type                                                  ;
	void*         p_next                                                  ;
	uint          shader_tile_image_coherent_read_accelerated             ;
	uint          shader_tile_image_read_sample_from_pixel_rate_invocation;
	uint          shader_tile_image_read_from_helper_invocation           ;
}

struct MicromapUsageEXT {
	uint count            ;
	uint subdivision_level;
	uint format           ;
}

union DeviceOrHostAddressKHR {
	DeviceAddress device_address;
	void*         host_address  ;
}

struct MicromapBuildInfoEXT {
	StructureType               s_type               ;
	void*                       p_next               ;
	MicromapTypeEXT             type                 ;
	BuildMicromapFlagsEXT       flags                ;
	BuildMicromapModeEXT        mode                 ;
	MicromapEXT                 dst_micromap         ;
	uint                        usage_counts_count   ;
	MicromapUsageEXT*           p_usage_counts       ;
	MicromapUsageEXT*[]         pp_usage_counts      ;
	DeviceOrHostAddressConstKHR data                 ;
	DeviceOrHostAddressKHR      scratch_data         ;
	DeviceOrHostAddressConstKHR triangle_array       ;
	DeviceSize                  triangle_array_stride;
}

struct MicromapCreateInfoEXT {
	StructureType          s_type        ;
	void*                  p_next        ;
	MicromapCreateFlagsEXT create_flags  ;
	Buffer                 buffer        ;
	DeviceSize             offset        ;
	DeviceSize             size          ;
	MicromapTypeEXT        type          ;
	DeviceAddress          device_address;
}

struct PhysicalDeviceOpacityMicromapFeaturesEXT {
	StructureType s_type                 ;
	void*         p_next                 ;
	uint          micromap               ;
	uint          micromap_capture_replay;
	uint          micromap_host_commands ;
}

struct PhysicalDeviceOpacityMicromapPropertiesEXT {
	StructureType s_type                              ;
	void*         p_next                              ;
	uint          max_opacity2_state_subdivision_level;
	uint          max_opacity4_state_subdivision_level;
}

struct MicromapVersionInfoEXT {
	StructureType s_type        ;
	void*         p_next        ;
	ZString       p_version_data;
}

struct CopyMicromapToMemoryInfoEXT {
	StructureType          s_type;
	void*                  p_next;
	MicromapEXT            src   ;
	DeviceOrHostAddressKHR dst   ;
	CopyMicromapModeEXT    mode  ;
}

struct CopyMemoryToMicromapInfoEXT {
	StructureType               s_type;
	void*                       p_next;
	DeviceOrHostAddressConstKHR src   ;
	MicromapEXT                 dst   ;
	CopyMicromapModeEXT         mode  ;
}

struct CopyMicromapInfoEXT {
	StructureType       s_type;
	void*               p_next;
	MicromapEXT         src   ;
	MicromapEXT         dst   ;
	CopyMicromapModeEXT mode  ;
}

struct MicromapBuildSizesInfoEXT {
	StructureType s_type            ;
	void*         p_next            ;
	DeviceSize    micromap_size     ;
	DeviceSize    build_scratch_size;
	uint          discardable       ;
}

struct AccelerationStructureTrianglesOpacityMicromapEXT {
	StructureType               s_type            ;
	void*                       p_next            ;
	IndexType                   index_type        ;
	DeviceOrHostAddressConstKHR index_buffer      ;
	DeviceSize                  index_stride      ;
	uint                        base_triangle     ;
	uint                        usage_counts_count;
	MicromapUsageEXT*           p_usage_counts    ;
	MicromapUsageEXT*[]         pp_usage_counts   ;
	MicromapEXT                 micromap          ;
}

struct MicromapTriangleEXT {
	uint   data_offset      ;
	ushort subdivision_level;
	ushort format           ;
}

struct PhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          clusterculling_shader           ;
	uint          multiview_cluster_culling_shader;
}

struct PhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint[3]       max_work_group_count            ;
	uint[3]       max_work_group_size             ;
	uint          max_output_cluster_count        ;
	DeviceSize    indirect_buffer_offset_alignment;
}

struct PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {
	StructureType s_type              ;
	void*         p_next              ;
	uint          cluster_shading_rate;
}

struct PhysicalDeviceBorderColorSwizzleFeaturesEXT {
	StructureType s_type                         ;
	void*         p_next                         ;
	uint          border_color_swizzle           ;
	uint          border_color_swizzle_from_image;
}

struct SamplerBorderColorComponentMappingCreateInfoEXT {
	StructureType    s_type    ;
	void*            p_next    ;
	ComponentMapping components;
	uint             srgb      ;
}

struct PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          pageable_device_local_memory;
}

struct PhysicalDeviceShaderCorePropertiesARM {
	StructureType s_type    ;
	void*         p_next    ;
	uint          pixel_rate;
	uint          texel_rate;
	uint          fma_rate  ;
}

struct DeviceQueueShaderCoreControlCreateInfoARM {
	StructureType s_type           ;
	void*         p_next           ;
	uint          shader_core_count;
}

struct PhysicalDeviceSchedulingControlsFeaturesARM {
	StructureType s_type             ;
	void*         p_next             ;
	uint          scheduling_controls;
}

struct PhysicalDeviceSchedulingControlsPropertiesARM {
	StructureType                            s_type                   ;
	void*                                    p_next                   ;
	PhysicalDeviceSchedulingControlsFlagsARM scheduling_controls_flags;
}

struct PhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
	StructureType s_type                 ;
	void*         p_next                 ;
	uint          image_sliced_view_of3d;
}

struct ImageViewSlicedCreateInfoEXT {
	StructureType s_type      ;
	void*         p_next      ;
	uint          slice_offset;
	uint          slice_count ;
}

struct PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          descriptor_set_host_mapping;
}

struct DescriptorSetBindingReferenceVALVE {
	StructureType       s_type               ;
	void*               p_next               ;
	DescriptorSetLayout descriptor_set_layout;
	uint                binding              ;
}

struct DescriptorSetLayoutHostMappingInfoVALVE {
	StructureType s_type           ;
	void*         p_next           ;
	usz           descriptor_offset;
	uint          descriptor_size  ;
}

struct PhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
	StructureType s_type               ;
	void*         p_next               ;
	uint          non_seamless_cube_map;
}

struct PhysicalDeviceRenderPassStripedFeaturesARM {
	StructureType s_type             ;
	void*         p_next             ;
	uint          render_pass_striped;
}

struct PhysicalDeviceRenderPassStripedPropertiesARM {
	StructureType s_type                        ;
	void*         p_next                        ;
	Extent2D      render_pass_stripe_granularity;
	uint          max_render_pass_stripes       ;
}

struct RenderPassStripeInfoARM {
	StructureType s_type     ;
	void*         p_next     ;
	Rect2D        stripe_area;
}

struct RenderPassStripeBeginInfoARM {
	StructureType            s_type           ;
	void*                    p_next           ;
	uint                     stripe_info_count;
	RenderPassStripeInfoARM* p_stripe_infos   ;
}

struct RenderPassStripeSubmitInfoARM {
	StructureType        s_type                     ;
	void*                p_next                     ;
	uint                 stripe_semaphore_info_count;
	SemaphoreSubmitInfo* p_stripe_semaphore_infos   ;
}

struct PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          fragment_density_map_offset;
}

struct PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
	StructureType s_type                             ;
	void*         p_next                             ;
	Extent2D      fragment_density_offset_granularity;
}

struct SubpassFragmentDensityMapOffsetEndInfoQCOM {
	StructureType s_type                       ;
	void*         p_next                       ;
	uint          fragment_density_offset_count;
	Offset2D*     p_fragment_density_offsets   ;
}

struct CopyMemoryIndirectCommandNV {
	DeviceAddress src_address;
	DeviceAddress dst_address;
	DeviceSize    size       ;
}

struct CopyMemoryToImageIndirectCommandNV {
	DeviceAddress          src_address        ;
	uint                   buffer_row_length  ;
	uint                   buffer_image_height;
	ImageSubresourceLayers image_subresource  ;
	Offset3D               image_offset       ;
	Extent3D               image_extent       ;
}

struct PhysicalDeviceCopyMemoryIndirectFeaturesNV {
	StructureType s_type       ;
	void*         p_next       ;
	uint          indirect_copy;
}

struct PhysicalDeviceCopyMemoryIndirectPropertiesNV {
	StructureType s_type          ;
	void*         p_next          ;
	QueueFlags    supported_queues;
}

struct DecompressMemoryRegionNV {
	DeviceAddress                    src_address         ;
	DeviceAddress                    dst_address         ;
	DeviceSize                       compressed_size     ;
	DeviceSize                       decompressed_size   ;
	MemoryDecompressionMethodFlagsNV decompression_method;
}

struct PhysicalDeviceMemoryDecompressionFeaturesNV {
	StructureType s_type              ;
	void*         p_next              ;
	uint          memory_decompression;
}

struct PhysicalDeviceMemoryDecompressionPropertiesNV {
	StructureType                    s_type                          ;
	void*                            p_next                          ;
	MemoryDecompressionMethodFlagsNV decompression_methods           ;
	ulong                            max_decompression_indirect_count;
}

struct PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
	StructureType s_type                                 ;
	void*         p_next                                 ;
	uint          device_generated_compute               ;
	uint          device_generated_compute_pipelines     ;
	uint          device_generated_compute_capture_replay;
}

struct ComputePipelineIndirectBufferInfoNV {
	StructureType s_type                                ;
	void*         p_next                                ;
	DeviceAddress device_address                        ;
	DeviceSize    size                                  ;
	DeviceAddress pipeline_device_address_capture_replay;
}

struct PipelineIndirectDeviceAddressInfoNV {
	StructureType     s_type             ;
	void*             p_next             ;
	PipelineBindPoint pipeline_bind_point;
	Pipeline          pipeline           ;
}

struct BindPipelineIndirectCommandNV {
	DeviceAddress pipeline_address;
}

struct PhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV {
	StructureType s_type              ;
	void*         p_next              ;
	uint          spheres             ;
	uint          linear_swept_spheres;
}

struct AccelerationStructureGeometryLinearSweptSpheresDataNV {
	StructureType                       s_type       ;
	void*                               p_next       ;
	Format                              vertex_format;
	DeviceOrHostAddressConstKHR         vertex_data  ;
	DeviceSize                          vertex_stride;
	Format                              radius_format;
	DeviceOrHostAddressConstKHR         radius_data  ;
	DeviceSize                          radius_stride;
	IndexType                           index_type   ;
	DeviceOrHostAddressConstKHR         index_data   ;
	DeviceSize                          index_stride ;
	RayTracingLssIndexingModeNV         indexing_mode;
	RayTracingLssPrimitiveEndCapsModeNV end_caps_mode;
}

struct AccelerationStructureGeometrySpheresDataNV {
	StructureType               s_type       ;
	void*                       p_next       ;
	Format                      vertex_format;
	DeviceOrHostAddressConstKHR vertex_data  ;
	DeviceSize                  vertex_stride;
	Format                      radius_format;
	DeviceOrHostAddressConstKHR radius_data  ;
	DeviceSize                  radius_stride;
	IndexType                   index_type   ;
	DeviceOrHostAddressConstKHR index_data   ;
	DeviceSize                  index_stride ;
}

struct PhysicalDeviceLinearColorAttachmentFeaturesNV {
	StructureType s_type                 ;
	void*         p_next                 ;
	uint          linear_color_attachment;
}

struct PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
	StructureType s_type                             ;
	void*         p_next                             ;
	uint          image_compression_control_swapchain;
}

struct ImageViewSampleWeightCreateInfoQCOM {
	StructureType s_type       ;
	void*         p_next       ;
	Offset2D      filter_center;
	Extent2D      filter_size  ;
	uint          num_phases   ;
}

struct PhysicalDeviceImageProcessingFeaturesQCOM {
	StructureType s_type                 ;
	void*         p_next                 ;
	uint          texture_sample_weighted;
	uint          texture_box_filter     ;
	uint          texture_block_match    ;
}

struct PhysicalDeviceImageProcessingPropertiesQCOM {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          max_weight_filter_phases   ;
	Extent2D      max_weight_filter_dimension;
	Extent2D      max_block_match_region     ;
	Extent2D      max_box_filter_block_size  ;
}

struct PhysicalDeviceNestedCommandBufferFeaturesEXT {
	StructureType s_type                                ;
	void*         p_next                                ;
	uint          nested_command_buffer                 ;
	uint          nested_command_buffer_rendering       ;
	uint          nested_command_buffer_simultaneous_use;
}

struct PhysicalDeviceNestedCommandBufferPropertiesEXT {
	StructureType s_type                          ;
	void*         p_next                          ;
	uint          max_command_buffer_nesting_level;
}

struct ExternalMemoryAcquireUnmodifiedEXT {
	StructureType s_type                   ;
	void*         p_next                   ;
	uint          acquire_unmodified_memory;
}

struct PhysicalDeviceExtendedDynamicState3FeaturesEXT {
	StructureType s_type                                                     ;
	void*         p_next                                                     ;
	uint          extended_dynamic_state3_tessellation_domain_origin         ;
	uint          extended_dynamic_state3_depth_clamp_enable                 ;
	uint          extended_dynamic_state3_polygon_mode                       ;
	uint          extended_dynamic_state3_rasterization_samples              ;
	uint          extended_dynamic_state3_sample_mask                        ;
	uint          extended_dynamic_state3_alpha_to_coverage_enable           ;
	uint          extended_dynamic_state3_alpha_to_one_enable                ;
	uint          extended_dynamic_state3_logic_op_enable                    ;
	uint          extended_dynamic_state3_color_blend_enable                 ;
	uint          extended_dynamic_state3_color_blend_equation               ;
	uint          extended_dynamic_state3_color_write_mask                   ;
	uint          extended_dynamic_state3_rasterization_stream               ;
	uint          extended_dynamic_state3_conservative_rasterization_mode    ;
	uint          extended_dynamic_state3_extra_primitive_overestimation_size;
	uint          extended_dynamic_state3_depth_clip_enable                  ;
	uint          extended_dynamic_state3_sample_locations_enable            ;
	uint          extended_dynamic_state3_color_blend_advanced               ;
	uint          extended_dynamic_state3_provoking_vertex_mode              ;
	uint          extended_dynamic_state3_line_rasterization_mode            ;
	uint          extended_dynamic_state3_line_stipple_enable                ;
	uint          extended_dynamic_state3_depth_clip_negative_one_to_one     ;
	uint          extended_dynamic_state3_viewport_w_scaling_enable          ;
	uint          extended_dynamic_state3_viewport_swizzle                   ;
	uint          extended_dynamic_state3_coverage_to_color_enable           ;
	uint          extended_dynamic_state3_coverage_to_color_location         ;
	uint          extended_dynamic_state3_coverage_modulation_mode           ;
	uint          extended_dynamic_state3_coverage_modulation_table_enable   ;
	uint          extended_dynamic_state3_coverage_modulation_table          ;
	uint          extended_dynamic_state3_coverage_reduction_mode            ;
	uint          extended_dynamic_state3_representative_fragment_test_enable;
	uint          extended_dynamic_state3_shading_rate_image_enable          ;
}

struct PhysicalDeviceExtendedDynamicState3PropertiesEXT {
	StructureType s_type                                 ;
	void*         p_next                                 ;
	uint          dynamic_primitive_topology_unrestricted;
}

struct ColorBlendEquationEXT {
	BlendFactor src_color_blend_factor;
	BlendFactor dst_color_blend_factor;
	BlendOp     color_blend_op        ;
	BlendFactor src_alpha_blend_factor;
	BlendFactor dst_alpha_blend_factor;
	BlendOp     alpha_blend_op        ;
}

struct ColorBlendAdvancedEXT {
	BlendOp         advanced_blend_op;
	uint            src_premultiplied;
	uint            dst_premultiplied;
	BlendOverlapEXT blend_overlap    ;
	uint            clamp_results    ;
}

struct PhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
	StructureType s_type                ;
	void*         p_next                ;
	uint          subpass_merge_feedback;
}

struct RenderPassCreationControlEXT {
	StructureType s_type          ;
	void*         p_next          ;
	uint          disallow_merging;
}

struct RenderPassCreationFeedbackInfoEXT {
	uint post_merge_subpass_count;
}

struct RenderPassCreationFeedbackCreateInfoEXT {
	StructureType                      s_type                ;
	void*                              p_next                ;
	RenderPassCreationFeedbackInfoEXT* p_render_pass_feedback;
}

struct RenderPassSubpassFeedbackInfoEXT {
	SubpassMergeStatusEXT       subpass_merge_status;
	ichar[MAX_DESCRIPTION_SIZE] description         ;
	uint                        post_merge_index    ;
}

struct RenderPassSubpassFeedbackCreateInfoEXT {
	StructureType                     s_type            ;
	void*                             p_next            ;
	RenderPassSubpassFeedbackInfoEXT* p_subpass_feedback;
}

struct DirectDriverLoadingInfoLUNARG {
	StructureType                  s_type                    ;
	void*                          p_next                    ;
	DirectDriverLoadingFlagsLUNARG flags                     ;
	ProcGetInstanceProcAddrLUNARG  pfn_get_instance_proc_addr;
}

struct DirectDriverLoadingListLUNARG {
	StructureType                  s_type      ;
	void*                          p_next      ;
	DirectDriverLoadingModeLUNARG  mode        ;
	uint                           driver_count;
	DirectDriverLoadingInfoLUNARG* p_drivers   ;
}

struct PhysicalDeviceShaderModuleIdentifierFeaturesEXT {
	StructureType s_type                  ;
	void*         p_next                  ;
	uint          shader_module_identifier;
}

struct PhysicalDeviceShaderModuleIdentifierPropertiesEXT {
	StructureType   s_type                                 ;
	void*           p_next                                 ;
	char[UUID_SIZE] shader_module_identifier_algorithm_uuid;
}

struct PipelineShaderStageModuleIdentifierCreateInfoEXT {
	StructureType s_type         ;
	void*         p_next         ;
	uint          identifier_size;
	ZString       p_identifier   ;
}

struct ShaderModuleIdentifierEXT {
	StructureType                               s_type         ;
	void*                                       p_next         ;
	uint                                        identifier_size;
	char[MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT] identifier     ;
}

struct PhysicalDeviceOpticalFlowFeaturesNV {
	StructureType s_type      ;
	void*         p_next      ;
	uint          optical_flow;
}

struct PhysicalDeviceOpticalFlowPropertiesNV {
	StructureType              s_type                      ;
	void*                      p_next                      ;
	OpticalFlowGridSizeFlagsNV supported_output_grid_sizes ;
	OpticalFlowGridSizeFlagsNV supported_hint_grid_sizes   ;
	uint                       hint_supported              ;
	uint                       cost_supported              ;
	uint                       bidirectional_flow_supported;
	uint                       global_flow_supported       ;
	uint                       min_width                   ;
	uint                       min_height                  ;
	uint                       max_width                   ;
	uint                       max_height                  ;
	uint                       max_num_regions_of_interest ;
}

struct OpticalFlowImageFormatInfoNV {
	StructureType           s_type;
	void*                   p_next;
	OpticalFlowUsageFlagsNV usage ;
}

struct OpticalFlowImageFormatPropertiesNV {
	StructureType s_type;
	void*         p_next;
	Format        format;
}

struct OpticalFlowSessionCreateInfoNV {
	StructureType                   s_type            ;
	void*                           p_next            ;
	uint                            width             ;
	uint                            height            ;
	Format                          image_format      ;
	Format                          flow_vector_format;
	Format                          cost_format       ;
	OpticalFlowGridSizeFlagsNV      output_grid_size  ;
	OpticalFlowGridSizeFlagsNV      hint_grid_size    ;
	OpticalFlowPerformanceLevelNV   performance_level ;
	OpticalFlowSessionCreateFlagsNV flags             ;
}

struct OpticalFlowSessionCreatePrivateDataInfoNV {
	StructureType s_type        ;
	void*         p_next        ;
	uint          id            ;
	uint          size          ;
	void*         p_private_data;
}

struct OpticalFlowExecuteInfoNV {
	StructureType             s_type      ;
	void*                     p_next      ;
	OpticalFlowExecuteFlagsNV flags       ;
	uint                      region_count;
	Rect2D*                   p_regions   ;
}

struct PhysicalDeviceLegacyDitheringFeaturesEXT {
	StructureType s_type          ;
	void*         p_next          ;
	uint          legacy_dithering;
}

struct PhysicalDeviceAntiLagFeaturesAMD {
	StructureType s_type  ;
	void*         p_next  ;
	uint          anti_lag;
}

struct AntiLagPresentationInfoAMD {
	StructureType   s_type     ;
	void*           p_next     ;
	AntiLagStageAMD stage      ;
	ulong           frame_index;
}

struct AntiLagDataAMD {
	StructureType               s_type             ;
	void*                       p_next             ;
	AntiLagModeAMD              mode               ;
	uint                        max_fps            ;
	AntiLagPresentationInfoAMD* p_presentation_info;
}

struct PhysicalDeviceShaderObjectFeaturesEXT {
	StructureType s_type       ;
	void*         p_next       ;
	uint          shader_object;
}

struct PhysicalDeviceShaderObjectPropertiesEXT {
	StructureType   s_type               ;
	void*           p_next               ;
	char[UUID_SIZE] shader_binary_uuid   ;
	uint            shader_binary_version;
}

struct ShaderCreateInfoEXT {
	StructureType        s_type                   ;
	void*                p_next                   ;
	ShaderCreateFlagsEXT flags                    ;
	ShaderStageFlags     stage                    ;
	ShaderStageFlags     next_stage               ;
	ShaderCodeTypeEXT    code_type                ;
	usz                  code_size                ;
	void*                p_code                   ;
	ZString              p_name                   ;
	uint                 set_layout_count         ;
	DescriptorSetLayout* p_set_layouts            ;
	uint                 push_constant_range_count;
	PushConstantRange*   p_push_constant_ranges   ;
	SpecializationInfo*  p_specialization_info    ;
}

struct DepthClampRangeEXT {
	float min_depth_clamp;
	float max_depth_clamp;
}

struct PhysicalDeviceTilePropertiesFeaturesQCOM {
	StructureType s_type         ;
	void*         p_next         ;
	uint          tile_properties;
}

struct TilePropertiesQCOM {
	StructureType s_type    ;
	void*         p_next    ;
	Extent3D      tile_size ;
	Extent2D      apron_size;
	Offset2D      origin    ;
}

struct PhysicalDeviceAmigoProfilingFeaturesSEC {
	StructureType s_type         ;
	void*         p_next         ;
	uint          amigo_profiling;
}

struct AmigoProfilingSubmitInfoSEC {
	StructureType s_type               ;
	void*         p_next               ;
	ulong         first_draw_timestamp ;
	ulong         swap_buffer_timestamp;
}

struct PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          multiview_per_view_viewports;
}

struct PhysicalDeviceRayTracingInvocationReorderPropertiesNV {
	StructureType                     s_type                                        ;
	void*                             p_next                                        ;
	RayTracingInvocationReorderModeNV ray_tracing_invocation_reorder_reordering_hint;
}

struct PhysicalDeviceRayTracingInvocationReorderFeaturesNV {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          ray_tracing_invocation_reorder;
}

struct PhysicalDeviceCooperativeVectorPropertiesNV {
	StructureType    s_type                                          ;
	void*            p_next                                          ;
	ShaderStageFlags cooperative_vector_supported_stages             ;
	uint             cooperative_vector_training_float16_accumulation;
	uint             cooperative_vector_training_float32_accumulation;
	uint             max_cooperative_vector_components               ;
}

struct PhysicalDeviceCooperativeVectorFeaturesNV {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          cooperative_vector         ;
	uint          cooperative_vector_training;
}

struct CooperativeVectorPropertiesNV {
	StructureType    s_type               ;
	void*            p_next               ;
	ComponentTypeKHR input_type           ;
	ComponentTypeKHR input_interpretation ;
	ComponentTypeKHR matrix_interpretation;
	ComponentTypeKHR bias_interpretation  ;
	ComponentTypeKHR result_type          ;
	uint             transpose            ;
}

struct ConvertCooperativeVectorMatrixInfoNV {
	StructureType                   s_type            ;
	void*                           p_next            ;
	usz                             src_size          ;
	DeviceOrHostAddressConstKHR     src_data          ;
	usz*                            p_dst_size        ;
	DeviceOrHostAddressKHR          dst_data          ;
	ComponentTypeKHR                src_component_type;
	ComponentTypeKHR                dst_component_type;
	uint                            num_rows          ;
	uint                            num_columns       ;
	CooperativeVectorMatrixLayoutNV src_layout        ;
	usz                             src_stride        ;
	CooperativeVectorMatrixLayoutNV dst_layout        ;
	usz                             dst_stride        ;
}

struct PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
	StructureType s_type                       ;
	void*         p_next                       ;
	uint          extended_sparse_address_space;
}

struct PhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
	StructureType    s_type                            ;
	void*            p_next                            ;
	DeviceSize       extended_sparse_address_space_size;
	ImageUsageFlags  extended_sparse_image_usage_flags ;
	BufferUsageFlags extended_sparse_buffer_usage_flags;
}

struct PhysicalDeviceLegacyVertexAttributesFeaturesEXT {
	StructureType s_type                  ;
	void*         p_next                  ;
	uint          legacy_vertex_attributes;
}

struct PhysicalDeviceLegacyVertexAttributesPropertiesEXT {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          native_unaligned_performance;
}

struct LayerSettingEXT {
	ZString             p_layer_name  ;
	ZString             p_setting_name;
	LayerSettingTypeEXT type          ;
	uint                value_count   ;
	void*               p_values      ;
}

struct LayerSettingsCreateInfoEXT {
	StructureType    s_type       ;
	void*            p_next       ;
	uint             setting_count;
	LayerSettingEXT* p_settings   ;
}

struct PhysicalDeviceShaderCoreBuiltinsFeaturesARM {
	StructureType s_type              ;
	void*         p_next              ;
	uint          shader_core_builtins;
}

struct PhysicalDeviceShaderCoreBuiltinsPropertiesARM {
	StructureType s_type               ;
	void*         p_next               ;
	ulong         shader_core_mask     ;
	uint          shader_core_count    ;
	uint          shader_warps_per_core;
}

struct PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          pipeline_library_group_handles;
}

struct PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
	StructureType s_type                              ;
	void*         p_next                              ;
	uint          dynamic_rendering_unused_attachments;
}

struct LatencySleepModeInfoNV {
	StructureType s_type             ;
	void*         p_next             ;
	uint          low_latency_mode   ;
	uint          low_latency_boost  ;
	uint          minimum_interval_us;
}

struct LatencySleepInfoNV {
	StructureType s_type          ;
	void*         p_next          ;
	Semaphore     signal_semaphore;
	ulong         value           ;
}

struct SetLatencyMarkerInfoNV {
	StructureType   s_type    ;
	void*           p_next    ;
	ulong           present_id;
	LatencyMarkerNV marker    ;
}

struct LatencyTimingsFrameReportNV {
	StructureType s_type                       ;
	void*         p_next                       ;
	ulong         present_id                   ;
	ulong         input_sample_time_us         ;
	ulong         sim_start_time_us            ;
	ulong         sim_end_time_us              ;
	ulong         render_submit_start_time_us  ;
	ulong         render_submit_end_time_us    ;
	ulong         present_start_time_us        ;
	ulong         present_end_time_us          ;
	ulong         driver_start_time_us         ;
	ulong         driver_end_time_us           ;
	ulong         os_render_queue_start_time_us;
	ulong         os_render_queue_end_time_us  ;
	ulong         gpu_render_start_time_us     ;
	ulong         gpu_render_end_time_us       ;
}

struct GetLatencyMarkerInfoNV {
	StructureType                s_type      ;
	void*                        p_next      ;
	uint                         timing_count;
	LatencyTimingsFrameReportNV* p_timings   ;
}

struct LatencySubmissionPresentIdNV {
	StructureType s_type    ;
	void*         p_next    ;
	ulong         present_id;
}

struct SwapchainLatencyCreateInfoNV {
	StructureType s_type             ;
	void*         p_next             ;
	uint          latency_mode_enable;
}

struct OutOfBandQueueTypeInfoNV {
	StructureType        s_type    ;
	void*                p_next    ;
	OutOfBandQueueTypeNV queue_type;
}

struct LatencySurfaceCapabilitiesNV {
	StructureType   s_type            ;
	void*           p_next            ;
	uint            present_mode_count;
	PresentModeKHR* p_present_modes   ;
}

struct PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
	StructureType s_type                         ;
	void*         p_next                         ;
	uint          multiview_per_view_render_areas;
}

struct MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          per_view_render_area_count;
	Rect2D*       p_per_view_render_areas   ;
}

struct PhysicalDevicePerStageDescriptorSetFeaturesNV {
	StructureType s_type                  ;
	void*         p_next                  ;
	uint          per_stage_descriptor_set;
	uint          dynamic_pipeline_layout ;
}

struct PhysicalDeviceImageProcessing2FeaturesQCOM {
	StructureType s_type              ;
	void*         p_next              ;
	uint          texture_block_match2;
}

struct PhysicalDeviceImageProcessing2PropertiesQCOM {
	StructureType s_type                ;
	void*         p_next                ;
	Extent2D      max_block_match_window;
}

struct SamplerBlockMatchWindowCreateInfoQCOM {
	StructureType                   s_type             ;
	void*                           p_next             ;
	Extent2D                        window_extent      ;
	BlockMatchWindowCompareModeQCOM window_compare_mode;
}

struct PhysicalDeviceCubicWeightsFeaturesQCOM {
	StructureType s_type                  ;
	void*         p_next                  ;
	uint          selectable_cubic_weights;
}

struct SamplerCubicWeightsCreateInfoQCOM {
	StructureType          s_type       ;
	void*                  p_next       ;
	CubicFilterWeightsQCOM cubic_weights;
}

struct BlitImageCubicWeightsInfoQCOM {
	StructureType          s_type       ;
	void*                  p_next       ;
	CubicFilterWeightsQCOM cubic_weights;
}

struct PhysicalDeviceYcbcrDegammaFeaturesQCOM {
	StructureType s_type       ;
	void*         p_next       ;
	uint          ycbcr_degamma;
}

struct SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
	StructureType s_type              ;
	void*         p_next              ;
	uint          enable_y_degamma    ;
	uint          enable_cb_cr_degamma;
}

struct PhysicalDeviceCubicClampFeaturesQCOM {
	StructureType s_type           ;
	void*         p_next           ;
	uint          cubic_range_clamp;
}

struct PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
	StructureType s_type                                ;
	void*         p_next                                ;
	uint          attachment_feedback_loop_dynamic_state;
}

struct PhysicalDeviceLayeredDriverPropertiesMSFT {
	StructureType                  s_type        ;
	void*                          p_next        ;
	LayeredDriverUnderlyingApiMSFT underlying_api;
}

struct PhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          descriptor_pool_overallocation;
}

struct DisplaySurfaceStereoCreateInfoNV {
	StructureType              s_type     ;
	void*                      p_next     ;
	DisplaySurfaceStereoTypeNV stereo_type;
}

struct DisplayModeStereoPropertiesNV {
	StructureType s_type           ;
	void*         p_next           ;
	uint          hdmi3d_supported;
}

struct PhysicalDeviceRawAccessChainsFeaturesNV {
	StructureType s_type                  ;
	void*         p_next                  ;
	uint          shader_raw_access_chains;
}

struct PhysicalDeviceCommandBufferInheritanceFeaturesNV {
	StructureType s_type                    ;
	void*         p_next                    ;
	uint          command_buffer_inheritance;
}

struct PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
	StructureType s_type                       ;
	void*         p_next                       ;
	uint          shader_float16_vector_atomics;
}

struct PhysicalDeviceShaderReplicatedCompositesFeaturesEXT {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          shader_replicated_composites;
}

struct PhysicalDeviceRayTracingValidationFeaturesNV {
	StructureType s_type                ;
	void*         p_next                ;
	uint          ray_tracing_validation;
}

struct PhysicalDeviceClusterAccelerationStructureFeaturesNV {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          cluster_acceleration_structure;
}

struct PhysicalDeviceClusterAccelerationStructurePropertiesNV {
	StructureType s_type                                ;
	void*         p_next                                ;
	uint          max_vertices_per_cluster              ;
	uint          max_triangles_per_cluster             ;
	uint          cluster_scratch_byte_alignment        ;
	uint          cluster_byte_alignment                ;
	uint          cluster_template_byte_alignment       ;
	uint          cluster_bottom_level_byte_alignment   ;
	uint          cluster_template_bounds_byte_alignment;
	uint          max_cluster_geometry_index            ;
}

struct ClusterAccelerationStructureClustersBottomLevelInputNV {
	StructureType s_type                                      ;
	void*         p_next                                      ;
	uint          max_total_cluster_count                     ;
	uint          max_cluster_count_per_acceleration_structure;
}

struct ClusterAccelerationStructureTriangleClusterInputNV {
	StructureType s_type                           ;
	void*         p_next                           ;
	Format        vertex_format                    ;
	uint          max_geometry_index_value         ;
	uint          max_cluster_unique_geometry_count;
	uint          max_cluster_triangle_count       ;
	uint          max_cluster_vertex_count         ;
	uint          max_total_triangle_count         ;
	uint          max_total_vertex_count           ;
	uint          min_position_truncate_bit_count  ;
}

struct ClusterAccelerationStructureMoveObjectsInputNV {
	StructureType                      s_type         ;
	void*                              p_next         ;
	ClusterAccelerationStructureTypeNV type           ;
	uint                               no_move_overlap;
	DeviceSize                         max_moved_bytes;
}

union ClusterAccelerationStructureOpInputNV {
	ClusterAccelerationStructureClustersBottomLevelInputNV* p_clusters_bottom_level;
	ClusterAccelerationStructureTriangleClusterInputNV*     p_triangle_clusters    ;
	ClusterAccelerationStructureMoveObjectsInputNV*         p_move_objects         ;
}

struct ClusterAccelerationStructureInputInfoNV {
	StructureType                         s_type                          ;
	void*                                 p_next                          ;
	uint                                  max_acceleration_structure_count;
	BuildAccelerationStructureFlagsKHR    flags                           ;
	ClusterAccelerationStructureOpTypeNV  op_type                         ;
	ClusterAccelerationStructureOpModeNV  op_mode                         ;
	ClusterAccelerationStructureOpInputNV op_input                        ;
}

struct StridedDeviceAddressRegionKHR {
	DeviceAddress device_address;
	DeviceSize    stride        ;
	DeviceSize    size          ;
}

struct ClusterAccelerationStructureCommandsInfoNV {
	StructureType                                        s_type                  ;
	void*                                                p_next                  ;
	ClusterAccelerationStructureInputInfoNV              input                   ;
	DeviceAddress                                        dst_implicit_data       ;
	DeviceAddress                                        scratch_data            ;
	StridedDeviceAddressRegionKHR                        dst_addresses_array     ;
	StridedDeviceAddressRegionKHR                        dst_sizes_array         ;
	StridedDeviceAddressRegionKHR                        src_infos_array         ;
	DeviceAddress                                        src_infos_count         ;
	ClusterAccelerationStructureAddressResolutionFlagsNV address_resolution_flags;
}

struct StridedDeviceAddressNV {
	DeviceAddress start_address  ;
	DeviceSize    stride_in_bytes;
}

bitstruct ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV : uint {
    uint geometry_index: 0..23;
    uint reserved: 24..28;
    uint geometry_flags: 29..31;
}
struct ClusterAccelerationStructureMoveObjectsInfoNV {
	DeviceAddress src_acceleration_structure;
}

struct ClusterAccelerationStructureBuildClustersBottomLevelInfoNV {
	uint          cluster_references_count ;
	uint          cluster_references_stride;
	DeviceAddress cluster_references       ;
}

struct ClusterAccelerationStructureBuildTriangleClusterInfoNV {
    uint cluster_id;
    ClusterAccelerationStructureClusterFlagsNV cluster_flags;
bitstruct : uint {
    ushort triangle_count: 0..8;
    ushort vertex_count: 9..17;
    ushort position_truncate_bit_count: 18..23;
    ushort index_type: 24..27;
    ushort opacity_micromap_index_type: 28..31;
}
    ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV base_geometry_index_and_geometry_flags;
    ushort index_buffer_stride;
    ushort vertex_buffer_stride;
    ushort geometry_index_and_flags_buffer_stride;
    ushort opacity_micromap_index_buffer_stride;
    DeviceAddress index_buffer;
    DeviceAddress vertex_buffer;
    DeviceAddress geometry_index_and_flags_buffer;
    DeviceAddress opacity_micromap_array;
    DeviceAddress opacity_micromap_index_buffer;
}

struct ClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV {
    uint cluster_id;
    ClusterAccelerationStructureClusterFlagsNV cluster_flags;
bitstruct : uint {
    uint triangle_count: 0..8;
    uint vertex_count: 9..17;
    uint position_truncate_bit_count: 18..23;
    uint index_type: 24..27;
    uint opacity_micromap_index_type: 28..31;
}
    ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV base_geometry_index_and_geometry_flags;
    ushort index_buffer_stride;
    ushort vertex_buffer_stride;
    ushort geometry_index_and_flags_buffer_stride;
    ushort opacity_micromap_index_buffer_stride;
    DeviceAddress index_buffer;
    DeviceAddress vertex_buffer;
    DeviceAddress geometry_index_and_flags_buffer;
    DeviceAddress opacity_micromap_array;
    DeviceAddress opacity_micromap_index_buffer;
    DeviceAddress instantiation_bounding_box_limit;
}

struct ClusterAccelerationStructureInstantiateClusterInfoNV {
    uint cluster_id_offset;
bitstruct : uint {
    uint geometry_index_offset: 0..23;
    uint reserved: 24..31;
}
    DeviceAddress cluster_template_address;
    StridedDeviceAddressNV vertex_buffer;
}

struct AccelerationStructureBuildSizesInfoKHR {
	StructureType s_type                     ;
	void*         p_next                     ;
	DeviceSize    acceleration_structure_size;
	DeviceSize    update_scratch_size        ;
	DeviceSize    build_scratch_size         ;
}

struct RayTracingPipelineClusterAccelerationStructureCreateInfoNV {
	StructureType s_type                              ;
	void*         p_next                              ;
	uint          allow_cluster_acceleration_structure;
}

struct PhysicalDevicePartitionedAccelerationStructureFeaturesNV {
	StructureType s_type                            ;
	void*         p_next                            ;
	uint          partitioned_acceleration_structure;
}

struct PhysicalDevicePartitionedAccelerationStructurePropertiesNV {
	StructureType s_type             ;
	void*         p_next             ;
	uint          max_partition_count;
}

struct PartitionedAccelerationStructureFlagsNV {
	StructureType s_type                      ;
	void*         p_next                      ;
	uint          enable_partition_translation;
}

struct BuildPartitionedAccelerationStructureIndirectCommandNV {
	PartitionedAccelerationStructureOpTypeNV op_type  ;
	uint                                     arg_count;
	StridedDeviceAddressNV                   arg_data ;
}

struct PartitionedAccelerationStructureWriteInstanceDataNV {
	TransformMatrixKHR                              transform                               ;
	float[6]                                        explicit_aabb                           ;
	uint                                            instance_id                             ;
	uint                                            instance_mask                           ;
	uint                                            instance_contribution_to_hit_group_index;
	PartitionedAccelerationStructureInstanceFlagsNV instance_flags                          ;
	uint                                            instance_index                          ;
	uint                                            partition_index                         ;
	DeviceAddress                                   acceleration_structure                  ;
}

struct PartitionedAccelerationStructureUpdateInstanceDataNV {
	uint          instance_index                          ;
	uint          instance_contribution_to_hit_group_index;
	DeviceAddress acceleration_structure                  ;
}

struct PartitionedAccelerationStructureWritePartitionTranslationDataNV {
	uint     partition_index      ;
	float[3] partition_translation;
}

struct WriteDescriptorSetPartitionedAccelerationStructureNV {
	StructureType  s_type                      ;
	void*          p_next                      ;
	uint           acceleration_structure_count;
	DeviceAddress* p_acceleration_structures   ;
}

struct PartitionedAccelerationStructureInstancesInputNV {
	StructureType                      s_type                                ;
	void*                              p_next                                ;
	BuildAccelerationStructureFlagsKHR flags                                 ;
	uint                               instance_count                        ;
	uint                               max_instance_per_partition_count      ;
	uint                               partition_count                       ;
	uint                               max_instance_in_global_partition_count;
}

struct BuildPartitionedAccelerationStructureInfoNV {
	StructureType                                    s_type                         ;
	void*                                            p_next                         ;
	PartitionedAccelerationStructureInstancesInputNV input                          ;
	DeviceAddress                                    src_acceleration_structure_data;
	DeviceAddress                                    dst_acceleration_structure_data;
	DeviceAddress                                    scratch_data                   ;
	DeviceAddress                                    src_infos                      ;
	DeviceAddress                                    src_infos_count                ;
}

struct PhysicalDeviceDeviceGeneratedCommandsFeaturesEXT {
	StructureType s_type                           ;
	void*         p_next                           ;
	uint          device_generated_commands        ;
	uint          dynamic_generated_pipeline_layout;
}

struct PhysicalDeviceDeviceGeneratedCommandsPropertiesEXT {
	StructureType                     s_type                                                    ;
	void*                             p_next                                                    ;
	uint                              max_indirect_pipeline_count                               ;
	uint                              max_indirect_shader_object_count                          ;
	uint                              max_indirect_sequence_count                               ;
	uint                              max_indirect_commands_token_count                         ;
	uint                              max_indirect_commands_token_offset                        ;
	uint                              max_indirect_commands_indirect_stride                     ;
	IndirectCommandsInputModeFlagsEXT supported_indirect_commands_input_modes                   ;
	ShaderStageFlags                  supported_indirect_commands_shader_stages                 ;
	ShaderStageFlags                  supported_indirect_commands_shader_stages_pipeline_binding;
	ShaderStageFlags                  supported_indirect_commands_shader_stages_shader_binding  ;
	uint                              device_generated_commands_transform_feedback              ;
	uint                              device_generated_commands_multi_draw_indirect_count       ;
}

struct GeneratedCommandsMemoryRequirementsInfoEXT {
	StructureType             s_type                  ;
	void*                     p_next                  ;
	IndirectExecutionSetEXT   indirect_execution_set  ;
	IndirectCommandsLayoutEXT indirect_commands_layout;
	uint                      max_sequence_count      ;
	uint                      max_draw_count          ;
}

struct IndirectExecutionSetPipelineInfoEXT {
	StructureType s_type            ;
	void*         p_next            ;
	Pipeline      initial_pipeline  ;
	uint          max_pipeline_count;
}

struct IndirectExecutionSetShaderLayoutInfoEXT {
	StructureType        s_type          ;
	void*                p_next          ;
	uint                 set_layout_count;
	DescriptorSetLayout* p_set_layouts   ;
}

struct IndirectExecutionSetShaderInfoEXT {
	StructureType                            s_type                   ;
	void*                                    p_next                   ;
	uint                                     shader_count             ;
	ShaderEXT*                               p_initial_shaders        ;
	IndirectExecutionSetShaderLayoutInfoEXT* p_set_layout_infos       ;
	uint                                     max_shader_count         ;
	uint                                     push_constant_range_count;
	PushConstantRange*                       p_push_constant_ranges   ;
}

union IndirectExecutionSetInfoEXT {
	IndirectExecutionSetPipelineInfoEXT* p_pipeline_info;
	IndirectExecutionSetShaderInfoEXT*   p_shader_info  ;
}

struct IndirectExecutionSetCreateInfoEXT {
	StructureType                   s_type;
	void*                           p_next;
	IndirectExecutionSetInfoTypeEXT type  ;
	IndirectExecutionSetInfoEXT     info  ;
}

struct GeneratedCommandsInfoEXT {
	StructureType             s_type                  ;
	void*                     p_next                  ;
	ShaderStageFlags          shader_stages           ;
	IndirectExecutionSetEXT   indirect_execution_set  ;
	IndirectCommandsLayoutEXT indirect_commands_layout;
	DeviceAddress             indirect_address        ;
	DeviceSize                indirect_address_size   ;
	DeviceAddress             preprocess_address      ;
	DeviceSize                preprocess_size         ;
	uint                      max_sequence_count      ;
	DeviceAddress             sequence_count_address  ;
	uint                      max_draw_count          ;
}

struct WriteIndirectExecutionSetPipelineEXT {
	StructureType s_type  ;
	void*         p_next  ;
	uint          index   ;
	Pipeline      pipeline;
}

struct IndirectCommandsPushConstantTokenEXT {
	PushConstantRange update_range;
}

struct IndirectCommandsVertexBufferTokenEXT {
	uint vertex_binding_unit;
}

struct IndirectCommandsIndexBufferTokenEXT {
	IndirectCommandsInputModeFlagsEXT mode;
}

struct IndirectCommandsExecutionSetTokenEXT {
	IndirectExecutionSetInfoTypeEXT type         ;
	ShaderStageFlags                shader_stages;
}

union IndirectCommandsTokenDataEXT {
	IndirectCommandsPushConstantTokenEXT* p_push_constant;
	IndirectCommandsVertexBufferTokenEXT* p_vertex_buffer;
	IndirectCommandsIndexBufferTokenEXT*  p_index_buffer ;
	IndirectCommandsExecutionSetTokenEXT* p_execution_set;
}

struct IndirectCommandsLayoutTokenEXT {
	StructureType                s_type;
	void*                        p_next;
	IndirectCommandsTokenTypeEXT type  ;
	IndirectCommandsTokenDataEXT data  ;
	uint                         offset;
}

struct IndirectCommandsLayoutCreateInfoEXT {
	StructureType                       s_type         ;
	void*                               p_next         ;
	IndirectCommandsLayoutUsageFlagsEXT flags          ;
	ShaderStageFlags                    shader_stages  ;
	uint                                indirect_stride;
	PipelineLayout                      pipeline_layout;
	uint                                token_count    ;
	IndirectCommandsLayoutTokenEXT*     p_tokens       ;
}

struct DrawIndirectCountIndirectCommandEXT {
	DeviceAddress buffer_address;
	uint          stride        ;
	uint          command_count ;
}

struct BindVertexBufferIndirectCommandEXT {
	DeviceAddress buffer_address;
	uint          size          ;
	uint          stride        ;
}

struct BindIndexBufferIndirectCommandEXT {
	DeviceAddress buffer_address;
	uint          size          ;
	IndexType     index_type    ;
}

struct GeneratedCommandsPipelineInfoEXT {
	StructureType s_type  ;
	void*         p_next  ;
	Pipeline      pipeline;
}

struct GeneratedCommandsShaderInfoEXT {
	StructureType s_type      ;
	void*         p_next      ;
	uint          shader_count;
	ShaderEXT*    p_shaders   ;
}

struct WriteIndirectExecutionSetShaderEXT {
	StructureType s_type;
	void*         p_next;
	uint          index ;
	ShaderEXT     shader;
}

struct PhysicalDeviceImageAlignmentControlFeaturesMESA {
	StructureType s_type                 ;
	void*         p_next                 ;
	uint          image_alignment_control;
}

struct PhysicalDeviceImageAlignmentControlPropertiesMESA {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          supported_image_alignment_mask;
}

struct ImageAlignmentControlCreateInfoMESA {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          maximum_requested_alignment;
}

struct PhysicalDeviceDepthClampControlFeaturesEXT {
	StructureType s_type             ;
	void*         p_next             ;
	uint          depth_clamp_control;
}

struct PipelineViewportDepthClampControlCreateInfoEXT {
	StructureType       s_type             ;
	void*               p_next             ;
	DepthClampModeEXT   depth_clamp_mode   ;
	DepthClampRangeEXT* p_depth_clamp_range;
}

struct PhysicalDeviceHdrVividFeaturesHUAWEI {
	StructureType s_type   ;
	void*         p_next   ;
	uint          hdr_vivid;
}

struct HdrVividDynamicMetadataHUAWEI {
	StructureType s_type               ;
	void*         p_next               ;
	usz           dynamic_metadata_size;
	void*         p_dynamic_metadata   ;
}

struct CooperativeMatrixFlexibleDimensionsPropertiesNV {
	StructureType    s_type                 ;
	void*            p_next                 ;
	uint             m_granularity          ;
	uint             n_granularity          ;
	uint             k_granularity          ;
	ComponentTypeKHR a_type                 ;
	ComponentTypeKHR b_type                 ;
	ComponentTypeKHR c_type                 ;
	ComponentTypeKHR result_type            ;
	uint             saturating_accumulation;
	ScopeKHR         scope                  ;
	uint             workgroup_invocations  ;
}

struct PhysicalDeviceCooperativeMatrix2FeaturesNV {
	StructureType s_type                                   ;
	void*         p_next                                   ;
	uint          cooperative_matrix_workgroup_scope       ;
	uint          cooperative_matrix_flexible_dimensions   ;
	uint          cooperative_matrix_reductions            ;
	uint          cooperative_matrix_conversions           ;
	uint          cooperative_matrix_per_element_operations;
	uint          cooperative_matrix_tensor_addressing     ;
	uint          cooperative_matrix_block_loads           ;
}

struct PhysicalDeviceCooperativeMatrix2PropertiesNV {
	StructureType s_type                                                   ;
	void*         p_next                                                   ;
	uint          cooperative_matrix_workgroup_scope_max_workgroup_size    ;
	uint          cooperative_matrix_flexible_dimensions_max_dimension     ;
	uint          cooperative_matrix_workgroup_scope_reserved_shared_memory;
}

struct PhysicalDevicePipelineOpacityMicromapFeaturesARM {
	StructureType s_type                   ;
	void*         p_next                   ;
	uint          pipeline_opacity_micromap;
}

struct PhysicalDeviceVertexAttributeRobustnessFeaturesEXT {
	StructureType s_type                     ;
	void*         p_next                     ;
	uint          vertex_attribute_robustness;
}

struct AccelerationStructureBuildRangeInfoKHR {
	uint primitive_count ;
	uint primitive_offset;
	uint first_vertex    ;
	uint transform_offset;
}

struct AccelerationStructureGeometryTrianglesDataKHR {
	StructureType               s_type        ;
	void*                       p_next        ;
	Format                      vertex_format ;
	DeviceOrHostAddressConstKHR vertex_data   ;
	DeviceSize                  vertex_stride ;
	uint                        max_vertex    ;
	IndexType                   index_type    ;
	DeviceOrHostAddressConstKHR index_data    ;
	DeviceOrHostAddressConstKHR transform_data;
}

struct AccelerationStructureGeometryAabbsDataKHR {
	StructureType               s_type;
	void*                       p_next;
	DeviceOrHostAddressConstKHR data  ;
	DeviceSize                  stride;
}

struct AccelerationStructureGeometryInstancesDataKHR {
	StructureType               s_type           ;
	void*                       p_next           ;
	uint                        array_of_pointers;
	DeviceOrHostAddressConstKHR data             ;
}

union AccelerationStructureGeometryDataKHR {
	AccelerationStructureGeometryTrianglesDataKHR triangles;
	AccelerationStructureGeometryAabbsDataKHR     aabbs    ;
	AccelerationStructureGeometryInstancesDataKHR instances;
}

struct AccelerationStructureGeometryKHR {
	StructureType                        s_type       ;
	void*                                p_next       ;
	GeometryTypeKHR                      geometry_type;
	AccelerationStructureGeometryDataKHR geometry     ;
	GeometryFlagsKHR                     flags        ;
}

struct AccelerationStructureBuildGeometryInfoKHR {
	StructureType                      s_type                    ;
	void*                              p_next                    ;
	AccelerationStructureTypeKHR       type                      ;
	BuildAccelerationStructureFlagsKHR flags                     ;
	BuildAccelerationStructureModeKHR  mode                      ;
	AccelerationStructureKHR           src_acceleration_structure;
	AccelerationStructureKHR           dst_acceleration_structure;
	uint                               geometry_count            ;
	AccelerationStructureGeometryKHR*  p_geometries              ;
	AccelerationStructureGeometryKHR** pp_geometries             ;
	DeviceOrHostAddressKHR             scratch_data              ;
}

struct AccelerationStructureCreateInfoKHR {
	StructureType                       s_type        ;
	void*                               p_next        ;
	AccelerationStructureCreateFlagsKHR create_flags  ;
	Buffer                              buffer        ;
	DeviceSize                          offset        ;
	DeviceSize                          size          ;
	AccelerationStructureTypeKHR        type          ;
	DeviceAddress                       device_address;
}

struct WriteDescriptorSetAccelerationStructureKHR {
	StructureType             s_type                      ;
	void*                     p_next                      ;
	uint                      acceleration_structure_count;
	AccelerationStructureKHR* p_acceleration_structures   ;
}

struct PhysicalDeviceAccelerationStructureFeaturesKHR {
	StructureType s_type                                                     ;
	void*         p_next                                                     ;
	uint          acceleration_structure                                     ;
	uint          acceleration_structure_capture_replay                      ;
	uint          acceleration_structure_indirect_build                      ;
	uint          acceleration_structure_host_commands                       ;
	uint          descriptor_binding_acceleration_structure_update_after_bind;
}

struct PhysicalDeviceAccelerationStructurePropertiesKHR {
	StructureType s_type                                                            ;
	void*         p_next                                                            ;
	ulong         max_geometry_count                                                ;
	ulong         max_instance_count                                                ;
	ulong         max_primitive_count                                               ;
	uint          max_per_stage_descriptor_acceleration_structures                  ;
	uint          max_per_stage_descriptor_update_after_bind_acceleration_structures;
	uint          max_descriptor_set_acceleration_structures                        ;
	uint          max_descriptor_set_update_after_bind_acceleration_structures      ;
	uint          min_acceleration_structure_scratch_offset_alignment               ;
}

struct AccelerationStructureDeviceAddressInfoKHR {
	StructureType            s_type                ;
	void*                    p_next                ;
	AccelerationStructureKHR acceleration_structure;
}

struct AccelerationStructureVersionInfoKHR {
	StructureType s_type        ;
	void*         p_next        ;
	ZString       p_version_data;
}

struct CopyAccelerationStructureToMemoryInfoKHR {
	StructureType                    s_type;
	void*                            p_next;
	AccelerationStructureKHR         src   ;
	DeviceOrHostAddressKHR           dst   ;
	CopyAccelerationStructureModeKHR mode  ;
}

struct CopyMemoryToAccelerationStructureInfoKHR {
	StructureType                    s_type;
	void*                            p_next;
	DeviceOrHostAddressConstKHR      src   ;
	AccelerationStructureKHR         dst   ;
	CopyAccelerationStructureModeKHR mode  ;
}

struct CopyAccelerationStructureInfoKHR {
	StructureType                    s_type;
	void*                            p_next;
	AccelerationStructureKHR         src   ;
	AccelerationStructureKHR         dst   ;
	CopyAccelerationStructureModeKHR mode  ;
}

struct RayTracingShaderGroupCreateInfoKHR {
	StructureType                s_type                              ;
	void*                        p_next                              ;
	RayTracingShaderGroupTypeKHR type                                ;
	uint                         general_shader                      ;
	uint                         closest_hit_shader                  ;
	uint                         any_hit_shader                      ;
	uint                         intersection_shader                 ;
	void*                        p_shader_group_capture_replay_handle;
}

struct RayTracingPipelineInterfaceCreateInfoKHR {
	StructureType s_type                             ;
	void*         p_next                             ;
	uint          max_pipeline_ray_payload_size      ;
	uint          max_pipeline_ray_hit_attribute_size;
}

struct RayTracingPipelineCreateInfoKHR {
	StructureType                             s_type                          ;
	void*                                     p_next                          ;
	PipelineCreateFlags                       flags                           ;
	uint                                      stage_count                     ;
	PipelineShaderStageCreateInfo*            p_stages                        ;
	uint                                      group_count                     ;
	RayTracingShaderGroupCreateInfoKHR*       p_groups                        ;
	uint                                      max_pipeline_ray_recursion_depth;
	PipelineLibraryCreateInfoKHR*             p_library_info                  ;
	RayTracingPipelineInterfaceCreateInfoKHR* p_library_interface             ;
	PipelineDynamicStateCreateInfo*           p_dynamic_state                 ;
	PipelineLayout                            layout                          ;
	Pipeline                                  base_pipeline_handle            ;
	int                                       base_pipeline_index             ;
}

struct PhysicalDeviceRayTracingPipelineFeaturesKHR {
	StructureType s_type                                                       ;
	void*         p_next                                                       ;
	uint          ray_tracing_pipeline                                         ;
	uint          ray_tracing_pipeline_shader_group_handle_capture_replay      ;
	uint          ray_tracing_pipeline_shader_group_handle_capture_replay_mixed;
	uint          ray_tracing_pipeline_trace_rays_indirect                     ;
	uint          ray_traversal_primitive_culling                              ;
}

struct PhysicalDeviceRayTracingPipelinePropertiesKHR {
	StructureType s_type                                 ;
	void*         p_next                                 ;
	uint          shader_group_handle_size               ;
	uint          max_ray_recursion_depth                ;
	uint          max_shader_group_stride                ;
	uint          shader_group_base_alignment            ;
	uint          shader_group_handle_capture_replay_size;
	uint          max_ray_dispatch_invocation_count      ;
	uint          shader_group_handle_alignment          ;
	uint          max_ray_hit_attribute_size             ;
}

struct TraceRaysIndirectCommandKHR {
	uint width ;
	uint height;
	uint depth ;
}

struct PhysicalDeviceRayQueryFeaturesKHR {
	StructureType s_type   ;
	void*         p_next   ;
	uint          ray_query;
}

struct PhysicalDeviceMeshShaderFeaturesEXT {
	StructureType s_type                                     ;
	void*         p_next                                     ;
	uint          task_shader                                ;
	uint          mesh_shader                                ;
	uint          multiview_mesh_shader                      ;
	uint          primitive_fragment_shading_rate_mesh_shader;
	uint          mesh_shader_queries                        ;
}

struct PhysicalDeviceMeshShaderPropertiesEXT {
	StructureType s_type                                   ;
	void*         p_next                                   ;
	uint          max_task_work_group_total_count          ;
	uint[3]       max_task_work_group_count                ;
	uint          max_task_work_group_invocations          ;
	uint[3]       max_task_work_group_size                 ;
	uint          max_task_payload_size                    ;
	uint          max_task_shared_memory_size              ;
	uint          max_task_payload_and_shared_memory_size  ;
	uint          max_mesh_work_group_total_count          ;
	uint[3]       max_mesh_work_group_count                ;
	uint          max_mesh_work_group_invocations          ;
	uint[3]       max_mesh_work_group_size                 ;
	uint          max_mesh_shared_memory_size              ;
	uint          max_mesh_payload_and_shared_memory_size  ;
	uint          max_mesh_output_memory_size              ;
	uint          max_mesh_payload_and_output_memory_size  ;
	uint          max_mesh_output_components               ;
	uint          max_mesh_output_vertices                 ;
	uint          max_mesh_output_primitives               ;
	uint          max_mesh_output_layers                   ;
	uint          max_mesh_multiview_view_count            ;
	uint          mesh_output_per_vertex_granularity       ;
	uint          mesh_output_per_primitive_granularity    ;
	uint          max_preferred_task_work_group_invocations;
	uint          max_preferred_mesh_work_group_invocations;
	uint          prefers_local_invocation_vertex_output   ;
	uint          prefers_local_invocation_primitive_output;
	uint          prefers_compact_vertex_output            ;
	uint          prefers_compact_primitive_output         ;
}

struct DrawMeshTasksIndirectCommandEXT {
	uint group_count_x;
	uint group_count_y;
	uint group_count_z;
}

struct Win32SurfaceCreateInfoKHR {
	StructureType              s_type   ;
	void*                      p_next   ;
	Win32SurfaceCreateFlagsKHR flags    ;
	Win32_HINSTANCE            hinstance;
	Win32_HWND                 hwnd     ;
}

struct ImportMemoryWin32HandleInfoKHR {
	StructureType                 s_type     ;
	void*                         p_next     ;
	ExternalMemoryHandleTypeFlags handle_type;
	Win32_HANDLE                  handle     ;
	Win32_LPCWSTR                 name       ;
}

struct ExportMemoryWin32HandleInfoKHR {
	StructureType              s_type      ;
	void*                      p_next      ;
	Win32_SECURITY_ATTRIBUTES* p_attributes;
	Win32_DWORD                dw_access   ;
	Win32_LPCWSTR              name        ;
}

struct MemoryWin32HandlePropertiesKHR {
	StructureType s_type          ;
	void*         p_next          ;
	uint          memory_type_bits;
}

struct MemoryGetWin32HandleInfoKHR {
	StructureType                 s_type     ;
	void*                         p_next     ;
	DeviceMemory                  memory     ;
	ExternalMemoryHandleTypeFlags handle_type;
}

struct Win32KeyedMutexAcquireReleaseInfoKHR {
	StructureType s_type            ;
	void*         p_next            ;
	uint          acquire_count     ;
	DeviceMemory* p_acquire_syncs   ;
	ulong*        p_acquire_keys    ;
	uint*         p_acquire_timeouts;
	uint          release_count     ;
	DeviceMemory* p_release_syncs   ;
	ulong*        p_release_keys    ;
}

struct ImportSemaphoreWin32HandleInfoKHR {
	StructureType                    s_type     ;
	void*                            p_next     ;
	Semaphore                        semaphore  ;
	SemaphoreImportFlags             flags      ;
	ExternalSemaphoreHandleTypeFlags handle_type;
	Win32_HANDLE                     handle     ;
	Win32_LPCWSTR                    name       ;
}

struct ExportSemaphoreWin32HandleInfoKHR {
	StructureType              s_type      ;
	void*                      p_next      ;
	Win32_SECURITY_ATTRIBUTES* p_attributes;
	Win32_DWORD                dw_access   ;
	Win32_LPCWSTR              name        ;
}

struct D3D12FenceSubmitInfoKHR {
	StructureType s_type                       ;
	void*         p_next                       ;
	uint          wait_semaphore_values_count  ;
	ulong*        p_wait_semaphore_values      ;
	uint          signal_semaphore_values_count;
	ulong*        p_signal_semaphore_values    ;
}

struct SemaphoreGetWin32HandleInfoKHR {
	StructureType                    s_type     ;
	void*                            p_next     ;
	Semaphore                        semaphore  ;
	ExternalSemaphoreHandleTypeFlags handle_type;
}

struct ImportFenceWin32HandleInfoKHR {
	StructureType                s_type     ;
	void*                        p_next     ;
	Fence                        fence      ;
	FenceImportFlags             flags      ;
	ExternalFenceHandleTypeFlags handle_type;
	Win32_HANDLE                 handle     ;
	Win32_LPCWSTR                name       ;
}

struct ExportFenceWin32HandleInfoKHR {
	StructureType              s_type      ;
	void*                      p_next      ;
	Win32_SECURITY_ATTRIBUTES* p_attributes;
	Win32_DWORD                dw_access   ;
	Win32_LPCWSTR              name        ;
}

struct FenceGetWin32HandleInfoKHR {
	StructureType                s_type     ;
	void*                        p_next     ;
	Fence                        fence      ;
	ExternalFenceHandleTypeFlags handle_type;
}

struct ImportMemoryWin32HandleInfoNV {
	StructureType                   s_type     ;
	void*                           p_next     ;
	ExternalMemoryHandleTypeFlagsNV handle_type;
	Win32_HANDLE                    handle     ;
}

struct ExportMemoryWin32HandleInfoNV {
	StructureType              s_type      ;
	void*                      p_next      ;
	Win32_SECURITY_ATTRIBUTES* p_attributes;
	Win32_DWORD                dw_access   ;
}

struct Win32KeyedMutexAcquireReleaseInfoNV {
	StructureType s_type                        ;
	void*         p_next                        ;
	uint          acquire_count                 ;
	DeviceMemory* p_acquire_syncs               ;
	ulong*        p_acquire_keys                ;
	uint*         p_acquire_timeout_milliseconds;
	uint          release_count                 ;
	DeviceMemory* p_release_syncs               ;
	ulong*        p_release_keys                ;
}

struct SurfaceFullScreenExclusiveInfoEXT {
	StructureType          s_type               ;
	void*                  p_next               ;
	FullScreenExclusiveEXT full_screen_exclusive;
}

struct SurfaceCapabilitiesFullScreenExclusiveEXT {
	StructureType s_type                         ;
	void*         p_next                         ;
	uint          full_screen_exclusive_supported;
}

struct SurfaceFullScreenExclusiveWin32InfoEXT {
	StructureType  s_type  ;
	void*          p_next  ;
	Win32_HMONITOR hmonitor;
}

struct MetalSurfaceCreateInfoEXT {
	StructureType              s_type ;
	void*                      p_next ;
	MetalSurfaceCreateFlagsEXT flags  ;
	CAMetalLayer*              p_layer;
}

struct ExportMetalObjectCreateInfoEXT {
	StructureType                 s_type            ;
	void*                         p_next            ;
	ExportMetalObjectTypeFlagsEXT export_object_type;
}

struct ExportMetalObjectsInfoEXT {
	StructureType s_type;
	void*         p_next;
}

struct ExportMetalDeviceInfoEXT {
	StructureType s_type    ;
	void*         p_next    ;
	MTLDevice_id  mtl_device;
}

struct ExportMetalCommandQueueInfoEXT {
	StructureType      s_type           ;
	void*              p_next           ;
	Queue              queue            ;
	MTLCommandQueue_id mtl_command_queue;
}

struct ExportMetalBufferInfoEXT {
	StructureType s_type    ;
	void*         p_next    ;
	DeviceMemory  memory    ;
	MTLBuffer_id  mtl_buffer;
}

struct ImportMetalBufferInfoEXT {
	StructureType s_type    ;
	void*         p_next    ;
	MTLBuffer_id  mtl_buffer;
}

struct ExportMetalTextureInfoEXT {
	StructureType    s_type     ;
	void*            p_next     ;
	Image            image      ;
	ImageView        image_view ;
	BufferView       buffer_view;
	ImageAspectFlags plane      ;
	MTLTexture_id    mtl_texture;
}

struct ImportMetalTextureInfoEXT {
	StructureType    s_type     ;
	void*            p_next     ;
	ImageAspectFlags plane      ;
	MTLTexture_id    mtl_texture;
}

struct ExportMetalIOSurfaceInfoEXT {
	StructureType s_type    ;
	void*         p_next    ;
	Image         image     ;
	IOSurfaceRef  io_surface;
}

struct ImportMetalIOSurfaceInfoEXT {
	StructureType s_type    ;
	void*         p_next    ;
	IOSurfaceRef  io_surface;
}

struct ExportMetalSharedEventInfoEXT {
	StructureType     s_type          ;
	void*             p_next          ;
	Semaphore         semaphore       ;
	Event             event           ;
	MTLSharedEvent_id mtl_shared_event;
}

struct ImportMetalSharedEventInfoEXT {
	StructureType     s_type          ;
	void*             p_next          ;
	MTLSharedEvent_id mtl_shared_event;
}

struct ImportMemoryMetalHandleInfoEXT {
	StructureType                 s_type     ;
	void*                         p_next     ;
	ExternalMemoryHandleTypeFlags handle_type;
	void*                         handle     ;
}

struct MemoryMetalHandlePropertiesEXT {
	StructureType s_type          ;
	void*         p_next          ;
	uint          memory_type_bits;
}

struct MemoryGetMetalHandleInfoEXT {
	StructureType                 s_type     ;
	void*                         p_next     ;
	DeviceMemory                  memory     ;
	ExternalMemoryHandleTypeFlags handle_type;
}

struct MacOSSurfaceCreateInfoMVK {
	StructureType              s_type;
	void*                      p_next;
	MacOSSurfaceCreateFlagsMVK flags ;
	void*                      p_view;
}

struct IOSSurfaceCreateInfoMVK {
	StructureType            s_type;
	void*                    p_next;
	IOSSurfaceCreateFlagsMVK flags ;
	void*                    p_view;
}

struct WaylandSurfaceCreateInfoKHR {
	StructureType                s_type ;
	void*                        p_next ;
	WaylandSurfaceCreateFlagsKHR flags  ;
	WLDisplay*                   display;
	WLSurface*                   surface;
}

struct XlibSurfaceCreateInfoKHR {
	StructureType             s_type;
	void*                     p_next;
	XlibSurfaceCreateFlagsKHR flags ;
	XlibDisplay*              dpy   ;
	XlibWindow                window;
}

struct XcbSurfaceCreateInfoKHR {
	StructureType            s_type    ;
	void*                    p_next    ;
	XcbSurfaceCreateFlagsKHR flags     ;
	XCBConnection*           connection;
	XCBWindow                window    ;
}

bitstruct VideoAV1ColorConfigFlags : uint {
    bool mono_chrome: 0;
    bool color_range: 1;
    bool separate_uv_delta_q: 2;
    bool color_description_present: 3;
    uint reserved: 4..31;
}
struct VideoAV1ColorConfig {
	VideoAV1ColorConfigFlags        flags                   ;
	char                            bit_depth               ;
	char                            subsampling_x           ;
	char                            subsampling_y           ;
	char                            reserved1               ;
	VideoAV1ColorPrimaries          color_primaries         ;
	VideoAV1TransferCharacteristics transfer_characteristics;
	VideoAV1MatrixCoefficients      matrix_coefficients     ;
	VideoAV1ChromaSamplePosition    chroma_sample_position  ;
}

bitstruct VideoAV1TimingInfoFlags : uint {
    bool equal_picture_interval: 0;
    uint reserved: 1..31;
}
struct VideoAV1TimingInfo {
	VideoAV1TimingInfoFlags flags                        ;
	uint                    num_units_in_display_tick    ;
	uint                    time_scale                   ;
	uint                    num_ticks_per_picture_minus_1;
}

bitstruct VideoAV1LoopFilterFlags : uint {
    bool loop_filter_delta_enabled: 0;
    bool loop_filter_delta_update: 1;
    uint reserved: 2..31;
}
struct VideoAV1LoopFilter {
	VideoAV1LoopFilterFlags                   flags                  ;
	char[VIDEO_AV1_MAX_LOOP_FILTER_STRENGTHS] loop_filter_level      ;
	char                                      loop_filter_sharpness  ;
	char                                      update_ref_delta       ;
	ichar[VIDEO_AV1_TOTAL_REFS_PER_FRAME]     loop_filter_ref_deltas ;
	char                                      update_mode_delta      ;
	ichar[VIDEO_AV1_LOOP_FILTER_ADJUSTMENTS]  loop_filter_mode_deltas;
}

bitstruct VideoAV1QuantizationFlags : uint {
    bool using_qmatrix: 0;
    bool diff_uv_delta: 1;
    uint reserved: 2..31;
}
struct VideoAV1Quantization {
	VideoAV1QuantizationFlags flags      ;
	char                      base_q_idx ;
	ichar                     delta_qy_dc;
	ichar                     delta_qu_dc;
	ichar                     delta_qu_ac;
	ichar                     delta_qv_dc;
	ichar                     delta_qv_ac;
	char                      qm_y       ;
	char                      qm_u       ;
	char                      qm_v       ;
}

struct VideoAV1Segmentation {
	char[VIDEO_AV1_MAX_SEGMENTS]                         feature_enabled;
	short[VIDEO_AV1_MAX_SEGMENTS][VIDEO_AV1_SEG_LVL_MAX] feature_data   ;
}

bitstruct VideoAV1TileInfoFlags : uint {
    bool uniform_tile_spacing: 0;
    uint reserved: 1..31;
}
struct VideoAV1TileInfo {
	VideoAV1TileInfoFlags flags                  ;
	char                  tile_cols              ;
	char                  tile_rows              ;
	ushort                context_update_tile_id ;
	char                  tile_size_bytes_minus_1;
	char[7]               reserved1              ;
	ushort*               p_mi_col_starts        ;
	ushort*               p_mi_row_starts        ;
	ushort*               p_width_in_sbs_minus1  ;
	ushort*               p_height_in_sbs_minus1 ;
}

struct VideoAV1CDEF {
	char                                      cdef_damping_minus_3;
	char                                      cdef_bits           ;
	char[VIDEO_AV1_MAX_CDEF_FILTER_STRENGTHS] cdef_y_pri_strength ;
	char[VIDEO_AV1_MAX_CDEF_FILTER_STRENGTHS] cdef_y_sec_strength ;
	char[VIDEO_AV1_MAX_CDEF_FILTER_STRENGTHS] cdef_uv_pri_strength;
	char[VIDEO_AV1_MAX_CDEF_FILTER_STRENGTHS] cdef_uv_sec_strength;
}

struct VideoAV1LoopRestoration {
	VideoAV1FrameRestorationType[VIDEO_AV1_MAX_NUM_PLANES] frame_restoration_type;
	ushort[VIDEO_AV1_MAX_NUM_PLANES]                       loop_restoration_size ;
}

struct VideoAV1GlobalMotion {
	char[VIDEO_AV1_NUM_REF_FRAMES]                                gm_type  ;
	int[VIDEO_AV1_NUM_REF_FRAMES][VIDEO_AV1_GLOBAL_MOTION_PARAMS] gm_params;
}

bitstruct VideoAV1FilmGrainFlags : uint {
    bool chroma_scaling_from_luma: 0;
    bool overlap: 1;
    bool clip_to_restricted_range: 2;
    bool update_grain: 3;
    uint reserved: 4..31;
}
struct VideoAV1FilmGrain {
	VideoAV1FilmGrainFlags              flags                    ;
	char                                grain_scaling_minus_8    ;
	char                                ar_coeff_lag             ;
	char                                ar_coeff_shift_minus_6   ;
	char                                grain_scale_shift        ;
	ushort                              grain_seed               ;
	char                                film_grain_params_ref_idx;
	char                                num_y_points             ;
	char[VIDEO_AV1_MAX_NUM_Y_POINTS]    point_y_value            ;
	char[VIDEO_AV1_MAX_NUM_Y_POINTS]    point_y_scaling          ;
	char                                num_cb_points            ;
	char[VIDEO_AV1_MAX_NUM_CB_POINTS]   point_cb_value           ;
	char[VIDEO_AV1_MAX_NUM_CB_POINTS]   point_cb_scaling         ;
	char                                num_cr_points            ;
	char[VIDEO_AV1_MAX_NUM_CR_POINTS]   point_cr_value           ;
	char[VIDEO_AV1_MAX_NUM_CR_POINTS]   point_cr_scaling         ;
	ichar[VIDEO_AV1_MAX_NUM_POS_LUMA]   ar_coeffs_y_plus_128     ;
	ichar[VIDEO_AV1_MAX_NUM_POS_CHROMA] ar_coeffs_cb_plus_128    ;
	ichar[VIDEO_AV1_MAX_NUM_POS_CHROMA] ar_coeffs_cr_plus_128    ;
	char                                cb_mult                  ;
	char                                cb_luma_mult             ;
	ushort                              cb_offset                ;
	char                                cr_mult                  ;
	char                                cr_luma_mult             ;
	ushort                              cr_offset                ;
}

bitstruct VideoAV1SequenceHeaderFlags : uint {
    bool still_picture: 0;
    bool reduced_still_picture_header: 1;
    bool use_128x128_superblock: 2;
    bool enable_filter_intra: 3;
    bool enable_intra_edge_filter: 4;
    bool enable_interintra_compound: 5;
    bool enable_masked_compound: 6;
    bool enable_warped_motion: 7;
    bool enable_dual_filter: 8;
    bool enable_order_hint: 9;
    bool enable_jnt_comp: 10;
    bool enable_ref_frame_mvs: 11;
    bool frame_id_numbers_present: 12;
    bool enable_superres: 13;
    bool enable_cdef: 14;
    bool enable_restoration: 15;
    bool film_grain_params_present: 16;
    bool timing_info_present: 17;
    bool initial_display_delay_present: 18;
    uint reserved: 19..31;
}
struct VideoAV1SequenceHeader {
	VideoAV1SequenceHeaderFlags flags                             ;
	VideoAV1Profile             seq_profile                       ;
	char                        frame_width_bits_minus_1          ;
	char                        frame_height_bits_minus_1         ;
	ushort                      max_frame_width_minus_1           ;
	ushort                      max_frame_height_minus_1          ;
	char                        delta_frame_id_length_minus_2     ;
	char                        additional_frame_id_length_minus_1;
	char                        order_hint_bits_minus_1           ;
	char                        seq_force_integer_mv              ;
	char                        seq_force_screen_content_tools    ;
	char[5]                     reserved1                         ;
	VideoAV1ColorConfig*        p_color_config                    ;
	VideoAV1TimingInfo*         p_timing_info                     ;
}

bitstruct VideoDecodeAV1PictureInfoFlags : uint {
    bool error_resilient_mode: 0;
    bool disable_cdf_update: 1;
    bool use_superres: 2;
    bool render_and_frame_size_different: 3;
    bool allow_screen_content_tools: 4;
    bool is_filter_switchable: 5;
    bool force_integer_mv: 6;
    bool frame_size_override: 7;
    bool buffer_removal_time_present: 8;
    bool allow_intrabc: 9;
    bool frame_refs_short_signaling: 10;
    bool allow_high_precision_mv: 11;
    bool is_motion_mode_switchable: 12;
    bool use_ref_frame_mvs: 13;
    bool disable_frame_end_update_cdf: 14;
    bool allow_warped_motion: 15;
    bool reduced_tx_set: 16;
    bool reference_select: 17;
    bool skip_mode_present: 18;
    bool delta_q_present: 19;
    bool delta_lf_present: 20;
    bool delta_lf_multi: 21;
    bool segmentation_enabled: 22;
    bool segmentation_update_map: 23;
    bool segmentation_temporal_update: 24;
    bool segmentation_update_data: 25;
    bool uses_lr: 26;
    bool uses_chroma_lr: 27;
    bool apply_grain: 28;
    uint reserved: 29..31;
}
struct VideoDecodeAV1PictureInfo {
	VideoDecodeAV1PictureInfoFlags   flags               ;
	VideoAV1FrameType                frame_type          ;
	uint                             current_frame_id    ;
	char                             order_hint          ;
	char                             primary_ref_frame   ;
	char                             refresh_frame_flags ;
	char                             reserved1           ;
	VideoAV1InterpolationFilter      interpolation_filter;
	VideoAV1TxMode                   tx_mode             ;
	char                             delta_q_res         ;
	char                             delta_lf_res        ;
	char[VIDEO_AV1_SKIP_MODE_FRAMES] skip_mode_frame     ;
	char                             coded_denom         ;
	char[3]                          reserved2           ;
	char[VIDEO_AV1_NUM_REF_FRAMES]   order_hints         ;
	uint[VIDEO_AV1_NUM_REF_FRAMES]   expected_frame_id   ;
	VideoAV1TileInfo*                p_tile_info         ;
	VideoAV1Quantization*            p_quantization      ;
	VideoAV1Segmentation*            p_segmentation      ;
	VideoAV1LoopFilter*              p_loop_filter       ;
	VideoAV1CDEF*                    p_cdef              ;
	VideoAV1LoopRestoration*         p_loop_restoration  ;
	VideoAV1GlobalMotion*            p_global_motion     ;
	VideoAV1FilmGrain*               p_film_grain        ;
}

bitstruct VideoDecodeAV1ReferenceInfoFlags : uint {
    bool disable_frame_end_update_cdf: 0;
    bool segmentation_enabled: 1;
    uint reserved: 2..31;
}
struct VideoDecodeAV1ReferenceInfo {
	VideoDecodeAV1ReferenceInfoFlags flags              ;
	char                             frame_type         ;
	char                             ref_frame_sign_bias;
	char                             order_hint         ;
	char[VIDEO_AV1_NUM_REF_FRAMES]   saved_order_hints  ;
}

struct VideoEncodeAV1DecoderModelInfo {
	char buffer_delay_length_minus_1           ;
	char buffer_removal_time_length_minus_1    ;
	char frame_presentation_time_length_minus_1;
	char reserved1                             ;
	uint num_units_in_decoding_tick            ;
}

struct VideoEncodeAV1ExtensionHeader {
	char temporal_id;
	char spatial_id ;
}

bitstruct VideoEncodeAV1OperatingPointInfoFlags : uint {
    bool decoder_model_present_for_this_op: 0;
    bool low_delay_mode: 1;
    bool initial_display_delay_present_for_this_op: 2;
    uint reserved: 3..31;
}
struct VideoEncodeAV1OperatingPointInfo {
	VideoEncodeAV1OperatingPointInfoFlags flags                        ;
	ushort                                operating_point_idc          ;
	char                                  seq_level_idx                ;
	char                                  seq_tier                     ;
	uint                                  decoder_buffer_delay         ;
	uint                                  encoder_buffer_delay         ;
	char                                  initial_display_delay_minus_1;
}

bitstruct VideoEncodeAV1PictureInfoFlags : uint {
    bool error_resilient_mode: 0;
    bool disable_cdf_update: 1;
    bool use_superres: 2;
    bool render_and_frame_size_different: 3;
    bool allow_screen_content_tools: 4;
    bool is_filter_switchable: 5;
    bool force_integer_mv: 6;
    bool frame_size_override: 7;
    bool buffer_removal_time_present: 8;
    bool allow_intrabc: 9;
    bool frame_refs_short_signaling: 10;
    bool allow_high_precision_mv: 11;
    bool is_motion_mode_switchable: 12;
    bool use_ref_frame_mvs: 13;
    bool disable_frame_end_update_cdf: 14;
    bool allow_warped_motion: 15;
    bool reduced_tx_set: 16;
    bool skip_mode_present: 17;
    bool delta_q_present: 18;
    bool delta_lf_present: 19;
    bool delta_lf_multi: 20;
    bool segmentation_enabled: 21;
    bool segmentation_update_map: 22;
    bool segmentation_temporal_update: 23;
    bool segmentation_update_data: 24;
    bool uses_lr: 25;
    bool uses_chroma_lr: 26;
    bool show_frame: 27;
    bool showable_frame: 28;
    uint reserved: 29..31;
}
struct VideoEncodeAV1PictureInfo {
	VideoEncodeAV1PictureInfoFlags  flags                  ;
	VideoAV1FrameType               frame_type             ;
	uint                            frame_presentation_time;
	uint                            current_frame_id       ;
	char                            order_hint             ;
	char                            primary_ref_frame      ;
	char                            refresh_frame_flags    ;
	char                            coded_denom            ;
	ushort                          render_width_minus_1   ;
	ushort                          render_height_minus_1  ;
	VideoAV1InterpolationFilter     interpolation_filter   ;
	VideoAV1TxMode                  tx_mode                ;
	char                            delta_q_res            ;
	char                            delta_lf_res           ;
	char[VIDEO_AV1_NUM_REF_FRAMES]  ref_order_hint         ;
	ichar[VIDEO_AV1_REFS_PER_FRAME] ref_frame_idx          ;
	char[3]                         reserved1              ;
	uint[VIDEO_AV1_REFS_PER_FRAME]  delta_frame_id_minus_1 ;
	VideoAV1TileInfo*               p_tile_info            ;
	VideoAV1Quantization*           p_quantization         ;
	VideoAV1Segmentation*           p_segmentation         ;
	VideoAV1LoopFilter*             p_loop_filter          ;
	VideoAV1CDEF*                   p_cdef                 ;
	VideoAV1LoopRestoration*        p_loop_restoration     ;
	VideoAV1GlobalMotion*           p_global_motion        ;
	VideoEncodeAV1ExtensionHeader*  p_extension_header     ;
	uint*                           p_buffer_removal_times ;
}

bitstruct VideoEncodeAV1ReferenceInfoFlags : uint {
    bool disable_frame_end_update_cdf: 0;
    bool segmentation_enabled: 1;
    uint reserved: 2..31;
}
struct VideoEncodeAV1ReferenceInfo {
	VideoEncodeAV1ReferenceInfoFlags flags             ;
	uint                             ref_frame_id      ;
	VideoAV1FrameType                frame_type        ;
	char                             order_hint        ;
	char[3]                          reserved1         ;
	VideoEncodeAV1ExtensionHeader*   p_extension_header;
}

bitstruct VideoH264SpsVuiFlags : ushort /* Warning: unusual bitstruct size 12 bit, rounded up to 16 */ {
    bool aspect_ratio_info_present: 0;
    bool overscan_info_present: 1;
    bool overscan_appropriate: 2;
    bool video_signal_type_present: 3;
    bool video_full_range: 4;
    bool color_description_present: 5;
    bool chroma_loc_info_present: 6;
    bool timing_info_present: 7;
    bool fixed_frame_rate: 8;
    bool bitstream_restriction: 9;
    bool nal_hrd_parameters_present: 10;
    bool vcl_hrd_parameters_present: 11;
}
struct VideoH264HrdParameters {
	char                               cpb_cnt_minus1                         ;
	char                               bit_rate_scale                         ;
	char                               cpb_size_scale                         ;
	char                               reserved1                              ;
	uint[VIDEO_H264_CPB_CNT_LIST_SIZE] bit_rate_value_minus1                  ;
	uint[VIDEO_H264_CPB_CNT_LIST_SIZE] cpb_size_value_minus1                  ;
	char[VIDEO_H264_CPB_CNT_LIST_SIZE] cbr_flag                               ;
	uint                               initial_cpb_removal_delay_length_minus1;
	uint                               cpb_removal_delay_length_minus1        ;
	uint                               dpb_output_delay_length_minus1         ;
	uint                               time_offset_length                     ;
}

struct VideoH264SequenceParameterSetVui {
	VideoH264SpsVuiFlags    flags                              ;
	VideoH264AspectRatioIdc aspect_ratio_idc                   ;
	ushort                  sar_width                          ;
	ushort                  sar_height                         ;
	char                    video_format                       ;
	char                    colour_primaries                   ;
	char                    transfer_characteristics           ;
	char                    matrix_coefficients                ;
	uint                    num_units_in_tick                  ;
	uint                    time_scale                         ;
	char                    max_num_reorder_frames             ;
	char                    max_dec_frame_buffering            ;
	char                    chroma_sample_loc_type_top_field   ;
	char                    chroma_sample_loc_type_bottom_field;
	uint                    reserved1                          ;
	VideoH264HrdParameters* p_hrd_parameters                   ;
}

bitstruct VideoH264SpsFlags : ushort {
    bool constraint_set0: 0;
    bool constraint_set1: 1;
    bool constraint_set2: 2;
    bool constraint_set3: 3;
    bool constraint_set4: 4;
    bool constraint_set5: 5;
    bool direct_8x8_inference: 6;
    bool mb_adaptive_frame_field: 7;
    bool frame_mbs_only: 8;
    bool delta_pic_order_always_zero: 9;
    bool separate_colour_plane: 10;
    bool gaps_in_frame_num_value_allowed: 11;
    bool qpprime_y_zero_transform_bypass: 12;
    bool frame_cropping: 13;
    bool seq_scaling_matrix_present: 14;
    bool vui_parameters_present: 15;
}
struct VideoH264ScalingLists {
	ushort                                                                                scaling_list_present_mask      ;
	ushort                                                                                use_default_scaling_matrix_mask;
	char[VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS][VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS] scaling_list4x4                ;
	char[VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS][VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS] scaling_list8x8                ;
}

struct VideoH264SequenceParameterSet {
	VideoH264SpsFlags                 flags                                ;
	VideoH264ProfileIdc               profile_idc                          ;
	VideoH264LevelIdc                 level_idc                            ;
	VideoH264ChromaFormatIdc          chroma_format_idc                    ;
	char                              seq_parameter_set_id                 ;
	char                              bit_depth_luma_minus8                ;
	char                              bit_depth_chroma_minus8              ;
	char                              log2_max_frame_num_minus4            ;
	VideoH264PocType                  pic_order_cnt_type                   ;
	int                               offset_for_non_ref_pic               ;
	int                               offset_for_top_to_bottom_field       ;
	char                              log2_max_pic_order_cnt_lsb_minus4    ;
	char                              num_ref_frames_in_pic_order_cnt_cycle;
	char                              max_num_ref_frames                   ;
	char                              reserved1                            ;
	uint                              pic_width_in_mbs_minus1              ;
	uint                              pic_height_in_map_units_minus1       ;
	uint                              frame_crop_left_offset               ;
	uint                              frame_crop_right_offset              ;
	uint                              frame_crop_top_offset                ;
	uint                              frame_crop_bottom_offset             ;
	uint                              reserved2                            ;
	int*                              p_offset_for_ref_frame               ;
	VideoH264ScalingLists*            p_scaling_lists                      ;
	VideoH264SequenceParameterSetVui* p_sequence_parameter_set_vui         ;
}

bitstruct VideoH264PpsFlags : char {
    bool transform_8x8_mode: 0;
    bool redundant_pic_cnt_present: 1;
    bool constrained_intra_pred: 2;
    bool deblocking_filter_control_present: 3;
    bool weighted_pred: 4;
    bool bottom_field_pic_order_in_frame_present: 5;
    bool entropy_coding_mode: 6;
    bool pic_scaling_matrix_present: 7;
}
struct VideoH264PictureParameterSet {
	VideoH264PpsFlags          flags                               ;
	char                       seq_parameter_set_id                ;
	char                       pic_parameter_set_id                ;
	char                       num_ref_idx_l0_default_active_minus1;
	char                       num_ref_idx_l1_default_active_minus1;
	VideoH264WeightedBipredIdc weighted_bipred_idc                 ;
	ichar                      pic_init_qp_minus26                 ;
	ichar                      pic_init_qs_minus26                 ;
	ichar                      chroma_qp_index_offset              ;
	ichar                      second_chroma_qp_index_offset       ;
	VideoH264ScalingLists*     p_scaling_lists                     ;
}

bitstruct VideoDecodeH264PictureInfoFlags : char /* Warning: unusual bitstruct size 6 bit, rounded up to 8 */ {
    bool field_pic: 0;
    bool is_intra: 1;
    bool idr_pic: 2;
    bool bottom_field: 3;
    bool is_reference: 4;
    bool complementary_field_pair: 5;
}
struct VideoDecodeH264PictureInfo {
	VideoDecodeH264PictureInfoFlags                    flags               ;
	char                                               seq_parameter_set_id;
	char                                               pic_parameter_set_id;
	char                                               reserved1           ;
	char                                               reserved2           ;
	ushort                                             frame_num           ;
	ushort                                             idr_pic_id          ;
	int[VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE] pic_order_cnt       ;
}

bitstruct VideoDecodeH264ReferenceInfoFlags : char /* Warning: unusual bitstruct size 4 bit, rounded up to 8 */ {
    bool top_field: 0;
    bool bottom_field: 1;
    bool used_for_long_term_reference: 2;
    bool is_non_existing: 3;
}
struct VideoDecodeH264ReferenceInfo {
	VideoDecodeH264ReferenceInfoFlags                  flags        ;
	ushort                                             frame_num    ;
	ushort                                             reserved     ;
	int[VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE] pic_order_cnt;
}

struct VideoEncodeH264WeightTableFlags {
	uint luma_weight_l0_flag  ;
	uint chroma_weight_l0_flag;
	uint luma_weight_l1_flag  ;
	uint chroma_weight_l1_flag;
}

struct VideoEncodeH264WeightTable {
	VideoEncodeH264WeightTableFlags                                  flags                   ;
	char                                                             luma_log2_weight_denom  ;
	char                                                             chroma_log2_weight_denom;
	ichar[VIDEO_H264_MAX_NUM_LIST_REF]                               luma_weight_l0          ;
	ichar[VIDEO_H264_MAX_NUM_LIST_REF]                               luma_offset_l0          ;
	ichar[VIDEO_H264_MAX_NUM_LIST_REF][VIDEO_H264_MAX_CHROMA_PLANES] chroma_weight_l0        ;
	ichar[VIDEO_H264_MAX_NUM_LIST_REF][VIDEO_H264_MAX_CHROMA_PLANES] chroma_offset_l0        ;
	ichar[VIDEO_H264_MAX_NUM_LIST_REF]                               luma_weight_l1          ;
	ichar[VIDEO_H264_MAX_NUM_LIST_REF]                               luma_offset_l1          ;
	ichar[VIDEO_H264_MAX_NUM_LIST_REF][VIDEO_H264_MAX_CHROMA_PLANES] chroma_weight_l1        ;
	ichar[VIDEO_H264_MAX_NUM_LIST_REF][VIDEO_H264_MAX_CHROMA_PLANES] chroma_offset_l1        ;
}

bitstruct VideoEncodeH264SliceHeaderFlags : uint {
    bool direct_spatial_mv_pred: 0;
    bool num_ref_idx_active_override: 1;
    uint reserved: 2..31;
}
bitstruct VideoEncodeH264PictureInfoFlags : uint {
    bool idr_pic: 0;
    bool is_reference: 1;
    bool no_output_of_prior_pics: 2;
    bool long_term_reference: 3;
    bool adaptive_ref_pic_marking_mode: 4;
    uint reserved: 5..31;
}
bitstruct VideoEncodeH264ReferenceInfoFlags : uint {
    bool used_for_long_term_reference: 0;
    uint reserved: 1..31;
}
bitstruct VideoEncodeH264ReferenceListsInfoFlags : uint {
    bool ref_pic_list_modification_flag_l0: 0;
    bool ref_pic_list_modification_flag_l1: 1;
    uint reserved: 2..31;
}
struct VideoEncodeH264RefListModEntry {
	VideoH264ModificationOfPicNumsIdc modification_of_pic_nums_idc;
	ushort                            abs_diff_pic_num_minus1     ;
	ushort                            long_term_pic_num           ;
}

struct VideoEncodeH264RefPicMarkingEntry {
	VideoH264MemMgmtControlOp memory_management_control_operation;
	ushort                    difference_of_pic_nums_minus1      ;
	ushort                    long_term_pic_num                  ;
	ushort                    long_term_frame_idx                ;
	ushort                    max_long_term_frame_idx_plus1      ;
}

struct VideoEncodeH264ReferenceListsInfo {
	VideoEncodeH264ReferenceListsInfoFlags flags                       ;
	char                                   num_ref_idx_l0_active_minus1;
	char                                   num_ref_idx_l1_active_minus1;
	char[VIDEO_H264_MAX_NUM_LIST_REF]      ref_pic_list0               ;
	char[VIDEO_H264_MAX_NUM_LIST_REF]      ref_pic_list1               ;
	char                                   ref_list0_mod_op_count      ;
	char                                   ref_list1_mod_op_count      ;
	char                                   ref_pic_marking_op_count    ;
	char[7]                                reserved1                   ;
	VideoEncodeH264RefListModEntry*        p_ref_list0_mod_operations  ;
	VideoEncodeH264RefListModEntry*        p_ref_list1_mod_operations  ;
	VideoEncodeH264RefPicMarkingEntry*     p_ref_pic_marking_operations;
}

struct VideoEncodeH264PictureInfo {
	VideoEncodeH264PictureInfoFlags    flags               ;
	char                               seq_parameter_set_id;
	char                               pic_parameter_set_id;
	ushort                             idr_pic_id          ;
	VideoH264PictureType               primary_pic_type    ;
	uint                               frame_num           ;
	int                                pic_order_cnt       ;
	char                               temporal_id         ;
	char[3]                            reserved1           ;
	VideoEncodeH264ReferenceListsInfo* p_ref_lists         ;
}

struct VideoEncodeH264ReferenceInfo {
	VideoEncodeH264ReferenceInfoFlags flags              ;
	VideoH264PictureType              primary_pic_type   ;
	uint                              frame_num          ;
	int                               pic_order_cnt      ;
	ushort                            long_term_pic_num  ;
	ushort                            long_term_frame_idx;
	char                              temporal_id        ;
}

struct VideoEncodeH264SliceHeader {
	VideoEncodeH264SliceHeaderFlags     flags                        ;
	uint                                first_mb_in_slice            ;
	VideoH264SliceType                  slice_type                   ;
	ichar                               slice_alpha_c0_offset_div2   ;
	ichar                               slice_beta_offset_div2       ;
	ichar                               slice_qp_delta               ;
	char                                reserved1                    ;
	VideoH264CabacInitIdc               cabac_init_idc               ;
	VideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc;
	VideoEncodeH264WeightTable*         p_weight_table               ;
}

struct VideoH265DecPicBufMgr {
	uint[VIDEO_H265_SUBLAYERS_LIST_SIZE] max_latency_increase_plus1  ;
	char[VIDEO_H265_SUBLAYERS_LIST_SIZE] max_dec_pic_buffering_minus1;
	char[VIDEO_H265_SUBLAYERS_LIST_SIZE] max_num_reorder_pics        ;
}

struct VideoH265SubLayerHrdParameters {
	uint[VIDEO_H265_CPB_CNT_LIST_SIZE] bit_rate_value_minus1   ;
	uint[VIDEO_H265_CPB_CNT_LIST_SIZE] cpb_size_value_minus1   ;
	uint[VIDEO_H265_CPB_CNT_LIST_SIZE] cpb_size_du_value_minus1;
	uint[VIDEO_H265_CPB_CNT_LIST_SIZE] bit_rate_du_value_minus1;
	uint                               cbr_flag                ;
}

bitstruct VideoH265HrdFlags : uint /* Warning: unusual bitstruct size 28 bit, rounded up to 32 */ {
    bool nal_hrd_parameters_present: 0;
    bool vcl_hrd_parameters_present: 1;
    bool sub_pic_hrd_params_present: 2;
    bool sub_pic_cpb_params_in_pic_timing_sei: 3;
    uint fixed_pic_rate_general: 4..11;
    uint fixed_pic_rate_within_cvs: 12..19;
    uint low_delay_hrd: 20..27;
}
struct VideoH265HrdParameters {
	VideoH265HrdFlags                      flags                                       ;
	char                                   tick_divisor_minus2                         ;
	char                                   du_cpb_removal_delay_increment_length_minus1;
	char                                   dpb_output_delay_du_length_minus1           ;
	char                                   bit_rate_scale                              ;
	char                                   cpb_size_scale                              ;
	char                                   cpb_size_du_scale                           ;
	char                                   initial_cpb_removal_delay_length_minus1     ;
	char                                   au_cpb_removal_delay_length_minus1          ;
	char                                   dpb_output_delay_length_minus1              ;
	char[VIDEO_H265_SUBLAYERS_LIST_SIZE]   cpb_cnt_minus1                              ;
	ushort[VIDEO_H265_SUBLAYERS_LIST_SIZE] elemental_duration_in_tc_minus1             ;
	ushort[3]                              reserved                                    ;
	VideoH265SubLayerHrdParameters*        p_sub_layer_hrd_parameters_nal              ;
	VideoH265SubLayerHrdParameters*        p_sub_layer_hrd_parameters_vcl              ;
}

bitstruct VideoH265VpsFlags : char /* Warning: unusual bitstruct size 4 bit, rounded up to 8 */ {
    bool vps_temporal_id_nesting: 0;
    bool vps_sub_layer_ordering_info_present: 1;
    bool vps_timing_info_present: 2;
    bool vps_poc_proportional_to_timing: 3;
}
bitstruct VideoH265ProfileTierLevelFlags : char /* Warning: unusual bitstruct size 5 bit, rounded up to 8 */ {
    bool general_tier: 0;
    bool general_progressive_source: 1;
    bool general_interlaced_source: 2;
    bool general_non_packed_constraint: 3;
    bool general_frame_only_constraint: 4;
}
struct VideoH265ProfileTierLevel {
	VideoH265ProfileTierLevelFlags flags              ;
	VideoH265ProfileIdc            general_profile_idc;
	VideoH265LevelIdc              general_level_idc  ;
}

struct VideoH265VideoParameterSet {
	VideoH265VpsFlags          flags                            ;
	char                       vps_video_parameter_set_id       ;
	char                       vps_max_sub_layers_minus1        ;
	char                       reserved1                        ;
	char                       reserved2                        ;
	uint                       vps_num_units_in_tick            ;
	uint                       vps_time_scale                   ;
	uint                       vps_num_ticks_poc_diff_one_minus1;
	uint                       reserved3                        ;
	VideoH265DecPicBufMgr*     p_dec_pic_buf_mgr                ;
	VideoH265HrdParameters*    p_hrd_parameters                 ;
	VideoH265ProfileTierLevel* p_profile_tier_level             ;
}

struct VideoH265ScalingLists {
	char[VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS][VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS]     scaling_list4x4          ;
	char[VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS][VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS]     scaling_list8x8          ;
	char[VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS][VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS] scaling_list16x16        ;
	char[VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS][VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS] scaling_list32x32        ;
	char[VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS]                                             scaling_list_dc_coef16x16;
	char[VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS]                                             scaling_list_dc_coef32x32;
}

bitstruct VideoH265SpsVuiFlags : uint /* Warning: unusual bitstruct size 18 bit, rounded up to 32 */ {
    bool aspect_ratio_info_present: 0;
    bool overscan_info_present: 1;
    bool overscan_appropriate: 2;
    bool video_signal_type_present: 3;
    bool video_full_range: 4;
    bool colour_description_present: 5;
    bool chroma_loc_info_present: 6;
    bool neutral_chroma_indication: 7;
    bool field_seq: 8;
    bool frame_field_info_present: 9;
    bool default_display_window: 10;
    bool vui_timing_info_present: 11;
    bool vui_poc_proportional_to_timing: 12;
    bool vui_hrd_parameters_present: 13;
    bool bitstream_restriction: 14;
    bool tiles_fixed_structure: 15;
    bool motion_vectors_over_pic_boundaries: 16;
    bool restricted_ref_pic_lists: 17;
}
struct VideoH265SequenceParameterSetVui {
	VideoH265SpsVuiFlags    flags                              ;
	VideoH265AspectRatioIdc aspect_ratio_idc                   ;
	ushort                  sar_width                          ;
	ushort                  sar_height                         ;
	char                    video_format                       ;
	char                    colour_primaries                   ;
	char                    transfer_characteristics           ;
	char                    matrix_coeffs                      ;
	char                    chroma_sample_loc_type_top_field   ;
	char                    chroma_sample_loc_type_bottom_field;
	char                    reserved1                          ;
	char                    reserved2                          ;
	ushort                  def_disp_win_left_offset           ;
	ushort                  def_disp_win_right_offset          ;
	ushort                  def_disp_win_top_offset            ;
	ushort                  def_disp_win_bottom_offset         ;
	uint                    vui_num_units_in_tick              ;
	uint                    vui_time_scale                     ;
	uint                    vui_num_ticks_poc_diff_one_minus1  ;
	ushort                  min_spatial_segmentation_idc       ;
	ushort                  reserved3                          ;
	char                    max_bytes_per_pic_denom            ;
	char                    max_bits_per_min_cu_denom          ;
	char                    log2_max_mv_length_horizontal      ;
	char                    log2_max_mv_length_vertical        ;
	VideoH265HrdParameters* p_hrd_parameters                   ;
}

struct VideoH265PredictorPaletteEntries {
	ushort[VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE][VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE] predictor_palette_entries;
}

bitstruct VideoH265SpsFlags : uint /* Warning: unusual bitstruct size 30 bit, rounded up to 32 */ {
    bool sps_temporal_id_nesting: 0;
    bool separate_colour_plane: 1;
    bool conformance_window: 2;
    bool sps_sub_layer_ordering_info_present: 3;
    bool scaling_list_enabled: 4;
    bool sps_scaling_list_data_present: 5;
    bool amp_enabled: 6;
    bool sample_adaptive_offset_enabled: 7;
    bool pcm_enabled: 8;
    bool pcm_loop_filter_disabled: 9;
    bool long_term_ref_pics_present: 10;
    bool sps_temporal_mvp_enabled: 11;
    bool strong_intra_smoothing_enabled: 12;
    bool vui_parameters_present: 13;
    bool sps_extension_present: 14;
    bool sps_range_extension: 15;
    bool transform_skip_rotation_enabled: 16;
    bool transform_skip_context_enabled: 17;
    bool implicit_rdpcm_enabled: 18;
    bool explicit_rdpcm_enabled: 19;
    bool extended_precision_processing: 20;
    bool intra_smoothing_disabled: 21;
    bool high_precision_offsets_enabled: 22;
    bool persistent_rice_adaptation_enabled: 23;
    bool cabac_bypass_alignment_enabled: 24;
    bool sps_scc_extension: 25;
    bool sps_curr_pic_ref_enabled: 26;
    bool palette_mode_enabled: 27;
    bool sps_palette_predictor_initializers_present: 28;
    bool intra_boundary_filtering_disabled: 29;
}
bitstruct VideoH265ShortTermRefPicSetFlags : char /* Warning: unusual bitstruct size 2 bit, rounded up to 8 */ {
    bool inter_ref_pic_set_prediction: 0;
    bool delta_rps_sign: 1;
}
struct VideoH265ShortTermRefPicSet {
	VideoH265ShortTermRefPicSetFlags flags                   ;
	uint                             delta_idx_minus1        ;
	ushort                           use_delta_flag          ;
	ushort                           abs_delta_rps_minus1    ;
	ushort                           used_by_curr_pic_flag   ;
	ushort                           used_by_curr_pic_s0_flag;
	ushort                           used_by_curr_pic_s1_flag;
	ushort                           reserved1               ;
	char                             reserved2               ;
	char                             reserved3               ;
	char                             num_negative_pics       ;
	char                             num_positive_pics       ;
	ushort[VIDEO_H265_MAX_DPB_SIZE]  delta_poc_s0_minus1     ;
	ushort[VIDEO_H265_MAX_DPB_SIZE]  delta_poc_s1_minus1     ;
}

struct VideoH265LongTermRefPicsSps {
	uint                                        used_by_curr_pic_lt_sps_flag;
	uint[VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS] lt_ref_pic_poc_lsb_sps      ;
}

struct VideoH265SequenceParameterSet {
	VideoH265SpsFlags                 flags                                        ;
	VideoH265ChromaFormatIdc          chroma_format_idc                            ;
	uint                              pic_width_in_luma_samples                    ;
	uint                              pic_height_in_luma_samples                   ;
	char                              sps_video_parameter_set_id                   ;
	char                              sps_max_sub_layers_minus1                    ;
	char                              sps_seq_parameter_set_id                     ;
	char                              bit_depth_luma_minus8                        ;
	char                              bit_depth_chroma_minus8                      ;
	char                              log2_max_pic_order_cnt_lsb_minus4            ;
	char                              log2_min_luma_coding_block_size_minus3       ;
	char                              log2_diff_max_min_luma_coding_block_size     ;
	char                              log2_min_luma_transform_block_size_minus2    ;
	char                              log2_diff_max_min_luma_transform_block_size  ;
	char                              max_transform_hierarchy_depth_inter          ;
	char                              max_transform_hierarchy_depth_intra          ;
	char                              num_short_term_ref_pic_sets                  ;
	char                              num_long_term_ref_pics_sps                   ;
	char                              pcm_sample_bit_depth_luma_minus1             ;
	char                              pcm_sample_bit_depth_chroma_minus1           ;
	char                              log2_min_pcm_luma_coding_block_size_minus3   ;
	char                              log2_diff_max_min_pcm_luma_coding_block_size ;
	char                              reserved1                                    ;
	char                              reserved2                                    ;
	char                              palette_max_size                             ;
	char                              delta_palette_max_predictor_size             ;
	char                              motion_vector_resolution_control_idc         ;
	char                              sps_num_palette_predictor_initializers_minus1;
	uint                              conf_win_left_offset                         ;
	uint                              conf_win_right_offset                        ;
	uint                              conf_win_top_offset                          ;
	uint                              conf_win_bottom_offset                       ;
	VideoH265ProfileTierLevel*        p_profile_tier_level                         ;
	VideoH265DecPicBufMgr*            p_dec_pic_buf_mgr                            ;
	VideoH265ScalingLists*            p_scaling_lists                              ;
	VideoH265ShortTermRefPicSet*      p_short_term_ref_pic_set                     ;
	VideoH265LongTermRefPicsSps*      p_long_term_ref_pics_sps                     ;
	VideoH265SequenceParameterSetVui* p_sequence_parameter_set_vui                 ;
	VideoH265PredictorPaletteEntries* p_predictor_palette_entries                  ;
}

bitstruct VideoH265PpsFlags : uint /* Warning: unusual bitstruct size 31 bit, rounded up to 32 */ {
    bool dependent_slice_segments_enabled: 0;
    bool output_flag_present: 1;
    bool sign_data_hiding_enabled: 2;
    bool cabac_init_present: 3;
    bool constrained_intra_pred: 4;
    bool transform_skip_enabled: 5;
    bool cu_qp_delta_enabled: 6;
    bool pps_slice_chroma_qp_offsets_present: 7;
    bool weighted_pred: 8;
    bool weighted_bipred: 9;
    bool transquant_bypass_enabled: 10;
    bool tiles_enabled: 11;
    bool entropy_coding_sync_enabled: 12;
    bool uniform_spacing: 13;
    bool loop_filter_across_tiles_enabled: 14;
    bool pps_loop_filter_across_slices_enabled: 15;
    bool deblocking_filter_control_present: 16;
    bool deblocking_filter_override_enabled: 17;
    bool pps_deblocking_filter_disabled: 18;
    bool pps_scaling_list_data_present: 19;
    bool lists_modification_present: 20;
    bool slice_segment_header_extension_present: 21;
    bool pps_extension_present: 22;
    bool cross_component_prediction_enabled: 23;
    bool chroma_qp_offset_list_enabled: 24;
    bool pps_curr_pic_ref_enabled: 25;
    bool residual_adaptive_colour_transform_enabled: 26;
    bool pps_slice_act_qp_offsets_present: 27;
    bool pps_palette_predictor_initializers_present: 28;
    bool monochrome_palette: 29;
    bool pps_range_extension: 30;
}
struct VideoH265PictureParameterSet {
	VideoH265PpsFlags                                       flags                                    ;
	char                                                    pps_pic_parameter_set_id                 ;
	char                                                    pps_seq_parameter_set_id                 ;
	char                                                    sps_video_parameter_set_id               ;
	char                                                    num_extra_slice_header_bits              ;
	char                                                    num_ref_idx_l0_default_active_minus1     ;
	char                                                    num_ref_idx_l1_default_active_minus1     ;
	ichar                                                   init_qp_minus26                          ;
	char                                                    diff_cu_qp_delta_depth                   ;
	ichar                                                   pps_cb_qp_offset                         ;
	ichar                                                   pps_cr_qp_offset                         ;
	ichar                                                   pps_beta_offset_div2                     ;
	ichar                                                   pps_tc_offset_div2                       ;
	char                                                    log2_parallel_merge_level_minus2         ;
	char                                                    log2_max_transform_skip_block_size_minus2;
	char                                                    diff_cu_chroma_qp_offset_depth           ;
	char                                                    chroma_qp_offset_list_len_minus1         ;
	ichar[VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE]            cb_qp_offset_list                        ;
	ichar[VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE]            cr_qp_offset_list                        ;
	char                                                    log2_sao_offset_scale_luma               ;
	char                                                    log2_sao_offset_scale_chroma             ;
	ichar                                                   pps_act_y_qp_offset_plus5                ;
	ichar                                                   pps_act_cb_qp_offset_plus5               ;
	ichar                                                   pps_act_cr_qp_offset_plus3               ;
	char                                                    pps_num_palette_predictor_initializers   ;
	char                                                    luma_bit_depth_entry_minus8              ;
	char                                                    chroma_bit_depth_entry_minus8            ;
	char                                                    num_tile_columns_minus1                  ;
	char                                                    num_tile_rows_minus1                     ;
	char                                                    reserved1                                ;
	char                                                    reserved2                                ;
	ushort[VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE] column_width_minus1                      ;
	ushort[VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE] row_height_minus1                        ;
	uint                                                    reserved3                                ;
	VideoH265ScalingLists*                                  p_scaling_lists                          ;
	VideoH265PredictorPaletteEntries*                       p_predictor_palette_entries              ;
}

bitstruct VideoDecodeH265PictureInfoFlags : char /* Warning: unusual bitstruct size 4 bit, rounded up to 8 */ {
    bool irap_pic: 0;
    bool idr_pic: 1;
    bool is_reference: 2;
    bool short_term_ref_pic_set_sps: 3;
}
struct VideoDecodeH265PictureInfo {
	VideoDecodeH265PictureInfoFlags               flags                               ;
	char                                          sps_video_parameter_set_id          ;
	char                                          pps_seq_parameter_set_id            ;
	char                                          pps_pic_parameter_set_id            ;
	char                                          num_delta_pocs_of_ref_rps_idx       ;
	int                                           pic_order_cnt_val                   ;
	ushort                                        num_bits_for_st_ref_pic_set_in_slice;
	ushort                                        reserved                            ;
	char[VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE] ref_pic_set_st_curr_before          ;
	char[VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE] ref_pic_set_st_curr_after           ;
	char[VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE] ref_pic_set_lt_curr                 ;
}

bitstruct VideoDecodeH265ReferenceInfoFlags : char /* Warning: unusual bitstruct size 2 bit, rounded up to 8 */ {
    bool used_for_long_term_reference: 0;
    bool unused_for_reference: 1;
}
struct VideoDecodeH265ReferenceInfo {
	VideoDecodeH265ReferenceInfoFlags flags            ;
	int                               pic_order_cnt_val;
}

struct VideoEncodeH265WeightTableFlags {
	ushort luma_weight_l0_flag  ;
	ushort chroma_weight_l0_flag;
	ushort luma_weight_l1_flag  ;
	ushort chroma_weight_l1_flag;
}

struct VideoEncodeH265WeightTable {
	VideoEncodeH265WeightTableFlags                                  flags                         ;
	char                                                             luma_log2_weight_denom        ;
	ichar                                                            delta_chroma_log2_weight_denom;
	ichar[VIDEO_H265_MAX_NUM_LIST_REF]                               delta_luma_weight_l0          ;
	ichar[VIDEO_H265_MAX_NUM_LIST_REF]                               luma_offset_l0                ;
	ichar[VIDEO_H265_MAX_NUM_LIST_REF][VIDEO_H265_MAX_CHROMA_PLANES] delta_chroma_weight_l0        ;
	ichar[VIDEO_H265_MAX_NUM_LIST_REF][VIDEO_H265_MAX_CHROMA_PLANES] delta_chroma_offset_l0        ;
	ichar[VIDEO_H265_MAX_NUM_LIST_REF]                               delta_luma_weight_l1          ;
	ichar[VIDEO_H265_MAX_NUM_LIST_REF]                               luma_offset_l1                ;
	ichar[VIDEO_H265_MAX_NUM_LIST_REF][VIDEO_H265_MAX_CHROMA_PLANES] delta_chroma_weight_l1        ;
	ichar[VIDEO_H265_MAX_NUM_LIST_REF][VIDEO_H265_MAX_CHROMA_PLANES] delta_chroma_offset_l1        ;
}

bitstruct VideoEncodeH265SliceSegmentHeaderFlags : uint {
    bool first_slice_segment_in_pic: 0;
    bool dependent_slice_segment: 1;
    bool slice_sao_luma: 2;
    bool slice_sao_chroma: 3;
    bool num_ref_idx_active_override: 4;
    bool mvd_l1_zero: 5;
    bool cabac_init: 6;
    bool cu_chroma_qp_offset_enabled: 7;
    bool deblocking_filter_override: 8;
    bool slice_deblocking_filter_disabled: 9;
    bool collocated_from_l0: 10;
    bool slice_loop_filter_across_slices_enabled: 11;
    uint reserved: 12..31;
}
struct VideoEncodeH265SliceSegmentHeader {
	VideoEncodeH265SliceSegmentHeaderFlags flags                 ;
	VideoH265SliceType                     slice_type            ;
	uint                                   slice_segment_address ;
	char                                   collocated_ref_idx    ;
	char                                   max_num_merge_cand    ;
	ichar                                  slice_cb_qp_offset    ;
	ichar                                  slice_cr_qp_offset    ;
	ichar                                  slice_beta_offset_div2;
	ichar                                  slice_tc_offset_div2  ;
	ichar                                  slice_act_y_qp_offset ;
	ichar                                  slice_act_cb_qp_offset;
	ichar                                  slice_act_cr_qp_offset;
	ichar                                  slice_qp_delta        ;
	ushort                                 reserved1             ;
	VideoEncodeH265WeightTable*            p_weight_table        ;
}

bitstruct VideoEncodeH265ReferenceListsInfoFlags : uint {
    bool ref_pic_list_modification_flag_l0: 0;
    bool ref_pic_list_modification_flag_l1: 1;
    uint reserved: 2..31;
}
struct VideoEncodeH265ReferenceListsInfo {
	VideoEncodeH265ReferenceListsInfoFlags flags                       ;
	char                                   num_ref_idx_l0_active_minus1;
	char                                   num_ref_idx_l1_active_minus1;
	char[VIDEO_H265_MAX_NUM_LIST_REF]      ref_pic_list0               ;
	char[VIDEO_H265_MAX_NUM_LIST_REF]      ref_pic_list1               ;
	char[VIDEO_H265_MAX_NUM_LIST_REF]      list_entry_l0               ;
	char[VIDEO_H265_MAX_NUM_LIST_REF]      list_entry_l1               ;
}

bitstruct VideoEncodeH265PictureInfoFlags : uint {
    bool is_reference: 0;
    bool irap_pic: 1;
    bool used_for_long_term_reference: 2;
    bool discardable: 3;
    bool cross_layer_bla: 4;
    bool pic_output: 5;
    bool no_output_of_prior_pics: 6;
    bool short_term_ref_pic_set_sps: 7;
    bool slice_temporal_mvp_enabled: 8;
    uint reserved: 9..31;
}
struct VideoEncodeH265LongTermRefPics {
	char                                        num_long_term_sps         ;
	char                                        num_long_term_pics        ;
	char[VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS] lt_idx_sps                ;
	char[VIDEO_H265_MAX_LONG_TERM_PICS]         poc_lsb_lt                ;
	ushort                                      used_by_curr_pic_lt_flag  ;
	char[VIDEO_H265_MAX_DELTA_POC]              delta_poc_msb_present_flag;
	char[VIDEO_H265_MAX_DELTA_POC]              delta_poc_msb_cycle_lt    ;
}

struct VideoEncodeH265PictureInfo {
	VideoEncodeH265PictureInfoFlags    flags                     ;
	VideoH265PictureType               pic_type                  ;
	char                               sps_video_parameter_set_id;
	char                               pps_seq_parameter_set_id  ;
	char                               pps_pic_parameter_set_id  ;
	char                               short_term_ref_pic_set_idx;
	int                                pic_order_cnt_val         ;
	char                               temporal_id               ;
	char[7]                            reserved1                 ;
	VideoEncodeH265ReferenceListsInfo* p_ref_lists               ;
	VideoH265ShortTermRefPicSet*       p_short_term_ref_pic_set  ;
	VideoEncodeH265LongTermRefPics*    p_long_term_ref_pics      ;
}

bitstruct VideoEncodeH265ReferenceInfoFlags : uint {
    bool used_for_long_term_reference: 0;
    bool unused_for_reference: 1;
    uint reserved: 2..31;
}
struct VideoEncodeH265ReferenceInfo {
	VideoEncodeH265ReferenceInfoFlags flags            ;
	VideoH265PictureType              pic_type         ;
	int                               pic_order_cnt_val;
	char                              temporal_id      ;
}

// Opaque structs

typedef WLSurface = void*;// @extern("wl_surface"); // Opaque struct defined by Wayland
typedef WLDisplay = void*;// @extern("wl_display"); // Opaque struct defined by Wayland
typedef XCBConnection = void*;// @extern("xcb_connection_t"); // Opaque struct defined by xcb
typedef IOSurfaceRef = void*; // Opaque struct defined by Apple’s CoreGraphics framework

// Aliases
alias PhysicalDeviceVariablePointerFeatures                       = PhysicalDeviceVariablePointersFeatures;
alias PhysicalDeviceShaderDrawParameterFeatures                   = PhysicalDeviceShaderDrawParametersFeatures;
alias PipelineStageFlag2                                          = Flags64;
alias AccessFlag2                                                 = Flags64;
alias FormatFeatureFlag2                                          = Flags64;
alias PipelineCreateFlag2                                         = Flags64;
alias BufferUsageFlag2                                            = Flags64;
alias RenderingFlagsKHR                                           = RenderingFlags;
alias RenderingInfoKHR                                            = RenderingInfo;
alias RenderingAttachmentInfoKHR                                  = RenderingAttachmentInfo;
alias PipelineRenderingCreateInfoKHR                              = PipelineRenderingCreateInfo;
alias PhysicalDeviceDynamicRenderingFeaturesKHR                   = PhysicalDeviceDynamicRenderingFeatures;
alias CommandBufferInheritanceRenderingInfoKHR                    = CommandBufferInheritanceRenderingInfo;
alias RenderPassMultiviewCreateInfoKHR                            = RenderPassMultiviewCreateInfo;
alias PhysicalDeviceMultiviewFeaturesKHR                          = PhysicalDeviceMultiviewFeatures;
alias PhysicalDeviceMultiviewPropertiesKHR                        = PhysicalDeviceMultiviewProperties;
alias PhysicalDeviceFeatures2KHR                                  = PhysicalDeviceFeatures2;
alias PhysicalDeviceProperties2KHR                                = PhysicalDeviceProperties2;
alias FormatProperties2KHR                                        = FormatProperties2;
alias ImageFormatProperties2KHR                                   = ImageFormatProperties2;
alias PhysicalDeviceImageFormatInfo2KHR                           = PhysicalDeviceImageFormatInfo2;
alias QueueFamilyProperties2KHR                                   = QueueFamilyProperties2;
alias PhysicalDeviceMemoryProperties2KHR                          = PhysicalDeviceMemoryProperties2;
alias SparseImageFormatProperties2KHR                             = SparseImageFormatProperties2;
alias PhysicalDeviceSparseImageFormatInfo2KHR                     = PhysicalDeviceSparseImageFormatInfo2;
alias PeerMemoryFeatureFlagsKHR                                   = PeerMemoryFeatureFlags;
alias MemoryAllocateFlagsKHR                                      = MemoryAllocateFlags;
alias MemoryAllocateFlagsInfoKHR                                  = MemoryAllocateFlagsInfo;
alias DeviceGroupRenderPassBeginInfoKHR                           = DeviceGroupRenderPassBeginInfo;
alias DeviceGroupCommandBufferBeginInfoKHR                        = DeviceGroupCommandBufferBeginInfo;
alias DeviceGroupSubmitInfoKHR                                    = DeviceGroupSubmitInfo;
alias DeviceGroupBindSparseInfoKHR                                = DeviceGroupBindSparseInfo;
alias BindBufferMemoryDeviceGroupInfoKHR                          = BindBufferMemoryDeviceGroupInfo;
alias BindImageMemoryDeviceGroupInfoKHR                           = BindImageMemoryDeviceGroupInfo;
alias CommandPoolTrimFlagsKHR                                     = CommandPoolTrimFlags;
alias PhysicalDeviceGroupPropertiesKHR                            = PhysicalDeviceGroupProperties;
alias DeviceGroupDeviceCreateInfoKHR                              = DeviceGroupDeviceCreateInfo;
alias ExternalMemoryHandleTypeFlagsKHR                            = ExternalMemoryHandleTypeFlags;
alias ExternalMemoryFeatureFlagsKHR                               = ExternalMemoryFeatureFlags;
alias ExternalMemoryPropertiesKHR                                 = ExternalMemoryProperties;
alias PhysicalDeviceExternalImageFormatInfoKHR                    = PhysicalDeviceExternalImageFormatInfo;
alias ExternalImageFormatPropertiesKHR                            = ExternalImageFormatProperties;
alias PhysicalDeviceExternalBufferInfoKHR                         = PhysicalDeviceExternalBufferInfo;
alias ExternalBufferPropertiesKHR                                 = ExternalBufferProperties;
alias PhysicalDeviceIDPropertiesKHR                               = PhysicalDeviceIDProperties;
alias ExternalMemoryImageCreateInfoKHR                            = ExternalMemoryImageCreateInfo;
alias ExternalMemoryBufferCreateInfoKHR                           = ExternalMemoryBufferCreateInfo;
alias ExportMemoryAllocateInfoKHR                                 = ExportMemoryAllocateInfo;
alias ExternalSemaphoreHandleTypeFlagsKHR                         = ExternalSemaphoreHandleTypeFlags;
alias ExternalSemaphoreFeatureFlagsKHR                            = ExternalSemaphoreFeatureFlags;
alias PhysicalDeviceExternalSemaphoreInfoKHR                      = PhysicalDeviceExternalSemaphoreInfo;
alias ExternalSemaphorePropertiesKHR                              = ExternalSemaphoreProperties;
alias SemaphoreImportFlagsKHR                                     = SemaphoreImportFlags;
alias ExportSemaphoreCreateInfoKHR                                = ExportSemaphoreCreateInfo;
alias PhysicalDevicePushDescriptorPropertiesKHR                   = PhysicalDevicePushDescriptorProperties;
alias PhysicalDeviceShaderFloat16Int8FeaturesKHR                  = PhysicalDeviceShaderFloat16Int8Features;
alias PhysicalDeviceFloat16Int8FeaturesKHR                        = PhysicalDeviceShaderFloat16Int8Features;
alias PhysicalDevice16BitStorageFeaturesKHR                       = PhysicalDevice16BitStorageFeatures;
alias DescriptorUpdateTemplateKHR                                 = DescriptorUpdateTemplate;
alias DescriptorUpdateTemplateTypeKHR                             = DescriptorUpdateTemplateType;
alias DescriptorUpdateTemplateCreateFlagsKHR                      = DescriptorUpdateTemplateCreateFlags;
alias DescriptorUpdateTemplateEntryKHR                            = DescriptorUpdateTemplateEntry;
alias DescriptorUpdateTemplateCreateInfoKHR                       = DescriptorUpdateTemplateCreateInfo;
alias PhysicalDeviceImagelessFramebufferFeaturesKHR               = PhysicalDeviceImagelessFramebufferFeatures;
alias FramebufferAttachmentsCreateInfoKHR                         = FramebufferAttachmentsCreateInfo;
alias FramebufferAttachmentImageInfoKHR                           = FramebufferAttachmentImageInfo;
alias RenderPassAttachmentBeginInfoKHR                            = RenderPassAttachmentBeginInfo;
alias RenderPassCreateInfo2KHR                                    = RenderPassCreateInfo2;
alias AttachmentDescription2KHR                                   = AttachmentDescription2;
alias AttachmentReference2KHR                                     = AttachmentReference2;
alias SubpassDescription2KHR                                      = SubpassDescription2;
alias SubpassDependency2KHR                                       = SubpassDependency2;
alias SubpassBeginInfoKHR                                         = SubpassBeginInfo;
alias SubpassEndInfoKHR                                           = SubpassEndInfo;
alias ExternalFenceHandleTypeFlagsKHR                             = ExternalFenceHandleTypeFlags;
alias ExternalFenceFeatureFlagsKHR                                = ExternalFenceFeatureFlags;
alias PhysicalDeviceExternalFenceInfoKHR                          = PhysicalDeviceExternalFenceInfo;
alias ExternalFencePropertiesKHR                                  = ExternalFenceProperties;
alias FenceImportFlagsKHR                                         = FenceImportFlags;
alias ExportFenceCreateInfoKHR                                    = ExportFenceCreateInfo;
alias PointClippingBehaviorKHR                                    = PointClippingBehavior;
alias TessellationDomainOriginKHR                                 = TessellationDomainOrigin;
alias PhysicalDevicePointClippingPropertiesKHR                    = PhysicalDevicePointClippingProperties;
alias RenderPassInputAttachmentAspectCreateInfoKHR                = RenderPassInputAttachmentAspectCreateInfo;
alias InputAttachmentAspectReferenceKHR                           = InputAttachmentAspectReference;
alias ImageViewUsageCreateInfoKHR                                 = ImageViewUsageCreateInfo;
alias PipelineTessellationDomainOriginStateCreateInfoKHR          = PipelineTessellationDomainOriginStateCreateInfo;
alias PhysicalDeviceVariablePointerFeaturesKHR                    = PhysicalDeviceVariablePointersFeatures;
alias PhysicalDeviceVariablePointersFeaturesKHR                   = PhysicalDeviceVariablePointersFeatures;
alias MemoryDedicatedRequirementsKHR                              = MemoryDedicatedRequirements;
alias MemoryDedicatedAllocateInfoKHR                              = MemoryDedicatedAllocateInfo;
alias BufferMemoryRequirementsInfo2KHR                            = BufferMemoryRequirementsInfo2;
alias ImageMemoryRequirementsInfo2KHR                             = ImageMemoryRequirementsInfo2;
alias ImageSparseMemoryRequirementsInfo2KHR                       = ImageSparseMemoryRequirementsInfo2;
alias MemoryRequirements2KHR                                      = MemoryRequirements2;
alias SparseImageMemoryRequirements2KHR                           = SparseImageMemoryRequirements2;
alias ImageFormatListCreateInfoKHR                                = ImageFormatListCreateInfo;
alias SamplerYcbcrConversionKHR                                   = SamplerYcbcrConversion;
alias SamplerYcbcrModelConversionKHR                              = SamplerYcbcrModelConversion;
alias SamplerYcbcrRangeKHR                                        = SamplerYcbcrRange;
alias ChromaLocationKHR                                           = ChromaLocation;
alias SamplerYcbcrConversionCreateInfoKHR                         = SamplerYcbcrConversionCreateInfo;
alias SamplerYcbcrConversionInfoKHR                               = SamplerYcbcrConversionInfo;
alias BindImagePlaneMemoryInfoKHR                                 = BindImagePlaneMemoryInfo;
alias ImagePlaneMemoryRequirementsInfoKHR                         = ImagePlaneMemoryRequirementsInfo;
alias PhysicalDeviceSamplerYcbcrConversionFeaturesKHR             = PhysicalDeviceSamplerYcbcrConversionFeatures;
alias SamplerYcbcrConversionImageFormatPropertiesKHR              = SamplerYcbcrConversionImageFormatProperties;
alias BindBufferMemoryInfoKHR                                     = BindBufferMemoryInfo;
alias BindImageMemoryInfoKHR                                      = BindImageMemoryInfo;
alias PhysicalDeviceMaintenance3PropertiesKHR                     = PhysicalDeviceMaintenance3Properties;
alias DescriptorSetLayoutSupportKHR                               = DescriptorSetLayoutSupport;
alias PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR        = PhysicalDeviceShaderSubgroupExtendedTypesFeatures;
alias PhysicalDevice8BitStorageFeaturesKHR                        = PhysicalDevice8BitStorageFeatures;
alias PhysicalDeviceShaderAtomicInt64FeaturesKHR                  = PhysicalDeviceShaderAtomicInt64Features;
alias QueueGlobalPriorityKHR                                      = QueueGlobalPriority;
alias DeviceQueueGlobalPriorityCreateInfoKHR                      = DeviceQueueGlobalPriorityCreateInfo;
alias PhysicalDeviceGlobalPriorityQueryFeaturesKHR                = PhysicalDeviceGlobalPriorityQueryFeatures;
alias QueueFamilyGlobalPriorityPropertiesKHR                      = QueueFamilyGlobalPriorityProperties;
alias DriverIdKHR                                                 = DriverId;
alias ConformanceVersionKHR                                       = ConformanceVersion;
alias PhysicalDeviceDriverPropertiesKHR                           = PhysicalDeviceDriverProperties;
alias ShaderFloatControlsIndependenceKHR                          = ShaderFloatControlsIndependence;
alias PhysicalDeviceFloatControlsPropertiesKHR                    = PhysicalDeviceFloatControlsProperties;
alias ResolveModeFlagsKHR                                         = ResolveModeFlags;
alias SubpassDescriptionDepthStencilResolveKHR                    = SubpassDescriptionDepthStencilResolve;
alias PhysicalDeviceDepthStencilResolvePropertiesKHR              = PhysicalDeviceDepthStencilResolveProperties;
alias SemaphoreTypeKHR                                            = SemaphoreType;
alias SemaphoreWaitFlagsKHR                                       = SemaphoreWaitFlags;
alias PhysicalDeviceTimelineSemaphoreFeaturesKHR                  = PhysicalDeviceTimelineSemaphoreFeatures;
alias PhysicalDeviceTimelineSemaphorePropertiesKHR                = PhysicalDeviceTimelineSemaphoreProperties;
alias SemaphoreTypeCreateInfoKHR                                  = SemaphoreTypeCreateInfo;
alias TimelineSemaphoreSubmitInfoKHR                              = TimelineSemaphoreSubmitInfo;
alias SemaphoreWaitInfoKHR                                        = SemaphoreWaitInfo;
alias SemaphoreSignalInfoKHR                                      = SemaphoreSignalInfo;
alias PhysicalDeviceVulkanMemoryModelFeaturesKHR                  = PhysicalDeviceVulkanMemoryModelFeatures;
alias PhysicalDeviceShaderTerminateInvocationFeaturesKHR          = PhysicalDeviceShaderTerminateInvocationFeatures;
alias PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR          = PhysicalDeviceDynamicRenderingLocalReadFeatures;
alias RenderingAttachmentLocationInfoKHR                          = RenderingAttachmentLocationInfo;
alias RenderingInputAttachmentIndexInfoKHR                        = RenderingInputAttachmentIndexInfo;
alias PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR        = PhysicalDeviceSeparateDepthStencilLayoutsFeatures;
alias AttachmentReferenceStencilLayoutKHR                         = AttachmentReferenceStencilLayout;
alias AttachmentDescriptionStencilLayoutKHR                       = AttachmentDescriptionStencilLayout;
alias PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR        = PhysicalDeviceUniformBufferStandardLayoutFeatures;
alias PhysicalDeviceBufferDeviceAddressFeaturesKHR                = PhysicalDeviceBufferDeviceAddressFeatures;
alias BufferDeviceAddressInfoKHR                                  = BufferDeviceAddressInfo;
alias BufferOpaqueCaptureAddressCreateInfoKHR                     = BufferOpaqueCaptureAddressCreateInfo;
alias MemoryOpaqueCaptureAddressAllocateInfoKHR                   = MemoryOpaqueCaptureAddressAllocateInfo;
alias DeviceMemoryOpaqueCaptureAddressInfoKHR                     = DeviceMemoryOpaqueCaptureAddressInfo;
alias MemoryUnmapFlagsKHR                                         = MemoryUnmapFlags;
alias MemoryMapInfoKHR                                            = MemoryMapInfo;
alias MemoryUnmapInfoKHR                                          = MemoryUnmapInfo;
alias PhysicalDeviceShaderIntegerDotProductFeaturesKHR            = PhysicalDeviceShaderIntegerDotProductFeatures;
alias PhysicalDeviceShaderIntegerDotProductPropertiesKHR          = PhysicalDeviceShaderIntegerDotProductProperties;
alias PipelineStageFlags2KHR                                      = PipelineStageFlags2;
alias AccessFlags2KHR                                             = AccessFlags2;
alias SubmitFlagsKHR                                              = SubmitFlags;
alias MemoryBarrier2KHR                                           = MemoryBarrier2;
alias BufferMemoryBarrier2KHR                                     = BufferMemoryBarrier2;
alias ImageMemoryBarrier2KHR                                      = ImageMemoryBarrier2;
alias DependencyInfoKHR                                           = DependencyInfo;
alias SubmitInfo2KHR                                              = SubmitInfo2;
alias SemaphoreSubmitInfoKHR                                      = SemaphoreSubmitInfo;
alias CommandBufferSubmitInfoKHR                                  = CommandBufferSubmitInfo;
alias PhysicalDeviceSynchronization2FeaturesKHR                   = PhysicalDeviceSynchronization2Features;
alias PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR      = PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
alias CopyBufferInfo2KHR                                          = CopyBufferInfo2;
alias CopyImageInfo2KHR                                           = CopyImageInfo2;
alias CopyBufferToImageInfo2KHR                                   = CopyBufferToImageInfo2;
alias CopyImageToBufferInfo2KHR                                   = CopyImageToBufferInfo2;
alias BlitImageInfo2KHR                                           = BlitImageInfo2;
alias ResolveImageInfo2KHR                                        = ResolveImageInfo2;
alias BufferCopy2KHR                                              = BufferCopy2;
alias ImageCopy2KHR                                               = ImageCopy2;
alias ImageBlit2KHR                                               = ImageBlit2;
alias BufferImageCopy2KHR                                         = BufferImageCopy2;
alias ImageResolve2KHR                                            = ImageResolve2;
alias FormatFeatureFlags2KHR                                      = FormatFeatureFlags2;
alias FormatProperties3KHR                                        = FormatProperties3;
alias PhysicalDeviceMaintenance4FeaturesKHR                       = PhysicalDeviceMaintenance4Features;
alias PhysicalDeviceMaintenance4PropertiesKHR                     = PhysicalDeviceMaintenance4Properties;
alias DeviceBufferMemoryRequirementsKHR                           = DeviceBufferMemoryRequirements;
alias DeviceImageMemoryRequirementsKHR                            = DeviceImageMemoryRequirements;
alias PhysicalDeviceShaderSubgroupRotateFeaturesKHR               = PhysicalDeviceShaderSubgroupRotateFeatures;
alias PipelineCreateFlags2KHR                                     = PipelineCreateFlags2;
alias BufferUsageFlags2KHR                                        = BufferUsageFlags2;
alias PhysicalDeviceMaintenance5FeaturesKHR                       = PhysicalDeviceMaintenance5Features;
alias PhysicalDeviceMaintenance5PropertiesKHR                     = PhysicalDeviceMaintenance5Properties;
alias RenderingAreaInfoKHR                                        = RenderingAreaInfo;
alias DeviceImageSubresourceInfoKHR                               = DeviceImageSubresourceInfo;
alias ImageSubresource2KHR                                        = ImageSubresource2;
alias SubresourceLayout2KHR                                       = SubresourceLayout2;
alias PipelineCreateFlags2CreateInfoKHR                           = PipelineCreateFlags2CreateInfo;
alias BufferUsageFlags2CreateInfoKHR                              = BufferUsageFlags2CreateInfo;
alias PhysicalDeviceVertexAttributeDivisorPropertiesKHR           = PhysicalDeviceVertexAttributeDivisorProperties;
alias VertexInputBindingDivisorDescriptionKHR                     = VertexInputBindingDivisorDescription;
alias PipelineVertexInputDivisorStateCreateInfoKHR                = PipelineVertexInputDivisorStateCreateInfo;
alias PhysicalDeviceVertexAttributeDivisorFeaturesKHR             = PhysicalDeviceVertexAttributeDivisorFeatures;
alias PhysicalDeviceShaderFloatControls2FeaturesKHR               = PhysicalDeviceShaderFloatControls2Features;
alias PhysicalDeviceIndexTypeUint8FeaturesKHR                     = PhysicalDeviceIndexTypeUint8Features;
alias LineRasterizationModeKHR                                    = LineRasterizationMode;
alias PhysicalDeviceLineRasterizationFeaturesKHR                  = PhysicalDeviceLineRasterizationFeatures;
alias PhysicalDeviceLineRasterizationPropertiesKHR                = PhysicalDeviceLineRasterizationProperties;
alias PipelineRasterizationLineStateCreateInfoKHR                 = PipelineRasterizationLineStateCreateInfo;
alias PhysicalDeviceShaderExpectAssumeFeaturesKHR                 = PhysicalDeviceShaderExpectAssumeFeatures;
alias PhysicalDeviceMaintenance6FeaturesKHR                       = PhysicalDeviceMaintenance6Features;
alias PhysicalDeviceMaintenance6PropertiesKHR                     = PhysicalDeviceMaintenance6Properties;
alias BindMemoryStatusKHR                                         = BindMemoryStatus;
alias BindDescriptorSetsInfoKHR                                   = BindDescriptorSetsInfo;
alias PushConstantsInfoKHR                                        = PushConstantsInfo;
alias PushDescriptorSetInfoKHR                                    = PushDescriptorSetInfo;
alias PushDescriptorSetWithTemplateInfoKHR                        = PushDescriptorSetWithTemplateInfo;
alias AccessFlags3KHR                                             = Flags64;
alias AccessFlag3KHR                                              = Flags64;
alias PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT          = PhysicalDeviceTextureCompressionASTCHDRFeatures;
alias PipelineRobustnessBufferBehaviorEXT                         = PipelineRobustnessBufferBehavior;
alias PipelineRobustnessImageBehaviorEXT                          = PipelineRobustnessImageBehavior;
alias PhysicalDevicePipelineRobustnessFeaturesEXT                 = PhysicalDevicePipelineRobustnessFeatures;
alias PhysicalDevicePipelineRobustnessPropertiesEXT               = PhysicalDevicePipelineRobustnessProperties;
alias PipelineRobustnessCreateInfoEXT                             = PipelineRobustnessCreateInfo;
alias SamplerReductionModeEXT                                     = SamplerReductionMode;
alias SamplerReductionModeCreateInfoEXT                           = SamplerReductionModeCreateInfo;
alias PhysicalDeviceSamplerFilterMinmaxPropertiesEXT              = PhysicalDeviceSamplerFilterMinmaxProperties;
alias PhysicalDeviceInlineUniformBlockFeaturesEXT                 = PhysicalDeviceInlineUniformBlockFeatures;
alias PhysicalDeviceInlineUniformBlockPropertiesEXT               = PhysicalDeviceInlineUniformBlockProperties;
alias WriteDescriptorSetInlineUniformBlockEXT                     = WriteDescriptorSetInlineUniformBlock;
alias DescriptorPoolInlineUniformBlockCreateInfoEXT               = DescriptorPoolInlineUniformBlockCreateInfo;
alias AttachmentSampleCountInfoNV                                 = AttachmentSampleCountInfoAMD;
alias DescriptorBindingFlagsEXT                                   = DescriptorBindingFlags;
alias DescriptorSetLayoutBindingFlagsCreateInfoEXT                = DescriptorSetLayoutBindingFlagsCreateInfo;
alias PhysicalDeviceDescriptorIndexingFeaturesEXT                 = PhysicalDeviceDescriptorIndexingFeatures;
alias PhysicalDeviceDescriptorIndexingPropertiesEXT               = PhysicalDeviceDescriptorIndexingProperties;
alias DescriptorSetVariableDescriptorCountAllocateInfoEXT         = DescriptorSetVariableDescriptorCountAllocateInfo;
alias DescriptorSetVariableDescriptorCountLayoutSupportEXT        = DescriptorSetVariableDescriptorCountLayoutSupport;
alias RayTracingShaderGroupTypeNV                                 = RayTracingShaderGroupTypeKHR;
alias GeometryTypeNV                                              = GeometryTypeKHR;
alias AccelerationStructureTypeNV                                 = AccelerationStructureTypeKHR;
alias CopyAccelerationStructureModeNV                             = CopyAccelerationStructureModeKHR;
alias GeometryFlagsNV                                             = GeometryFlagsKHR;
alias GeometryInstanceFlagsNV                                     = GeometryInstanceFlagsKHR;
alias BuildAccelerationStructureFlagsNV                           = BuildAccelerationStructureFlagsKHR;
alias TransformMatrixNV                                           = TransformMatrixKHR;
alias AabbPositionsNV                                             = AabbPositionsKHR;
alias AccelerationStructureInstanceNV                             = AccelerationStructureInstanceKHR;
alias QueueGlobalPriorityEXT                                      = QueueGlobalPriority;
alias DeviceQueueGlobalPriorityCreateInfoEXT                      = DeviceQueueGlobalPriorityCreateInfo;
alias TimeDomainEXT                                               = TimeDomainKHR;
alias CalibratedTimestampInfoEXT                                  = CalibratedTimestampInfoKHR;
alias VertexInputBindingDivisorDescriptionEXT                     = VertexInputBindingDivisorDescription;
alias PipelineVertexInputDivisorStateCreateInfoEXT                = PipelineVertexInputDivisorStateCreateInfo;
alias PhysicalDeviceVertexAttributeDivisorFeaturesEXT             = PhysicalDeviceVertexAttributeDivisorFeatures;
alias PipelineCreationFeedbackFlagsEXT                            = PipelineCreationFeedbackFlags;
alias PipelineCreationFeedbackCreateInfoEXT                       = PipelineCreationFeedbackCreateInfo;
alias PipelineCreationFeedbackEXT                                 = PipelineCreationFeedback;
alias PhysicalDeviceComputeShaderDerivativesFeaturesNV            = PhysicalDeviceComputeShaderDerivativesFeaturesKHR;
alias PhysicalDeviceFragmentShaderBarycentricFeaturesNV           = PhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
alias QueryPoolCreateInfoINTEL                                    = QueryPoolPerformanceQueryCreateInfoINTEL;
alias PhysicalDeviceScalarBlockLayoutFeaturesEXT                  = PhysicalDeviceScalarBlockLayoutFeatures;
alias PhysicalDeviceSubgroupSizeControlFeaturesEXT                = PhysicalDeviceSubgroupSizeControlFeatures;
alias PhysicalDeviceSubgroupSizeControlPropertiesEXT              = PhysicalDeviceSubgroupSizeControlProperties;
alias PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT        = PipelineShaderStageRequiredSubgroupSizeCreateInfo;
alias PhysicalDeviceBufferAddressFeaturesEXT                      = PhysicalDeviceBufferDeviceAddressFeaturesEXT;
alias BufferDeviceAddressInfoEXT                                  = BufferDeviceAddressInfo;
alias ToolPurposeFlagsEXT                                         = ToolPurposeFlags;
alias PhysicalDeviceToolPropertiesEXT                             = PhysicalDeviceToolProperties;
alias ImageStencilUsageCreateInfoEXT                              = ImageStencilUsageCreateInfo;
alias ComponentTypeNV                                             = ComponentTypeKHR;
alias ScopeNV                                                     = ScopeKHR;
alias LineRasterizationModeEXT                                    = LineRasterizationMode;
alias PhysicalDeviceLineRasterizationFeaturesEXT                  = PhysicalDeviceLineRasterizationFeatures;
alias PhysicalDeviceLineRasterizationPropertiesEXT                = PhysicalDeviceLineRasterizationProperties;
alias PipelineRasterizationLineStateCreateInfoEXT                 = PipelineRasterizationLineStateCreateInfo;
alias PhysicalDeviceHostQueryResetFeaturesEXT                     = PhysicalDeviceHostQueryResetFeatures;
alias PhysicalDeviceIndexTypeUint8FeaturesEXT                     = PhysicalDeviceIndexTypeUint8Features;
alias HostImageCopyFlagsEXT                                       = HostImageCopyFlags;
alias PhysicalDeviceHostImageCopyFeaturesEXT                      = PhysicalDeviceHostImageCopyFeatures;
alias PhysicalDeviceHostImageCopyPropertiesEXT                    = PhysicalDeviceHostImageCopyProperties;
alias MemoryToImageCopyEXT                                        = MemoryToImageCopy;
alias ImageToMemoryCopyEXT                                        = ImageToMemoryCopy;
alias CopyMemoryToImageInfoEXT                                    = CopyMemoryToImageInfo;
alias CopyImageToMemoryInfoEXT                                    = CopyImageToMemoryInfo;
alias CopyImageToImageInfoEXT                                     = CopyImageToImageInfo;
alias HostImageLayoutTransitionInfoEXT                            = HostImageLayoutTransitionInfo;
alias SubresourceHostMemcpySizeEXT                                = SubresourceHostMemcpySize;
alias HostImageCopyDevicePerformanceQueryEXT                      = HostImageCopyDevicePerformanceQuery;
alias SubresourceLayout2EXT                                       = SubresourceLayout2;
alias ImageSubresource2EXT                                        = ImageSubresource2;
alias PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT     = PhysicalDeviceShaderDemoteToHelperInvocationFeatures;
alias PhysicalDeviceTexelBufferAlignmentPropertiesEXT             = PhysicalDeviceTexelBufferAlignmentProperties;
alias PrivateDataSlotEXT                                          = PrivateDataSlot;
alias PrivateDataSlotCreateFlagsEXT                               = PrivateDataSlotCreateFlags;
alias PhysicalDevicePrivateDataFeaturesEXT                        = PhysicalDevicePrivateDataFeatures;
alias DevicePrivateDataCreateInfoEXT                              = DevicePrivateDataCreateInfo;
alias PrivateDataSlotCreateInfoEXT                                = PrivateDataSlotCreateInfo;
alias PhysicalDevicePipelineCreationCacheControlFeaturesEXT       = PhysicalDevicePipelineCreationCacheControlFeatures;
alias PhysicalDeviceImageRobustnessFeaturesEXT                    = PhysicalDeviceImageRobustnessFeatures;
alias PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
alias PhysicalDeviceMutableDescriptorTypeFeaturesVALVE            = PhysicalDeviceMutableDescriptorTypeFeaturesEXT;
alias MutableDescriptorTypeListVALVE                              = MutableDescriptorTypeListEXT;
alias MutableDescriptorTypeCreateInfoVALVE                        = MutableDescriptorTypeCreateInfoEXT;
alias PipelineInfoEXT                                             = PipelineInfoKHR;
alias PhysicalDeviceGlobalPriorityQueryFeaturesEXT                = PhysicalDeviceGlobalPriorityQueryFeatures;
alias QueueFamilyGlobalPriorityPropertiesEXT                      = QueueFamilyGlobalPriorityProperties;
alias PhysicalDeviceSchedulingControlsFlagsARM                    = Flags64;
alias PhysicalDeviceSchedulingControlsFlagARM                     = Flags64;
alias PhysicalDeviceDepthClampZeroOneFeaturesEXT                  = PhysicalDeviceDepthClampZeroOneFeaturesKHR;
alias MemoryDecompressionMethodFlagNV                             = Flags64;
alias MemoryDecompressionMethodFlagsNV                            = Flags64;
alias PhysicalDevicePipelineProtectedAccessFeaturesEXT            = PhysicalDevicePipelineProtectedAccessFeatures;
alias ShaderRequiredSubgroupSizeCreateInfoEXT                     = PipelineShaderStageRequiredSubgroupSizeCreateInfo;
