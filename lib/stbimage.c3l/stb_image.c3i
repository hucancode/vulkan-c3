module stbimage;
import libc;

const int STBI_VERSION = 1;
const int DEFAULT    = 0;
const int GREY       = 1;
const int GREY_ALPHA = 2;
const int RGB        = 3;
const int RGB_ALPHA  = 4;

alias ProcRead = fn int(void* user, char* data, int size);
alias ProcSkip = fn void(void* user, int n);
alias ProcEof = fn int(void* user);
struct IOCallbacks {
    ProcRead read;
    ProcSkip skip;
    ProcEof eof;
}

fn char *load_from_memory(char* buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)
@extern("stbi_load_from_memory");
fn char *load_from_callbacks(IOCallbacks *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)
@extern("stbi_load_from_callbacks");

fn char *load            (ZString filename, int *x, int *y, int *channels_in_file, int desired_channels)
@if(!$defined(STBI_NO_STDIO))
@extern("stbi_load");
fn char *load_from_file  (CFile f, int *x, int *y, int *channels_in_file, int desired_channels)
@if(!$defined(STBI_NO_STDIO))
@extern("stbi_load_from_file");

fn char *load_gif_from_memory(char *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp)
@if(!$defined(STBI_NO_GIF))
@extern("stbi_load_gif_from_memory");

fn int convert_wchar_to_utf8 (char *buffer, usz bufferlen, short* input)
@if($defined(STBI_WINDOWS_UTF8))
@extern("stbi_convert_wchar_to_utf8");

fn ushort *load_16_from_memory   (char *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)
@if(!$defined(STBI_NO_STDIO))
@extern("stbi_load_16_from_memory");
fn ushort *load_16_from_callbacks(IOCallbacks *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)
@if(!$defined(STBI_NO_STDIO))
@extern("stbi_load_16_from_callbacks");

fn ushort *load_16          (ZString filename, int *x, int *y, int *channels_in_file, int desired_channels)
@extern("stbi_load_16");
fn ushort *load_from_file_16(CFile f, int *x, int *y, int *channels_in_file, int desired_channels)
@extern("stbi_load_from_file_16");

fn float *loadf_from_memory     (char *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)
@if(!$defined(STBI_NO_LINEAR))
@extern("stbi_loadf_from_memory");
fn float *loadf_from_callbacks  (IOCallbacks *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)
@if(!$defined(STBI_NO_LINEAR))
@extern("stbi_loadf_from_callbacks");

fn float *loadf            (ZString filename, int *x, int *y, int *channels_in_file, int desired_channels)
@if(!($defined(STBI_NO_LINEAR) || $defined(STBI_NO_STDIO)))
@extern("stbi_loadf");
fn float *loadf_from_file  (CFile f, int *x, int *y, int *channels_in_file, int desired_channels)
@if(!($defined(STBI_NO_LINEAR) || $defined(STBI_NO_STDIO)))
@extern("stbi_loadf_from_file");

fn void   hdr_to_ldr_gamma(float gamma)
@if(!$defined(STBI_NO_HDR))
@extern("stbi_hdr_to_ldr_gamma");
fn void   hdr_to_ldr_scale(float scale)
@if(!$defined(STBI_NO_HDR))
@extern("stbi_hdr_to_ldr_scale");

fn void   ldr_to_hdr_gamma(float gamma)
@if(!$defined(STBI_NO_LINEAR))
@extern("stbi_ldr_to_hdr_gamma");
fn void   ldr_to_hdr_scale(float scale)
@if(!$defined(STBI_NO_LINEAR))
@extern("stbi_ldr_to_hdr_scale");

fn int    is_hdr_from_callbacks(IOCallbacks *clbk, void *user)
@extern("stbi_is_hdr_from_callbacks");
fn int    is_hdr_from_memory(char *buffer, int len)
@extern("stbi_is_hdr_from_memory");
fn int    is_hdr          (ZString filename)
@if(!$defined(STBI_NO_STDIO))
@extern("stbi_is_hdr");
fn int    is_hdr_from_file(CFile f)
@if(!$defined(STBI_NO_STDIO))
@extern("stbi_is_hdr_from_file");

fn ZString failure_reason()
@extern("stbi_failure_reason");

fn void     image_free      (void *retval_from_stbi_load)
@extern("stbi_image_free");

fn int      info_from_memory(char *buffer, int len, int *x, int *y, int *comp)
@extern("stbi_info_from_memory");
fn int      info_from_callbacks(IOCallbacks *clbk, void *user, int *x, int *y, int *comp)
@extern("stbi_info_from_callbacks");
fn int      is_16_bit_from_memory(char *buffer, int len)
@extern("stbi_is_16_bit_from_memory");
fn int      is_16_bit_from_callbacks(IOCallbacks *clbk, void *user)
@extern("stbi_is_16_bit_from_callbacks");

fn int      info               (ZString filename,     int *x, int *y, int *comp)
@if(!$defined(STBI_NO_STDIO))
@extern("stbi_info");
fn int      info_from_file     (CFile f,              int *x, int *y, int *comp)
@if(!$defined(STBI_NO_STDIO))
@extern("stbi_info_from_file");
fn int      is_16_bit          (ZString filename)
@if(!$defined(STBI_NO_STDIO))
@extern("stbi_is_16_bit");
fn int      is_16_bit_from_file(CFile f)
@if(!$defined(STBI_NO_STDIO))
@extern("stbi_is_16_bit_from_file");

fn void set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)
@extern("stbi_set_unpremultiply_on_load");
fn void convert_iphone_png_to_rgb(int flag_true_if_should_convert)
@extern("stbi_convert_iphone_png_to_rgb");
fn void set_flip_vertically_on_load(int flag_true_if_should_flip)
@extern("stbi_set_flip_vertically_on_load");
fn void set_unpremultiply_on_load_thread(int flag_true_if_should_unpremultiply)
@extern("stbi_set_unpremultiply_on_load_thread");
fn void convert_iphone_png_to_rgb_thread(int flag_true_if_should_convert)
@extern("stbi_convert_iphone_png_to_rgb_thread");
fn void set_flip_vertically_on_load_thread(int flag_true_if_should_flip)
@extern("stbi_set_flip_vertically_on_load_thread");

module stb::zlib;
fn char *decode_malloc_guesssize(char *buffer, int len, int initial_size, int *outlen)
@extern("stbi_zlib_decode_malloc_guesssize");
fn char *decode_malloc_guesssize_headerflag(char *buffer, int len, int initial_size, int *outlen, int parse_header)
@extern("stbi_zlib_decode_malloc_guesssize_headerflag");
fn char *decode_malloc(char *buffer, int len, int *outlen)
@extern("stbi_zlib_decode_malloc");
fn int   decode_buffer(char *obuffer, int olen, char *ibuffer, int ilen)
@extern("stbi_zlib_decode_buffer");

fn char *decode_noheader_malloc(char *buffer, int len, int *outlen)
@extern("stbi_zlib_decode_noheader_malloc");
fn int   decode_noheader_buffer(char *obuffer, int olen, char *ibuffer, int ilen)
@extern("stbi_zlib_decode_noheader_buffer");
